{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Celestine # A neat library and DSL for creating graphics using SVG Installation # Add to shards.yml dependencies : celestine : github : celestinecr/celestine Usage # Drawing # First, all drawing is done through Celestine.draw this returns a string SVG element, or works on an IO . You can easily embed this into webpages for dynamic server side drawing of assets. Celestine.draw takes a block which takes a Celestine::Svg (or ctx in the examples), the basis of all DSL calls in Celestine. Celestine . draw do | ctx | end You can create objects to be drawn with one of two methods. Celestine . draw do | ctx | # use this context's DSL methods ctx . rectangle do | r | r . x = 10 r . y = 100 r . fill = \"black\" r # You must return the drawable item at the end of the DSL method. end # Create the object and add it manually r = Celestine :: Rectangle . new r . x = 10 r . y = 100 r . fill = \"black\" ctx << r end All context methods such as circle or rectangle take a block that takes their respective types, and needs to have an object of that type returned. Currently Implemented # A short list of the Celestine types that can be used by Celestine::Svg and their DSL methods Celestine::Anchor -> anchor Celestine::Circle -> circle Celestine::Ellipse -> ellipse Celestine::Filter -> filter Celestine::Group -> group Celestine::Image -> image Celestine::Marker -> marker Celestine::Mask -> mask Celestine::Path -> path Celestine::Rectangle -> rectangle Celestine::Svg -> svg Celestine::Text -> text Nested SVG # Celestine::Svg allows you to nest SVG. Celestine . draw do | ctx | ctx . svg do | svg_doc2 | svg_doc2 . rectangle do | r | r end svg_doc2 . circle do | c | c end svg_doc2 end end Groups # Celestine::Group allows you to group multiple elements under one parent. You can manipulate the x , y , and other attributes to apply them to the whole group, or just use it to combine elements easier. Celestine . draw do | ctx | ctx . group do | g | g . rectangle do | r | r end g . circle do | c | c end g end end Groups cannot define objects like Celestine::Svg can. Groups also cannot use the mask , filter , or marker DSL methods as they define in the SVG document. Use # Celestine::Use can be used to save space in an SVG, and reuse certain elements without the need to copy the entire object into your SVG document. The only caveat is that the use SVG element cannot change attributes it both doesn't own itself, or ones that have been set by it's ancestor, except in the case of x , y , width , and height . For example, the use element cannot change the radius of a circle even if the radius attribute had never been set. Celestine::Use also requires that the drawable it is copying has an id set. If not Celestine::Use will still let you reference an ID that doesn't exist if you run use with a string id . You can do this only with Celestine::Svg (or ctx in the examples). Celestine::Group , Celestine::Mask , Celestine::Marker cannot define drawables. The use element will only copy elements in the current SVG document you are in, so if you nest SVG inside SVG you need to be wary of how you define objects. Celestine . draw do | ctx | # Only `Celestine::Svg` is allowed to \"define\" objects. ctx . rectangle ( define : true ) do | r | # Set r's x, y, width, height and other attributes here r . id = \"our-rect\" # YOU MUST SET AN ID TO BE ABLE TO REUSE A COMPONENT, OR THERE IS NO WAY TO REFERENCE IT. r end ctx . use do | use | use . x = 100 use . y = 3000 use . width = 99 use . height = 99 use . fill = \"black\" # Cannot use this because `Celestine::Use` cannot change attributes specific to a drawable # only the attributes its shares with the type it's using. # use.radius_x = 1000 use end end Transform # Most drawables can use the transform method to translate, rotate, scale, and skew drawables. Celestine . draw do | ctx | ctx . rectangle do | r | # Set r's x, y, width, height and other attributes here r . transform do | t | t . rotate ( 60 , 0 , 0 ) # Rotate by 60 degrees, at origin 0, 0 t . translate ( 50 , 60 ) # Move by 50, 60 t . scale ( 100 , 100 ) # Scale up 100x t . skew_x ( 10 ) t . skew_y ( 10 ) t . matrix ( 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 ) t end r end end Masking # You can use masks to make complicated shapes. Celestine . draw do | ctx | our_mask = ctx . mask do | mask | mask . id = \"our-mask\" # YOU MUST SET A UNIQUE ID FOR THE MASK! mask . rectangle do | r | # Works just like a group # Set r's x, y, width, height and other attributes here r . fill = \"black\" # Will make everything under it invisibile and transparent r . fill = \"white\" # Will make everything under it visible r end mask end ctx . circle do | c | # Set c's x, y, radius and other attributes here c . set_mask our_mask # Set with the mask object directly c . set_mask \"our-mask\" # Set via string id c end end Patterns # You can apply complciated tiling/repeating fills and strokes using the pattern DSL. Celestine . draw do | ctx | our_pattern = ctx . pattern do | pattern | pattern . id = \"our-pattern\" # ALWAYS SET ID FOR A PATTERN OR IT CAN'T BE USED! pattern . rectangle do | r | r end pattern end ctx . circle do | c | # Either c . set_fill ( our_pattern ) # or c . set_stroke ( our_pattern ) c end end Gradients # You can apply gradient fills and strokes using the linear_gradient and radial_gradient DSLs Celestine . draw do | ctx | our_gradient = ctx . linear_gradient do | gradient | gradient . id = \"our-gradient\" # ALWAYS SET ID FOR A GRADIENT OR IT CAN'T BE USED! gradient . stop do | stop | stop . offset = 10 stop . offset_units = \"%\" stop . color = \"red\" stop . opacity = 1.0 stop end gradient end ctx . circle do | c | # Either c . set_fill ( our_gradient ) # or c . set_stroke ( our_gradient ) c end end Animate # You can animate most simple SVG attributes using animate and the from and to attributes. Celestine . draw do | ctx | ctx . circle do | c | # IF ANIMATING AN ATTRIBUTE DO NOT SET IT IN ANY WAY, IT WILL OVERRIDE THE ANIMATION, BLAME SVG NOT ME # EX: # Using `c.radius = 100` will ruin the animation. c . animate do | a | a . attribute = \"r\" # Choose it directly a . attribute = Celestine :: Circle :: Attrs :: RADIUS # Choose it using the predefined constants a . from = 100 a . to = 200 a . duration = 10 a . repeat_count = \"indefinite\" a end c end end You can also animate more complicated attributes and transition using the values array. SVG attempts to interpolate these values when possible. If you use values and don't also use the key_times array to designate the timing changes, it will evenly space the animation values in the alotted time. Celestine . draw do | ctx | ctx . circle do | c | c . animate do | a | a . attribute = Celestine :: Circle :: Attrs :: Fill a . values << \"red\" # Will start the color of the fill at red a . values << \"blue\" # Then interpolate to blue a . values << \"red\" # Then interpolate back to red. a . duration = 10 a . repeat_count = \"indefinite\" a end c . animate do | a | a . attribute = Celestine :: Circle :: Attrs :: Stroke a . values << \"red\" # Will start the color of the fill at red a . values << \"blue\" # Then interpolate to blue a . values << \"red\" # Then interpolate back to red. a . key_times << 0.0 # Change to red to start. You should almost always use 0.0 as your first key_times value a . key_times << 0.25 # Interpolate to blue at 25% of the duration a . key_times << 0.75 # Interpolate to red at 75% of the duration a_key_times << 1.0 # End the animation a . duration = 10 a . repeat_count = \"indefinite\" a end c end end AnimateMotion # You can animate movement along paths using animate_motion . Celestine . draw do | ctx | ctx . circle do | c | c . animate_motion do | a | # Make the path the animateMotion element will follow. a . mpath do | path | path . a_move ( 200 , 200 ) path . r_line ( 20 , 20 ) path . r_line ( - 20 , 20 ) path . r_line ( - 20 , - 20 ) path . r_line ( 20 , - 20 ) path end a . duration = 10 a . repeat_count = \"indefinite\" a end c end end AnimateTransform # You can animate transform elements using animate_transform_* . Only rotate is supported right now. Celestine . draw do | ctx | ctx . circle do | c | c . animate_transform_rotate do | a | a . use_from = true # Need to set these to allow `from` to render in the SVG element a . use_to = true # Need to set these to allow `to` to render in the SVG element a . from_angle = 0 a . to_angle = 360 a . from_origin_x = a . from_origin_y = a . to_origin_x = a . to_origin_y = 0 a . duration = 10 a . repeat_count = \"indefinite\" a end c end end Filters # You can do some cool filtering using the filter DSL. Celestine . draw do | ctx | our_filter = ctx . filter do | f | f . id = \"our-filter\" # ALWAYS SET ID FOR A FILTER OR IT CAN'T BE USED! f . blur do | b | b . standard_deviation = 5 b end f end ctx . circle do | c | # Either c . set_filter ( \"our-filter\" ) # or c . set_filter ( our_filter ) c end end Currently Implemented # Celestine::Filter::Blend -> blend Celestine::Filter::Blur -> blur Celestine::Filter::ColorMatrix -> color_matrix Celestine::Filter::ComponentTransfer -> component_transfer Celestine::Filter::Composite -> composite Celestine::Filter::DisplacementMap -> displacement_map Celestine::Filter::DropShadow -> drop_shadow Celestine::Filter::Flood -> flood Celestine::Filter::Image -> image Celestine::Filter::Merge -> merge Celestine::Filter::Morphology -> morphology Celestine::Filter::Offset -> offset Celestine::Filter::SpecularLighting -> specular_lighting Celestine::Filter::Tile -> tile Celestine::Filter::Turbulence -> turbulence","title":"Usage"},{"location":"index.html#celestine","text":"A neat library and DSL for creating graphics using SVG","title":"Celestine"},{"location":"index.html#installation","text":"Add to shards.yml dependencies : celestine : github : celestinecr/celestine","title":"Installation"},{"location":"index.html#usage","text":"","title":"Usage"},{"location":"index.html#drawing","text":"First, all drawing is done through Celestine.draw this returns a string SVG element, or works on an IO . You can easily embed this into webpages for dynamic server side drawing of assets. Celestine.draw takes a block which takes a Celestine::Svg (or ctx in the examples), the basis of all DSL calls in Celestine. Celestine . draw do | ctx | end You can create objects to be drawn with one of two methods. Celestine . draw do | ctx | # use this context's DSL methods ctx . rectangle do | r | r . x = 10 r . y = 100 r . fill = \"black\" r # You must return the drawable item at the end of the DSL method. end # Create the object and add it manually r = Celestine :: Rectangle . new r . x = 10 r . y = 100 r . fill = \"black\" ctx << r end All context methods such as circle or rectangle take a block that takes their respective types, and needs to have an object of that type returned.","title":"Drawing"},{"location":"index.html#currently-implemented","text":"A short list of the Celestine types that can be used by Celestine::Svg and their DSL methods Celestine::Anchor -> anchor Celestine::Circle -> circle Celestine::Ellipse -> ellipse Celestine::Filter -> filter Celestine::Group -> group Celestine::Image -> image Celestine::Marker -> marker Celestine::Mask -> mask Celestine::Path -> path Celestine::Rectangle -> rectangle Celestine::Svg -> svg Celestine::Text -> text","title":"Currently Implemented"},{"location":"index.html#nested-svg","text":"Celestine::Svg allows you to nest SVG. Celestine . draw do | ctx | ctx . svg do | svg_doc2 | svg_doc2 . rectangle do | r | r end svg_doc2 . circle do | c | c end svg_doc2 end end","title":"Nested SVG"},{"location":"index.html#groups","text":"Celestine::Group allows you to group multiple elements under one parent. You can manipulate the x , y , and other attributes to apply them to the whole group, or just use it to combine elements easier. Celestine . draw do | ctx | ctx . group do | g | g . rectangle do | r | r end g . circle do | c | c end g end end Groups cannot define objects like Celestine::Svg can. Groups also cannot use the mask , filter , or marker DSL methods as they define in the SVG document.","title":"Groups"},{"location":"index.html#use","text":"Celestine::Use can be used to save space in an SVG, and reuse certain elements without the need to copy the entire object into your SVG document. The only caveat is that the use SVG element cannot change attributes it both doesn't own itself, or ones that have been set by it's ancestor, except in the case of x , y , width , and height . For example, the use element cannot change the radius of a circle even if the radius attribute had never been set. Celestine::Use also requires that the drawable it is copying has an id set. If not Celestine::Use will still let you reference an ID that doesn't exist if you run use with a string id . You can do this only with Celestine::Svg (or ctx in the examples). Celestine::Group , Celestine::Mask , Celestine::Marker cannot define drawables. The use element will only copy elements in the current SVG document you are in, so if you nest SVG inside SVG you need to be wary of how you define objects. Celestine . draw do | ctx | # Only `Celestine::Svg` is allowed to \"define\" objects. ctx . rectangle ( define : true ) do | r | # Set r's x, y, width, height and other attributes here r . id = \"our-rect\" # YOU MUST SET AN ID TO BE ABLE TO REUSE A COMPONENT, OR THERE IS NO WAY TO REFERENCE IT. r end ctx . use do | use | use . x = 100 use . y = 3000 use . width = 99 use . height = 99 use . fill = \"black\" # Cannot use this because `Celestine::Use` cannot change attributes specific to a drawable # only the attributes its shares with the type it's using. # use.radius_x = 1000 use end end","title":"Use"},{"location":"index.html#transform","text":"Most drawables can use the transform method to translate, rotate, scale, and skew drawables. Celestine . draw do | ctx | ctx . rectangle do | r | # Set r's x, y, width, height and other attributes here r . transform do | t | t . rotate ( 60 , 0 , 0 ) # Rotate by 60 degrees, at origin 0, 0 t . translate ( 50 , 60 ) # Move by 50, 60 t . scale ( 100 , 100 ) # Scale up 100x t . skew_x ( 10 ) t . skew_y ( 10 ) t . matrix ( 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 ) t end r end end","title":"Transform"},{"location":"index.html#masking","text":"You can use masks to make complicated shapes. Celestine . draw do | ctx | our_mask = ctx . mask do | mask | mask . id = \"our-mask\" # YOU MUST SET A UNIQUE ID FOR THE MASK! mask . rectangle do | r | # Works just like a group # Set r's x, y, width, height and other attributes here r . fill = \"black\" # Will make everything under it invisibile and transparent r . fill = \"white\" # Will make everything under it visible r end mask end ctx . circle do | c | # Set c's x, y, radius and other attributes here c . set_mask our_mask # Set with the mask object directly c . set_mask \"our-mask\" # Set via string id c end end","title":"Masking"},{"location":"index.html#patterns","text":"You can apply complciated tiling/repeating fills and strokes using the pattern DSL. Celestine . draw do | ctx | our_pattern = ctx . pattern do | pattern | pattern . id = \"our-pattern\" # ALWAYS SET ID FOR A PATTERN OR IT CAN'T BE USED! pattern . rectangle do | r | r end pattern end ctx . circle do | c | # Either c . set_fill ( our_pattern ) # or c . set_stroke ( our_pattern ) c end end","title":"Patterns"},{"location":"index.html#gradients","text":"You can apply gradient fills and strokes using the linear_gradient and radial_gradient DSLs Celestine . draw do | ctx | our_gradient = ctx . linear_gradient do | gradient | gradient . id = \"our-gradient\" # ALWAYS SET ID FOR A GRADIENT OR IT CAN'T BE USED! gradient . stop do | stop | stop . offset = 10 stop . offset_units = \"%\" stop . color = \"red\" stop . opacity = 1.0 stop end gradient end ctx . circle do | c | # Either c . set_fill ( our_gradient ) # or c . set_stroke ( our_gradient ) c end end","title":"Gradients"},{"location":"index.html#animate","text":"You can animate most simple SVG attributes using animate and the from and to attributes. Celestine . draw do | ctx | ctx . circle do | c | # IF ANIMATING AN ATTRIBUTE DO NOT SET IT IN ANY WAY, IT WILL OVERRIDE THE ANIMATION, BLAME SVG NOT ME # EX: # Using `c.radius = 100` will ruin the animation. c . animate do | a | a . attribute = \"r\" # Choose it directly a . attribute = Celestine :: Circle :: Attrs :: RADIUS # Choose it using the predefined constants a . from = 100 a . to = 200 a . duration = 10 a . repeat_count = \"indefinite\" a end c end end You can also animate more complicated attributes and transition using the values array. SVG attempts to interpolate these values when possible. If you use values and don't also use the key_times array to designate the timing changes, it will evenly space the animation values in the alotted time. Celestine . draw do | ctx | ctx . circle do | c | c . animate do | a | a . attribute = Celestine :: Circle :: Attrs :: Fill a . values << \"red\" # Will start the color of the fill at red a . values << \"blue\" # Then interpolate to blue a . values << \"red\" # Then interpolate back to red. a . duration = 10 a . repeat_count = \"indefinite\" a end c . animate do | a | a . attribute = Celestine :: Circle :: Attrs :: Stroke a . values << \"red\" # Will start the color of the fill at red a . values << \"blue\" # Then interpolate to blue a . values << \"red\" # Then interpolate back to red. a . key_times << 0.0 # Change to red to start. You should almost always use 0.0 as your first key_times value a . key_times << 0.25 # Interpolate to blue at 25% of the duration a . key_times << 0.75 # Interpolate to red at 75% of the duration a_key_times << 1.0 # End the animation a . duration = 10 a . repeat_count = \"indefinite\" a end c end end","title":"Animate"},{"location":"index.html#animatemotion","text":"You can animate movement along paths using animate_motion . Celestine . draw do | ctx | ctx . circle do | c | c . animate_motion do | a | # Make the path the animateMotion element will follow. a . mpath do | path | path . a_move ( 200 , 200 ) path . r_line ( 20 , 20 ) path . r_line ( - 20 , 20 ) path . r_line ( - 20 , - 20 ) path . r_line ( 20 , - 20 ) path end a . duration = 10 a . repeat_count = \"indefinite\" a end c end end","title":"AnimateMotion"},{"location":"index.html#animatetransform","text":"You can animate transform elements using animate_transform_* . Only rotate is supported right now. Celestine . draw do | ctx | ctx . circle do | c | c . animate_transform_rotate do | a | a . use_from = true # Need to set these to allow `from` to render in the SVG element a . use_to = true # Need to set these to allow `to` to render in the SVG element a . from_angle = 0 a . to_angle = 360 a . from_origin_x = a . from_origin_y = a . to_origin_x = a . to_origin_y = 0 a . duration = 10 a . repeat_count = \"indefinite\" a end c end end","title":"AnimateTransform"},{"location":"index.html#filters","text":"You can do some cool filtering using the filter DSL. Celestine . draw do | ctx | our_filter = ctx . filter do | f | f . id = \"our-filter\" # ALWAYS SET ID FOR A FILTER OR IT CAN'T BE USED! f . blur do | b | b . standard_deviation = 5 b end f end ctx . circle do | c | # Either c . set_filter ( \"our-filter\" ) # or c . set_filter ( our_filter ) c end end","title":"Filters"},{"location":"index.html#currently-implemented_1","text":"Celestine::Filter::Blend -> blend Celestine::Filter::Blur -> blur Celestine::Filter::ColorMatrix -> color_matrix Celestine::Filter::ComponentTransfer -> component_transfer Celestine::Filter::Composite -> composite Celestine::Filter::DisplacementMap -> displacement_map Celestine::Filter::DropShadow -> drop_shadow Celestine::Filter::Flood -> flood Celestine::Filter::Image -> image Celestine::Filter::Merge -> merge Celestine::Filter::Morphology -> morphology Celestine::Filter::Offset -> offset Celestine::Filter::SpecularLighting -> specular_lighting Celestine::Filter::Tile -> tile Celestine::Filter::Turbulence -> turbulence","title":"Currently Implemented"},{"location":"Celestine.html","text":"module Celestine # Main module for Celestine Constants # VERSION = {{ ( `shards version /home/runner/work/celestine/celestine/src` ) . chomp . stringify }} # Class methods # .draw ( io : IO , & block : Proc ( Celestine::Svg , Nil )) : IO # View source .draw ( & block : Proc ( Celestine::Svg , Nil )) : String # Main draw function for DSL View source","title":"API"},{"location":"Celestine.html#Celestine","text":"Main module for Celestine","title":"Celestine"},{"location":"Celestine.html#Celestine-constants","text":"","title":"Constants"},{"location":"Celestine.html#Celestine::VERSION","text":"","title":"VERSION"},{"location":"Celestine.html#Celestine-class-methods","text":"","title":"Class methods"},{"location":"Celestine.html#Celestine.draw(io,&)","text":"View source","title":".draw"},{"location":"SUMMARY.html","text":"Usage API Drawable Anchor Animate Motion Circle Ellipse Filter Basic Blend Blur ColorMatrix ComponentTransfer Func FuncA FuncB FuncG FuncR Composite DisplacementMap DropShadow Flood Image Merge Morphology Offset SpecularLighting Tile Turbulence Gradient Linear Radial Stop Group Image Marker Mask Path Pattern Rectangle Svg Text Transform Use FPoint Logo Math Meta Context Methods Modules Animate Motion Transform Rotate Scale SkewX SkewY Translate Body CPosition CommonAnimate Filter Marker Mask Position StrokeFill Transform Point ViewBox","title":"SUMMARY"},{"location":"svg_element_checklist.html","text":"Legend # \u2718 - Not Implemented (But it can be discussed if this is of any real value) = - Will Not Be Implemented ^ - Planned To Be Implemented / - Partially Implemented \u2713 - Is Implemented Status Tag How Notes \u2713 a anchor \u2713 animate animate \u2713 animateMotion animate_motion \u2713 animateTransform animate_transform_{type} thanks sugarfi ! \u2713 circle circle ^ clipPath \u2713 defs define ^ desc = discard Doesn't seem implemented by browsers \u2713 ellipse ellipse \u2713 feBlend Celestine::Filter#blend \u2713 feColorMatrix Celestine::Filter#color_matrix \u2713 feComponentTransfer Celestine::Filter#component_transfer \u2713 feComposite Celestine::Filter#composite ^ feConvolveMatrix ^ feDiffuseLighting \u2713 feDisplacementMap Celestine::Filter#displacement_map / feDistantLight \u2713 feDropShadow Celestine::Filter#drop_shadow \u2713 feFlood Celestine::Filter#flood \u2713 feFuncA see \u2713 feFuncB see \u2713 feFuncG see \u2713 feFuncR see \u2713 feGaussianBlur Celestine::Filter#blur \u2713 feImage Celestine::Filter#image \u2713 feMerge Celestine::Filter#merge \u2713 feMergeNode Celestine::Merge#add_node \u2713 feMorphology Celestine::Filter#morphology \u2713 feOffset Celestine::Filter#offset / fePointLight \u2713 feSpecularLighting Celestine::Filter#specular_lighting / feSpotLight \u2713 feTile Celestine::Filter#tile \u2713 feTurbulence Celestine::Filter#turbulence \u2713 filter filter \u2718 foreignObject \u2713 g group = hatch Doesn't seem implemented by browsers = hatchpath Doesn't seem implemented by browsers \u2713 image image \u2718 line Seems covered by path.... \u2713 linearGradient / marker marker \u2713 mask mask ^ metadata \u2713 mpath Celestine::Animate::Motion#mpath \u2713 path path \u2713 pattern \u2718 polygon Seems covered by path \u2718 polyline Seems covered by path \u2713 radialGradient \u2713 rect rectangle \u2718 script Not sure if this should be implemented... ^ set This seems useful for simple interactivity \u2713 stop Part of gradient \u2718 style Not sure if this should be implemented... \u2713 svg svg Fully Implemented! ^ switch Would allow local dialect switching for text \u2718 symbol Is this any different than group? \u2713 text text ^ textPath Part of text ^ title Rendered as a tooltip when hovering the object ^ tspan Part of text \u2713 use use \u2718 view Doesn't seem to be implemented, even mozillas example doesn't work","title":"Svg element checklist"},{"location":"svg_element_checklist.html#legend","text":"\u2718 - Not Implemented (But it can be discussed if this is of any real value) = - Will Not Be Implemented ^ - Planned To Be Implemented / - Partially Implemented \u2713 - Is Implemented Status Tag How Notes \u2713 a anchor \u2713 animate animate \u2713 animateMotion animate_motion \u2713 animateTransform animate_transform_{type} thanks sugarfi ! \u2713 circle circle ^ clipPath \u2713 defs define ^ desc = discard Doesn't seem implemented by browsers \u2713 ellipse ellipse \u2713 feBlend Celestine::Filter#blend \u2713 feColorMatrix Celestine::Filter#color_matrix \u2713 feComponentTransfer Celestine::Filter#component_transfer \u2713 feComposite Celestine::Filter#composite ^ feConvolveMatrix ^ feDiffuseLighting \u2713 feDisplacementMap Celestine::Filter#displacement_map / feDistantLight \u2713 feDropShadow Celestine::Filter#drop_shadow \u2713 feFlood Celestine::Filter#flood \u2713 feFuncA see \u2713 feFuncB see \u2713 feFuncG see \u2713 feFuncR see \u2713 feGaussianBlur Celestine::Filter#blur \u2713 feImage Celestine::Filter#image \u2713 feMerge Celestine::Filter#merge \u2713 feMergeNode Celestine::Merge#add_node \u2713 feMorphology Celestine::Filter#morphology \u2713 feOffset Celestine::Filter#offset / fePointLight \u2713 feSpecularLighting Celestine::Filter#specular_lighting / feSpotLight \u2713 feTile Celestine::Filter#tile \u2713 feTurbulence Celestine::Filter#turbulence \u2713 filter filter \u2718 foreignObject \u2713 g group = hatch Doesn't seem implemented by browsers = hatchpath Doesn't seem implemented by browsers \u2713 image image \u2718 line Seems covered by path.... \u2713 linearGradient / marker marker \u2713 mask mask ^ metadata \u2713 mpath Celestine::Animate::Motion#mpath \u2713 path path \u2713 pattern \u2718 polygon Seems covered by path \u2718 polyline Seems covered by path \u2713 radialGradient \u2713 rect rectangle \u2718 script Not sure if this should be implemented... ^ set This seems useful for simple interactivity \u2713 stop Part of gradient \u2718 style Not sure if this should be implemented... \u2713 svg svg Fully Implemented! ^ switch Would allow local dialect switching for text \u2718 symbol Is this any different than group? \u2713 text text ^ textPath Part of text ^ title Rendered as a tooltip when hovering the object ^ tspan Part of text \u2713 use use \u2718 view Doesn't seem to be implemented, even mozillas example doesn't work","title":"Legend"},{"location":"Celestine/Anchor.html","text":"class Celestine::Anchor inherits Celestine::Drawable # Group class which can group multiple drawables together. Included modules Celestine::Meta::Context::Methods Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::Filter Celestine::Modules::Mask Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"a\" # Methods # #anchor ( & block : Celestine::Anchor -> Celestine::Anchor ) : Celestine::Anchor # Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items. #circle ( & block : Celestine::Circle -> Celestine::Circle ) : Celestine::Circle # Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items. #draw ( io : IO ) : Nil # Draws the group to an IO View source #ellipse ( & block : Celestine::Ellipse -> Celestine::Ellipse ) : Celestine::Ellipse # Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items. #group ( & block : Celestine::Group -> Celestine::Group ) : Celestine::Group # Allows a Celestine::Group to be made using a DSL call, and added to this drawables items. #href : String? # The URI for the image Mozilla SVG Docs View source #href= ( href : String? ) # The URI for the image Mozilla SVG Docs View source #image ( & block : Celestine::Image -> Celestine::Image ) : Celestine::Image # Allows a Celestine::Image to be made using a DSL call, and added to this drawables items. #path ( & block : Celestine::Path -> Celestine::Path ) : Celestine::Path # Allows a Celestine::Path to be made using a DSL call, and added to this drawables items. #rectangle ( & block : Celestine::Rectangle -> Celestine::Rectangle ) : Celestine::Rectangle # Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items. #svg ( & block : Celestine::Svg -> Celestine::Svg ) : Celestine::Svg # Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items. #text ( & block : Celestine::Text -> Celestine::Text ) : Celestine::Text # Allows a Celestine::Text to be made using a DSL call, and added to this drawables items. module Celestine::Anchor::Attrs # Included modules Celestine::Modules::Filter::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs Constants # HREF = \"href\" #","title":"Anchor"},{"location":"Celestine/Anchor.html#Celestine::Anchor","text":"Group class which can group multiple drawables together.","title":"Anchor"},{"location":"Celestine/Anchor.html#Celestine::Anchor-constants","text":"","title":"Constants"},{"location":"Celestine/Anchor.html#Celestine::Anchor::TAG","text":"","title":"TAG"},{"location":"Celestine/Anchor.html#Celestine::Anchor-methods","text":"","title":"Methods"},{"location":"Celestine/Anchor.html#Celestine::Anchor#anchor(&)","text":"Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items.","title":"#anchor"},{"location":"Celestine/Anchor.html#Celestine::Anchor#circle(&)","text":"Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items.","title":"#circle"},{"location":"Celestine/Anchor.html#Celestine::Anchor#draw(io)","text":"Draws the group to an IO View source","title":"#draw"},{"location":"Celestine/Anchor.html#Celestine::Anchor#ellipse(&)","text":"Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items.","title":"#ellipse"},{"location":"Celestine/Anchor.html#Celestine::Anchor#group(&)","text":"Allows a Celestine::Group to be made using a DSL call, and added to this drawables items.","title":"#group"},{"location":"Celestine/Anchor.html#Celestine::Anchor#href","text":"The URI for the image Mozilla SVG Docs View source","title":"#href"},{"location":"Celestine/Anchor.html#Celestine::Anchor#href=(href)","text":"The URI for the image Mozilla SVG Docs View source","title":"#href="},{"location":"Celestine/Anchor.html#Celestine::Anchor#image(&)","text":"Allows a Celestine::Image to be made using a DSL call, and added to this drawables items.","title":"#image"},{"location":"Celestine/Anchor.html#Celestine::Anchor#path(&)","text":"Allows a Celestine::Path to be made using a DSL call, and added to this drawables items.","title":"#path"},{"location":"Celestine/Anchor.html#Celestine::Anchor#rectangle(&)","text":"Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items.","title":"#rectangle"},{"location":"Celestine/Anchor.html#Celestine::Anchor#svg(&)","text":"Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items.","title":"#svg"},{"location":"Celestine/Anchor.html#Celestine::Anchor#text(&)","text":"Allows a Celestine::Text to be made using a DSL call, and added to this drawables items.","title":"#text"},{"location":"Celestine/Anchor.html#Celestine::Anchor::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Anchor.html#Celestine::Anchor::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Anchor.html#Celestine::Anchor::Attrs::HREF","text":"","title":"HREF"},{"location":"Celestine/Animate.html","text":"class Celestine::Animate inherits Celestine::Drawable # Included modules Celestine::Modules::Animate Celestine::Modules::CommonAnimate Constants # TAG = \"animate\" # Methods # #attribute : String? # The attribute that will be controlled by the animation. You can dig into any Celestine::Drawable 's Attrs module (ex: Celestine::Circle::Attrs ) and it will contain a list of all attributes the drawable has access to, however, not all attributes are animatable. View source #attribute= ( attribute : String? ) # The attribute that will be controlled by the animation. You can dig into any Celestine::Drawable 's Attrs module (ex: Celestine::Circle::Attrs ) and it will contain a list of all attributes the drawable has access to, however, not all attributes are animatable. View source #by : IFNumber? # An optional way to specify the amount an attribute should change by per frame #by= ( by : IFNumber? ) # An optional way to specify the amount an attribute should change by per frame #by_units : String? # What kind of unit by should use when rendering #by_units= ( by_units : String? ) # What kind of unit by should use when rendering #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #from : IFNumber? # An optional way to specify what value to start at in the animation. #from= ( from : IFNumber? ) # An optional way to specify what value to start at in the animation. #from_units : String? # What kind of unit from should use when rendering #from_units= ( from_units : String? ) # What kind of unit from should use when rendering #to : IFNumber? # An optional way to specify what value to end at in the animation. #to= ( to : IFNumber? ) # An optional way to specify what value to end at in the animation. #to_units : String? # What kind of unit to should use when rendering #to_units= ( to_units : String? ) # What kind of unit to should use when rendering module Celestine::Animate::Attrs # Included modules Celestine::Modules::CommonAnimate::Attrs Constants # ATTRIBUTE_NAME = \"attributeName\" # BY = \"by\" # FROM = \"from\" # TO = \"to\" #","title":"Animate"},{"location":"Celestine/Animate.html#Celestine::Animate","text":"","title":"Animate"},{"location":"Celestine/Animate.html#Celestine::Animate-constants","text":"","title":"Constants"},{"location":"Celestine/Animate.html#Celestine::Animate::TAG","text":"","title":"TAG"},{"location":"Celestine/Animate.html#Celestine::Animate-methods","text":"","title":"Methods"},{"location":"Celestine/Animate.html#Celestine::Animate#attribute","text":"The attribute that will be controlled by the animation. You can dig into any Celestine::Drawable 's Attrs module (ex: Celestine::Circle::Attrs ) and it will contain a list of all attributes the drawable has access to, however, not all attributes are animatable. View source","title":"#attribute"},{"location":"Celestine/Animate.html#Celestine::Animate#attribute=(attribute)","text":"The attribute that will be controlled by the animation. You can dig into any Celestine::Drawable 's Attrs module (ex: Celestine::Circle::Attrs ) and it will contain a list of all attributes the drawable has access to, however, not all attributes are animatable. View source","title":"#attribute="},{"location":"Celestine/Animate.html#Celestine::Animate#by","text":"An optional way to specify the amount an attribute should change by per frame","title":"#by"},{"location":"Celestine/Animate.html#Celestine::Animate#by=(by)","text":"An optional way to specify the amount an attribute should change by per frame","title":"#by="},{"location":"Celestine/Animate.html#Celestine::Animate#by_units","text":"What kind of unit by should use when rendering","title":"#by_units"},{"location":"Celestine/Animate.html#Celestine::Animate#by_units=(by_units)","text":"What kind of unit by should use when rendering","title":"#by_units="},{"location":"Celestine/Animate.html#Celestine::Animate#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Animate.html#Celestine::Animate#from","text":"An optional way to specify what value to start at in the animation.","title":"#from"},{"location":"Celestine/Animate.html#Celestine::Animate#from=(from)","text":"An optional way to specify what value to start at in the animation.","title":"#from="},{"location":"Celestine/Animate.html#Celestine::Animate#from_units","text":"What kind of unit from should use when rendering","title":"#from_units"},{"location":"Celestine/Animate.html#Celestine::Animate#from_units=(from_units)","text":"What kind of unit from should use when rendering","title":"#from_units="},{"location":"Celestine/Animate.html#Celestine::Animate#to","text":"An optional way to specify what value to end at in the animation.","title":"#to"},{"location":"Celestine/Animate.html#Celestine::Animate#to=(to)","text":"An optional way to specify what value to end at in the animation.","title":"#to="},{"location":"Celestine/Animate.html#Celestine::Animate#to_units","text":"What kind of unit to should use when rendering","title":"#to_units"},{"location":"Celestine/Animate.html#Celestine::Animate#to_units=(to_units)","text":"What kind of unit to should use when rendering","title":"#to_units="},{"location":"Celestine/Animate.html#Celestine::Animate::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Animate.html#Celestine::Animate::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Animate.html#Celestine::Animate::Attrs::ATTRIBUTE_NAME","text":"","title":"ATTRIBUTE_NAME"},{"location":"Celestine/Animate.html#Celestine::Animate::Attrs::BY","text":"","title":"BY"},{"location":"Celestine/Animate.html#Celestine::Animate::Attrs::FROM","text":"","title":"FROM"},{"location":"Celestine/Animate.html#Celestine::Animate::Attrs::TO","text":"","title":"TO"},{"location":"Celestine/Circle.html","text":"class Celestine::Circle inherits Celestine::Drawable # Draws and holds information for circles Mozilla SVG Docs Included modules Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::CPosition Celestine::Modules::Filter Celestine::Modules::Marker Celestine::Modules::Mask Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"circle\" # Methods # #diameter # The diameter of the circle View source #draw ( io : IO ) : Nil # Draws this circle to an IO View source #radius : IFNumber? # Radius of the circle Mozilla SVG Docs #radius= ( radius : IFNumber? ) # Radius of the circle Mozilla SVG Docs #radius_units : String? # What kind of unit radius should use when rendering #radius_units= ( radius_units : String? ) # What kind of unit radius should use when rendering module Celestine::Circle::Attrs # Included modules Celestine::Modules::CPosition::Attrs Celestine::Modules::Filter::Attrs Celestine::Modules::Marker::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs Constants # RADIUS = \"r\" #","title":"Circle"},{"location":"Celestine/Circle.html#Celestine::Circle","text":"Draws and holds information for circles Mozilla SVG Docs","title":"Circle"},{"location":"Celestine/Circle.html#Celestine::Circle-constants","text":"","title":"Constants"},{"location":"Celestine/Circle.html#Celestine::Circle::TAG","text":"","title":"TAG"},{"location":"Celestine/Circle.html#Celestine::Circle-methods","text":"","title":"Methods"},{"location":"Celestine/Circle.html#Celestine::Circle#diameter","text":"The diameter of the circle View source","title":"#diameter"},{"location":"Celestine/Circle.html#Celestine::Circle#draw(io)","text":"Draws this circle to an IO View source","title":"#draw"},{"location":"Celestine/Circle.html#Celestine::Circle#radius","text":"Radius of the circle Mozilla SVG Docs","title":"#radius"},{"location":"Celestine/Circle.html#Celestine::Circle#radius=(radius)","text":"Radius of the circle Mozilla SVG Docs","title":"#radius="},{"location":"Celestine/Circle.html#Celestine::Circle#radius_units","text":"What kind of unit radius should use when rendering","title":"#radius_units"},{"location":"Celestine/Circle.html#Celestine::Circle#radius_units=(radius_units)","text":"What kind of unit radius should use when rendering","title":"#radius_units="},{"location":"Celestine/Circle.html#Celestine::Circle::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Circle.html#Celestine::Circle::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Circle.html#Celestine::Circle::Attrs::RADIUS","text":"","title":"RADIUS"},{"location":"Celestine/Drawable.html","text":"abstract class Celestine::Drawable inherits Reference # Basic SVG drawable, inheritted by stuff like circles, rectangles, etc. Direct known subclasses Celestine::Anchor Celestine::Animate Celestine::Animate::Motion Celestine::Circle Celestine::Ellipse Celestine::Filter Celestine::Filter::Basic Celestine::Filter::ComponentTransfer::Func Celestine::Gradient Celestine::Gradient::Stop Celestine::Group Celestine::Image Celestine::Marker Celestine::Mask Celestine::Modules::Animate::Transform::Rotate Celestine::Modules::Animate::Transform::Scale Celestine::Modules::Animate::Transform::SkewX Celestine::Modules::Animate::Transform::SkewY Celestine::Modules::Animate::Transform::Translate Celestine::Path Celestine::Pattern Celestine::Rectangle Celestine::Svg Celestine::Text Celestine::Use Methods # #class_attribute ( io : IO ) # Rendered class options View source #classes : Array ( String ) # A list of the classes for this object View source #classes= ( classes : Array ( String )) # A list of the classes for this object View source #custom_attribute ( io : IO ) # Rendered custom attributes View source #custom_attrs : Hash ( String , String ) # A list of custom attributes View source #custom_attrs= ( custom_attrs ) # A list of custom attributes View source abstract #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #id : String? # ID of this object View source #id= ( id : String? ) # ID of this object View source #id_attribute ( io : IO ) # Render ID options View source #inner_elements : IO :: Memory # The inner elements of this drawable. View source #inner_elements= ( inner_elements ) # The inner elements of this drawable. View source #style : Hash ( String , String ) # A list of the style options View source #style= ( style ) # A list of the style options View source #style_attribute ( io : IO ) # Rendered style options View source","title":"Drawable"},{"location":"Celestine/Drawable.html#Celestine::Drawable","text":"Basic SVG drawable, inheritted by stuff like circles, rectangles, etc.","title":"Drawable"},{"location":"Celestine/Drawable.html#Celestine::Drawable-methods","text":"","title":"Methods"},{"location":"Celestine/Drawable.html#Celestine::Drawable#class_attribute(io)","text":"Rendered class options View source","title":"#class_attribute"},{"location":"Celestine/Drawable.html#Celestine::Drawable#classes","text":"A list of the classes for this object View source","title":"#classes"},{"location":"Celestine/Drawable.html#Celestine::Drawable#classes=(classes)","text":"A list of the classes for this object View source","title":"#classes="},{"location":"Celestine/Drawable.html#Celestine::Drawable#custom_attribute(io)","text":"Rendered custom attributes View source","title":"#custom_attribute"},{"location":"Celestine/Drawable.html#Celestine::Drawable#custom_attrs","text":"A list of custom attributes View source","title":"#custom_attrs"},{"location":"Celestine/Drawable.html#Celestine::Drawable#custom_attrs=(custom_attrs)","text":"A list of custom attributes View source","title":"#custom_attrs="},{"location":"Celestine/Drawable.html#Celestine::Drawable#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Drawable.html#Celestine::Drawable#id","text":"ID of this object View source","title":"#id"},{"location":"Celestine/Drawable.html#Celestine::Drawable#id=(id)","text":"ID of this object View source","title":"#id="},{"location":"Celestine/Drawable.html#Celestine::Drawable#id_attribute(io)","text":"Render ID options View source","title":"#id_attribute"},{"location":"Celestine/Drawable.html#Celestine::Drawable#inner_elements","text":"The inner elements of this drawable. View source","title":"#inner_elements"},{"location":"Celestine/Drawable.html#Celestine::Drawable#inner_elements=(inner_elements)","text":"The inner elements of this drawable. View source","title":"#inner_elements="},{"location":"Celestine/Drawable.html#Celestine::Drawable#style","text":"A list of the style options View source","title":"#style"},{"location":"Celestine/Drawable.html#Celestine::Drawable#style=(style)","text":"A list of the style options View source","title":"#style="},{"location":"Celestine/Drawable.html#Celestine::Drawable#style_attribute(io)","text":"Rendered style options View source","title":"#style_attribute"},{"location":"Celestine/Ellipse.html","text":"class Celestine::Ellipse inherits Celestine::Drawable # Draws and holds information for ellipses Mozilla SVG Docs Included modules Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::CPosition Celestine::Modules::Filter Celestine::Modules::Marker Celestine::Modules::Mask Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"ellipse\" # Methods # #draw ( io : IO ) : Nil # Draws this ellipse to an IO View source #radius_x : IFNumber? # Radius of the x axis Mozilla SVG Docs #radius_x= ( radius_x : IFNumber? ) # Radius of the x axis Mozilla SVG Docs #radius_x_units : String? # What kind of unit radius_x should use when rendering #radius_x_units= ( radius_x_units : String? ) # What kind of unit radius_x should use when rendering #radius_y : IFNumber? # Radius of the y axis Mozilla SVG Docs #radius_y= ( radius_y : IFNumber? ) # Radius of the y axis Mozilla SVG Docs #radius_y_units : String? # What kind of unit radius_y should use when rendering #radius_y_units= ( radius_y_units : String? ) # What kind of unit radius_y should use when rendering module Celestine::Ellipse::Attrs # Included modules Celestine::Modules::CPosition::Attrs Celestine::Modules::Filter::Attrs Celestine::Modules::Marker::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs Constants # RADIUS_X = \"rx\" # RADIUS_Y = \"ry\" #","title":"Ellipse"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse","text":"Draws and holds information for ellipses Mozilla SVG Docs","title":"Ellipse"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse-constants","text":"","title":"Constants"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse::TAG","text":"","title":"TAG"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse-methods","text":"","title":"Methods"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#draw(io)","text":"Draws this ellipse to an IO View source","title":"#draw"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#radius_x","text":"Radius of the x axis Mozilla SVG Docs","title":"#radius_x"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#radius_x=(radius_x)","text":"Radius of the x axis Mozilla SVG Docs","title":"#radius_x="},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#radius_x_units","text":"What kind of unit radius_x should use when rendering","title":"#radius_x_units"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#radius_x_units=(radius_x_units)","text":"What kind of unit radius_x should use when rendering","title":"#radius_x_units="},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#radius_y","text":"Radius of the y axis Mozilla SVG Docs","title":"#radius_y"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#radius_y=(radius_y)","text":"Radius of the y axis Mozilla SVG Docs","title":"#radius_y="},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#radius_y_units","text":"What kind of unit radius_y should use when rendering","title":"#radius_y_units"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse#radius_y_units=(radius_y_units)","text":"What kind of unit radius_y should use when rendering","title":"#radius_y_units="},{"location":"Celestine/Ellipse.html#Celestine::Ellipse::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse::Attrs::RADIUS_X","text":"","title":"RADIUS_X"},{"location":"Celestine/Ellipse.html#Celestine::Ellipse::Attrs::RADIUS_Y","text":"","title":"RADIUS_Y"},{"location":"Celestine/FPoint.html","text":"class Celestine::FPoint inherits Reference # Constants # OPERATIONS = [ :+ , :- , :/ , :* ] # ZERO = Celestine :: FPoint . new ( 0.0 , 0.0 ) # Class methods # .new ( x : Float64 | Float32 | Int32 , y : Float64 | Float32 | Int32 ) # View source Methods # #* ( other : Celestine::FPoint ) # View source #+ ( other : Celestine::FPoint ) # View source #- ( other : Celestine::FPoint ) # View source #/ ( other : Celestine::FPoint ) # View source #to_s ( io ) # View source #x : Float64 # View source #x= ( x : Float64 ) # View source #y : Float64 # View source #y= ( y : Float64 ) # View source","title":"FPoint"},{"location":"Celestine/FPoint.html#Celestine::FPoint","text":"","title":"FPoint"},{"location":"Celestine/FPoint.html#Celestine::FPoint-constants","text":"","title":"Constants"},{"location":"Celestine/FPoint.html#Celestine::FPoint::OPERATIONS","text":"","title":"OPERATIONS"},{"location":"Celestine/FPoint.html#Celestine::FPoint::ZERO","text":"","title":"ZERO"},{"location":"Celestine/FPoint.html#Celestine::FPoint-class-methods","text":"","title":"Class methods"},{"location":"Celestine/FPoint.html#Celestine::FPoint.new(x,y)","text":"View source","title":".new"},{"location":"Celestine/FPoint.html#Celestine::FPoint-methods","text":"","title":"Methods"},{"location":"Celestine/FPoint.html#Celestine::FPoint#*(other)","text":"View source","title":"#*"},{"location":"Celestine/FPoint.html#Celestine::FPoint#+(other)","text":"View source","title":"#+"},{"location":"Celestine/FPoint.html#Celestine::FPoint#-(other)","text":"View source","title":"#-"},{"location":"Celestine/FPoint.html#Celestine::FPoint#/(other)","text":"View source","title":"#/"},{"location":"Celestine/FPoint.html#Celestine::FPoint#to_s(io)","text":"View source","title":"#to_s"},{"location":"Celestine/FPoint.html#Celestine::FPoint#x","text":"View source","title":"#x"},{"location":"Celestine/FPoint.html#Celestine::FPoint#x=(x)","text":"View source","title":"#x="},{"location":"Celestine/FPoint.html#Celestine::FPoint#y","text":"View source","title":"#y"},{"location":"Celestine/FPoint.html#Celestine::FPoint#y=(y)","text":"View source","title":"#y="},{"location":"Celestine/Filter.html","text":"class Celestine::Filter inherits Celestine::Drawable # Included modules Celestine::Modules::Animate Celestine::Modules::Body Constants # BACKGROUND_ALPHA = \"BackgroundAlpha\" # Doesn't work for some reason :( BACKGROUND_IMAGE = \"BackgroundImage\" # FILL_PAINT = \"FillPaint\" # SOURCE_ALPHA = \"SourceAlpha\" # SOURCE_GRAPHIC = \"SourceGraphic\" # STROKE_PAINT = \"StrokePaint\" # TAG = \"filter\" # Methods # #blend ( & block : Celestine::Filter::Blend -> Celestine::Filter::Blend ) # Adds a Celestine::Filter::Blend to the calling filter's inner elements. View source #blur ( & block : Celestine::Filter::Blur -> Celestine::Filter::Blur ) # Adds a Celestine::Filter::Blur to the calling filter's inner elements. View source #color_matrix ( & block : Celestine::Filter::ColorMatrix -> Celestine::Filter::ColorMatrix ) # Adds a Celestine::Filter::ColorMatrix to the calling filter's inner elements. View source #component_transfer ( & block : Celestine::Filter::ComponentTransfer -> Celestine::Filter::ComponentTransfer ) # Adds a Celestine::Filter::ComponentTransfer to the calling filter's inner elements. View source #composite ( & block : Celestine::Filter::Composite -> Celestine::Filter::Composite ) # Adds a Celestine::Filter::Composite to the calling filter's inner elements. View source #displacement_map ( & block : Celestine::Filter::DisplacementMap -> Celestine::Filter::DisplacementMap ) # Adds a Celestine::Filter::DisplacementMap to the calling filter's inner elements. View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #drop_shadow ( & block : Celestine::Filter::DropShadow -> Celestine::Filter::DropShadow ) # Adds a Celestine::Filter::DropShadow to the calling filter's inner elements. View source #filter_units : String? # View source #filter_units= ( filter_units : String? ) # View source #flood ( & block : Celestine::Filter::Flood -> Celestine::Filter::Flood ) # Adds a Celestine::Filter::Flood to the calling filter's inner elements. View source #image ( & block : Celestine::Filter::Image -> Celestine::Filter::Image ) # Adds a Celestine::Filter::Image to the calling filter's inner elements. View source #merge ( & block : Celestine::Filter::Merge -> Celestine::Filter::Merge ) # Adds a Celestine::Filter::Merge to the calling filter's inner elements. View source #morphology ( & block : Celestine::Filter::Morphology -> Celestine::Filter::Morphology ) # Adds a Celestine::Filter::Morphology to the calling filter's inner elements. View source #offset ( & block : Celestine::Filter::Offset -> Celestine::Filter::Offset ) # Adds a Celestine::Filter::Offset to the calling filter's inner elements. View source #primitive_units : String? # View source #primitive_units= ( primitive_units : String? ) # View source #specular_lighting ( & block : Celestine::Filter::SpecularLighting -> Celestine::Filter::SpecularLighting ) # Adds a Celestine::Filter::SpecularLighting to the calling filter's inner elements. View source #tile ( & block : Celestine::Filter::Tile -> Celestine::Filter::Tile ) # Adds a Celestine::Filter::Tile to the calling filter's inner elements. View source #turbulence ( & block : Celestine::Filter::Turbulence -> Celestine::Filter::Turbulence ) # Adds a Celestine::Filter::Turbulence to the calling filter's inner elements. View source module Celestine::Filter::Attrs # Included modules Celestine::Modules::Body::Attrs Constants # FILTER_UNITS = \"filterUnits\" # PRIMITIVE_UNITS = \"primitiveUnits\" #","title":"Filter"},{"location":"Celestine/Filter.html#Celestine::Filter","text":"","title":"Filter"},{"location":"Celestine/Filter.html#Celestine::Filter-constants","text":"","title":"Constants"},{"location":"Celestine/Filter.html#Celestine::Filter::BACKGROUND_ALPHA","text":"Doesn't work for some reason :(","title":"BACKGROUND_ALPHA"},{"location":"Celestine/Filter.html#Celestine::Filter::BACKGROUND_IMAGE","text":"","title":"BACKGROUND_IMAGE"},{"location":"Celestine/Filter.html#Celestine::Filter::FILL_PAINT","text":"","title":"FILL_PAINT"},{"location":"Celestine/Filter.html#Celestine::Filter::SOURCE_ALPHA","text":"","title":"SOURCE_ALPHA"},{"location":"Celestine/Filter.html#Celestine::Filter::SOURCE_GRAPHIC","text":"","title":"SOURCE_GRAPHIC"},{"location":"Celestine/Filter.html#Celestine::Filter::STROKE_PAINT","text":"","title":"STROKE_PAINT"},{"location":"Celestine/Filter.html#Celestine::Filter::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter.html#Celestine::Filter-methods","text":"","title":"Methods"},{"location":"Celestine/Filter.html#Celestine::Filter#blend(&)","text":"Adds a Celestine::Filter::Blend to the calling filter's inner elements. View source","title":"#blend"},{"location":"Celestine/Filter.html#Celestine::Filter#blur(&)","text":"Adds a Celestine::Filter::Blur to the calling filter's inner elements. View source","title":"#blur"},{"location":"Celestine/Filter.html#Celestine::Filter#color_matrix(&)","text":"Adds a Celestine::Filter::ColorMatrix to the calling filter's inner elements. View source","title":"#color_matrix"},{"location":"Celestine/Filter.html#Celestine::Filter#component_transfer(&)","text":"Adds a Celestine::Filter::ComponentTransfer to the calling filter's inner elements. View source","title":"#component_transfer"},{"location":"Celestine/Filter.html#Celestine::Filter#composite(&)","text":"Adds a Celestine::Filter::Composite to the calling filter's inner elements. View source","title":"#composite"},{"location":"Celestine/Filter.html#Celestine::Filter#displacement_map(&)","text":"Adds a Celestine::Filter::DisplacementMap to the calling filter's inner elements. View source","title":"#displacement_map"},{"location":"Celestine/Filter.html#Celestine::Filter#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Filter.html#Celestine::Filter#drop_shadow(&)","text":"Adds a Celestine::Filter::DropShadow to the calling filter's inner elements. View source","title":"#drop_shadow"},{"location":"Celestine/Filter.html#Celestine::Filter#filter_units","text":"View source","title":"#filter_units"},{"location":"Celestine/Filter.html#Celestine::Filter#filter_units=(filter_units)","text":"View source","title":"#filter_units="},{"location":"Celestine/Filter.html#Celestine::Filter#flood(&)","text":"Adds a Celestine::Filter::Flood to the calling filter's inner elements. View source","title":"#flood"},{"location":"Celestine/Filter.html#Celestine::Filter#image(&)","text":"Adds a Celestine::Filter::Image to the calling filter's inner elements. View source","title":"#image"},{"location":"Celestine/Filter.html#Celestine::Filter#merge(&)","text":"Adds a Celestine::Filter::Merge to the calling filter's inner elements. View source","title":"#merge"},{"location":"Celestine/Filter.html#Celestine::Filter#morphology(&)","text":"Adds a Celestine::Filter::Morphology to the calling filter's inner elements. View source","title":"#morphology"},{"location":"Celestine/Filter.html#Celestine::Filter#offset(&)","text":"Adds a Celestine::Filter::Offset to the calling filter's inner elements. View source","title":"#offset"},{"location":"Celestine/Filter.html#Celestine::Filter#primitive_units","text":"View source","title":"#primitive_units"},{"location":"Celestine/Filter.html#Celestine::Filter#primitive_units=(primitive_units)","text":"View source","title":"#primitive_units="},{"location":"Celestine/Filter.html#Celestine::Filter#specular_lighting(&)","text":"Adds a Celestine::Filter::SpecularLighting to the calling filter's inner elements. View source","title":"#specular_lighting"},{"location":"Celestine/Filter.html#Celestine::Filter#tile(&)","text":"Adds a Celestine::Filter::Tile to the calling filter's inner elements. View source","title":"#tile"},{"location":"Celestine/Filter.html#Celestine::Filter#turbulence(&)","text":"Adds a Celestine::Filter::Turbulence to the calling filter's inner elements. View source","title":"#turbulence"},{"location":"Celestine/Filter.html#Celestine::Filter::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Filter.html#Celestine::Filter::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter.html#Celestine::Filter::Attrs::FILTER_UNITS","text":"","title":"FILTER_UNITS"},{"location":"Celestine/Filter.html#Celestine::Filter::Attrs::PRIMITIVE_UNITS","text":"","title":"PRIMITIVE_UNITS"},{"location":"Celestine/Gradient.html","text":"abstract class Celestine::Gradient inherits Celestine::Drawable # Included modules Celestine::Modules::Animate Celestine::Modules::Filter Celestine::Modules::Transform Direct known subclasses Celestine::Gradient::Linear Celestine::Gradient::Radial Constants # TAG = \"WARNING DO NOT USE THIS DIRECTLY!\" # Methods # #<< ( c_stop : Celestine::Gradient::Stop ) # View source #gradient_transform ( & block : Celestine::Drawable::Transform -> Celestine::Drawable::Transform ) # View source #gradient_transform_attribute ( io : IO ) # View source #gradient_units : String? # View source #gradient_units= ( gradient_units : String? ) # View source #href : String? # View source #href= ( href : String? ) # View source #spread_method : String? # View source #spread_method= ( spread_method : String? ) # View source #stop ( offset , color = nil , opacity = nil ) # View source #stop ( & block : Celestine::Gradient::Stop -> Celestine::Gradient::Stop ) # View source module Celestine::Gradient::Attrs # Included modules Celestine::Modules::Filter::Attrs Celestine::Modules::Transform::Attrs Constants # GRADIENT_UNITS = \"gradientUnits\" # HREF = \"href\" # SPREAD_METHOD = \"spreadMethod\" #","title":"Gradient"},{"location":"Celestine/Gradient.html#Celestine::Gradient","text":"","title":"Gradient"},{"location":"Celestine/Gradient.html#Celestine::Gradient-constants","text":"","title":"Constants"},{"location":"Celestine/Gradient.html#Celestine::Gradient::TAG","text":"","title":"TAG"},{"location":"Celestine/Gradient.html#Celestine::Gradient-methods","text":"","title":"Methods"},{"location":"Celestine/Gradient.html#Celestine::Gradient#<<(c_stop)","text":"View source","title":"#&lt;&lt;"},{"location":"Celestine/Gradient.html#Celestine::Gradient#gradient_transform(&)","text":"View source","title":"#gradient_transform"},{"location":"Celestine/Gradient.html#Celestine::Gradient#gradient_transform_attribute(io)","text":"View source","title":"#gradient_transform_attribute"},{"location":"Celestine/Gradient.html#Celestine::Gradient#gradient_units","text":"View source","title":"#gradient_units"},{"location":"Celestine/Gradient.html#Celestine::Gradient#gradient_units=(gradient_units)","text":"View source","title":"#gradient_units="},{"location":"Celestine/Gradient.html#Celestine::Gradient#href","text":"View source","title":"#href"},{"location":"Celestine/Gradient.html#Celestine::Gradient#href=(href)","text":"View source","title":"#href="},{"location":"Celestine/Gradient.html#Celestine::Gradient#spread_method","text":"View source","title":"#spread_method"},{"location":"Celestine/Gradient.html#Celestine::Gradient#spread_method=(spread_method)","text":"View source","title":"#spread_method="},{"location":"Celestine/Gradient.html#Celestine::Gradient#stop(offset,color,opacity)","text":"View source","title":"#stop"},{"location":"Celestine/Gradient.html#Celestine::Gradient::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Gradient.html#Celestine::Gradient::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Gradient.html#Celestine::Gradient::Attrs::GRADIENT_UNITS","text":"","title":"GRADIENT_UNITS"},{"location":"Celestine/Gradient.html#Celestine::Gradient::Attrs::HREF","text":"","title":"HREF"},{"location":"Celestine/Gradient.html#Celestine::Gradient::Attrs::SPREAD_METHOD","text":"","title":"SPREAD_METHOD"},{"location":"Celestine/Group.html","text":"class Celestine::Group inherits Celestine::Drawable # Group class which can group multiple drawables together. Included modules Celestine::Meta::Context::Methods Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::Filter Celestine::Modules::Mask Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"g\" # Methods # #anchor ( & block : Celestine::Anchor -> Celestine::Anchor ) : Celestine::Anchor # Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items. #circle ( & block : Celestine::Circle -> Celestine::Circle ) : Celestine::Circle # Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items. #draw ( io : IO ) : Nil # Draws the group to an IO View source #ellipse ( & block : Celestine::Ellipse -> Celestine::Ellipse ) : Celestine::Ellipse # Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items. #group ( & block : Celestine::Group -> Celestine::Group ) : Celestine::Group # Allows a Celestine::Group to be made using a DSL call, and added to this drawables items. #image ( & block : Celestine::Image -> Celestine::Image ) : Celestine::Image # Allows a Celestine::Image to be made using a DSL call, and added to this drawables items. #path ( & block : Celestine::Path -> Celestine::Path ) : Celestine::Path # Allows a Celestine::Path to be made using a DSL call, and added to this drawables items. #rectangle ( & block : Celestine::Rectangle -> Celestine::Rectangle ) : Celestine::Rectangle # Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items. #svg ( & block : Celestine::Svg -> Celestine::Svg ) : Celestine::Svg # Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items. #text ( & block : Celestine::Text -> Celestine::Text ) : Celestine::Text # Allows a Celestine::Text to be made using a DSL call, and added to this drawables items. module Celestine::Group::Attrs # Included modules Celestine::Modules::Filter::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs","title":"Group"},{"location":"Celestine/Group.html#Celestine::Group","text":"Group class which can group multiple drawables together.","title":"Group"},{"location":"Celestine/Group.html#Celestine::Group-constants","text":"","title":"Constants"},{"location":"Celestine/Group.html#Celestine::Group::TAG","text":"","title":"TAG"},{"location":"Celestine/Group.html#Celestine::Group-methods","text":"","title":"Methods"},{"location":"Celestine/Group.html#Celestine::Group#anchor(&)","text":"Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items.","title":"#anchor"},{"location":"Celestine/Group.html#Celestine::Group#circle(&)","text":"Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items.","title":"#circle"},{"location":"Celestine/Group.html#Celestine::Group#draw(io)","text":"Draws the group to an IO View source","title":"#draw"},{"location":"Celestine/Group.html#Celestine::Group#ellipse(&)","text":"Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items.","title":"#ellipse"},{"location":"Celestine/Group.html#Celestine::Group#group(&)","text":"Allows a Celestine::Group to be made using a DSL call, and added to this drawables items.","title":"#group"},{"location":"Celestine/Group.html#Celestine::Group#image(&)","text":"Allows a Celestine::Image to be made using a DSL call, and added to this drawables items.","title":"#image"},{"location":"Celestine/Group.html#Celestine::Group#path(&)","text":"Allows a Celestine::Path to be made using a DSL call, and added to this drawables items.","title":"#path"},{"location":"Celestine/Group.html#Celestine::Group#rectangle(&)","text":"Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items.","title":"#rectangle"},{"location":"Celestine/Group.html#Celestine::Group#svg(&)","text":"Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items.","title":"#svg"},{"location":"Celestine/Group.html#Celestine::Group#text(&)","text":"Allows a Celestine::Text to be made using a DSL call, and added to this drawables items.","title":"#text"},{"location":"Celestine/Group.html#Celestine::Group::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Image.html","text":"class Celestine::Image inherits Celestine::Drawable # Draws and holds information for images Mozilla SVG Docs Included modules Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::Body Celestine::Modules::Filter Celestine::Modules::Mask Celestine::Modules::Transform Constants # TAG = \"image\" # Methods # #draw ( io : IO ) : Nil # Draws the image to an IO View source #href : String? # The URI for the image Mozilla SVG Docs View source #href= ( href : String? ) # The URI for the image Mozilla SVG Docs View source #rendering : String? # How the image should be rendered. Potential values: auto | optimizeSpeed | optimizeQuality Mozilla SVG Docs View source #rendering= ( rendering : String? ) # How the image should be rendered. Potential values: auto | optimizeSpeed | optimizeQuality Mozilla SVG Docs View source module Celestine::Image::Attrs # Included modules Celestine::Modules::Body::Attrs Celestine::Modules::Filter::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::Transform::Attrs Constants # HREF = \"href\" # RENDERING = \"image-rendering\" #","title":"Image"},{"location":"Celestine/Image.html#Celestine::Image","text":"Draws and holds information for images Mozilla SVG Docs","title":"Image"},{"location":"Celestine/Image.html#Celestine::Image-constants","text":"","title":"Constants"},{"location":"Celestine/Image.html#Celestine::Image::TAG","text":"","title":"TAG"},{"location":"Celestine/Image.html#Celestine::Image-methods","text":"","title":"Methods"},{"location":"Celestine/Image.html#Celestine::Image#draw(io)","text":"Draws the image to an IO View source","title":"#draw"},{"location":"Celestine/Image.html#Celestine::Image#href","text":"The URI for the image Mozilla SVG Docs View source","title":"#href"},{"location":"Celestine/Image.html#Celestine::Image#href=(href)","text":"The URI for the image Mozilla SVG Docs View source","title":"#href="},{"location":"Celestine/Image.html#Celestine::Image#rendering","text":"How the image should be rendered. Potential values: auto | optimizeSpeed | optimizeQuality Mozilla SVG Docs View source","title":"#rendering"},{"location":"Celestine/Image.html#Celestine::Image#rendering=(rendering)","text":"How the image should be rendered. Potential values: auto | optimizeSpeed | optimizeQuality Mozilla SVG Docs View source","title":"#rendering="},{"location":"Celestine/Image.html#Celestine::Image::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Image.html#Celestine::Image::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Image.html#Celestine::Image::Attrs::HREF","text":"","title":"HREF"},{"location":"Celestine/Image.html#Celestine::Image::Attrs::RENDERING","text":"","title":"RENDERING"},{"location":"Celestine/Logo.html","text":"module Celestine::Logo # Constants # ARC_PRECISION = 4 # BACKGROUND_RECT_ID = \"bg-rect\" # BLEND_MODE = \"difference\" # COLORS = [ \"#73B8FC\" , \"#3799FB\" , \"#0466C8\" , \"#0353A4\" , \"#023E7D\" , \"#002855\" , \"#001233\" ] # HEX_RADIUS = 150 # MASK_SHAPE_ID = \"hex-mask\" # PRECISION = 1 # SCREEN_SIZE = 500 # SHADE_L_ID = \"shade-path-l\" # SHADE_OFFSET = 65 # SHADE_R_ID = \"shade-path-r\" # Class methods # .make_arc ( start_angle , end_angle , distance , thickness = 10 , large = false , flip = false ) # View source","title":"Logo"},{"location":"Celestine/Logo.html#Celestine::Logo","text":"","title":"Logo"},{"location":"Celestine/Logo.html#Celestine::Logo-constants","text":"","title":"Constants"},{"location":"Celestine/Logo.html#Celestine::Logo::ARC_PRECISION","text":"","title":"ARC_PRECISION"},{"location":"Celestine/Logo.html#Celestine::Logo::BACKGROUND_RECT_ID","text":"","title":"BACKGROUND_RECT_ID"},{"location":"Celestine/Logo.html#Celestine::Logo::BLEND_MODE","text":"","title":"BLEND_MODE"},{"location":"Celestine/Logo.html#Celestine::Logo::COLORS","text":"","title":"COLORS"},{"location":"Celestine/Logo.html#Celestine::Logo::HEX_RADIUS","text":"","title":"HEX_RADIUS"},{"location":"Celestine/Logo.html#Celestine::Logo::MASK_SHAPE_ID","text":"","title":"MASK_SHAPE_ID"},{"location":"Celestine/Logo.html#Celestine::Logo::PRECISION","text":"","title":"PRECISION"},{"location":"Celestine/Logo.html#Celestine::Logo::SCREEN_SIZE","text":"","title":"SCREEN_SIZE"},{"location":"Celestine/Logo.html#Celestine::Logo::SHADE_L_ID","text":"","title":"SHADE_L_ID"},{"location":"Celestine/Logo.html#Celestine::Logo::SHADE_OFFSET","text":"","title":"SHADE_OFFSET"},{"location":"Celestine/Logo.html#Celestine::Logo::SHADE_R_ID","text":"","title":"SHADE_R_ID"},{"location":"Celestine/Logo.html#Celestine::Logo-class-methods","text":"","title":"Class methods"},{"location":"Celestine/Logo.html#Celestine::Logo.make_arc(start_angle,end_angle,distance,thickness,large,flip)","text":"View source","title":".make_arc"},{"location":"Celestine/Marker.html","text":"class Celestine::Marker inherits Celestine::Drawable # Class which acts like a group, but applies masking to another drawable. Included modules Celestine::Meta::Context::Methods Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Filter Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"marker\" # Methods # #anchor ( & block : Celestine::Anchor -> Celestine::Anchor ) : Celestine::Anchor # Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items. #circle ( & block : Celestine::Circle -> Celestine::Circle ) : Celestine::Circle # Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items. #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #ellipse ( & block : Celestine::Ellipse -> Celestine::Ellipse ) : Celestine::Ellipse # Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items. #group ( & block : Celestine::Group -> Celestine::Group ) : Celestine::Group # Allows a Celestine::Group to be made using a DSL call, and added to this drawables items. #height : IFNumber? # #height= ( height : IFNumber? ) # #height_units : String? # What kind of unit height should use when rendering #height_units= ( height_units : String? ) # What kind of unit height should use when rendering #image ( & block : Celestine::Image -> Celestine::Image ) : Celestine::Image # Allows a Celestine::Image to be made using a DSL call, and added to this drawables items. #orientation : String? # View source #orientation= ( orientation : String? ) # View source #path ( & block : Celestine::Path -> Celestine::Path ) : Celestine::Path # Allows a Celestine::Path to be made using a DSL call, and added to this drawables items. #preserve_aspect_ratio : String? # View source #preserve_aspect_ratio= ( preserve_aspect_ratio : String? ) # View source #rectangle ( & block : Celestine::Rectangle -> Celestine::Rectangle ) : Celestine::Rectangle # Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items. #ref_x : String? # View source #ref_x= ( ref_x : String? ) # View source #ref_y : String? # View source #ref_y= ( ref_y : String? ) # View source #svg ( & block : Celestine::Svg -> Celestine::Svg ) : Celestine::Svg # Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items. #text ( & block : Celestine::Text -> Celestine::Text ) : Celestine::Text # Allows a Celestine::Text to be made using a DSL call, and added to this drawables items. #units : String? # View source #units= ( units : String? ) # View source #view_box : Celestine::ViewBox? # View source #view_box= ( view_box : Celestine::ViewBox? ) # View source #width : IFNumber? # #width= ( width : IFNumber? ) # #width_units : String? # What kind of unit width should use when rendering #width_units= ( width_units : String? ) # What kind of unit width should use when rendering module Celestine::Marker::Attrs # Included modules Celestine::Modules::Filter::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs Constants # HEIGHT = \"markerHeight\" # ORIENTATION = \"orient\" # PRESERVE_ASPECT_RATIO = \"preserveAspectRatio\" # REF_X = \"refX\" # REF_Y = \"refY\" # UNITS = \"markerUnits\" # VIEW_BOX = \"viewBox\" # WIDTH = \"markerWidth\" #","title":"Marker"},{"location":"Celestine/Marker.html#Celestine::Marker","text":"Class which acts like a group, but applies masking to another drawable.","title":"Marker"},{"location":"Celestine/Marker.html#Celestine::Marker-constants","text":"","title":"Constants"},{"location":"Celestine/Marker.html#Celestine::Marker::TAG","text":"","title":"TAG"},{"location":"Celestine/Marker.html#Celestine::Marker-methods","text":"","title":"Methods"},{"location":"Celestine/Marker.html#Celestine::Marker#anchor(&)","text":"Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items.","title":"#anchor"},{"location":"Celestine/Marker.html#Celestine::Marker#circle(&)","text":"Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items.","title":"#circle"},{"location":"Celestine/Marker.html#Celestine::Marker#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Marker.html#Celestine::Marker#ellipse(&)","text":"Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items.","title":"#ellipse"},{"location":"Celestine/Marker.html#Celestine::Marker#group(&)","text":"Allows a Celestine::Group to be made using a DSL call, and added to this drawables items.","title":"#group"},{"location":"Celestine/Marker.html#Celestine::Marker#height","text":"","title":"#height"},{"location":"Celestine/Marker.html#Celestine::Marker#height=(height)","text":"","title":"#height="},{"location":"Celestine/Marker.html#Celestine::Marker#height_units","text":"What kind of unit height should use when rendering","title":"#height_units"},{"location":"Celestine/Marker.html#Celestine::Marker#height_units=(height_units)","text":"What kind of unit height should use when rendering","title":"#height_units="},{"location":"Celestine/Marker.html#Celestine::Marker#image(&)","text":"Allows a Celestine::Image to be made using a DSL call, and added to this drawables items.","title":"#image"},{"location":"Celestine/Marker.html#Celestine::Marker#orientation","text":"View source","title":"#orientation"},{"location":"Celestine/Marker.html#Celestine::Marker#orientation=(orientation)","text":"View source","title":"#orientation="},{"location":"Celestine/Marker.html#Celestine::Marker#path(&)","text":"Allows a Celestine::Path to be made using a DSL call, and added to this drawables items.","title":"#path"},{"location":"Celestine/Marker.html#Celestine::Marker#preserve_aspect_ratio","text":"View source","title":"#preserve_aspect_ratio"},{"location":"Celestine/Marker.html#Celestine::Marker#preserve_aspect_ratio=(preserve_aspect_ratio)","text":"View source","title":"#preserve_aspect_ratio="},{"location":"Celestine/Marker.html#Celestine::Marker#rectangle(&)","text":"Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items.","title":"#rectangle"},{"location":"Celestine/Marker.html#Celestine::Marker#ref_x","text":"View source","title":"#ref_x"},{"location":"Celestine/Marker.html#Celestine::Marker#ref_x=(ref_x)","text":"View source","title":"#ref_x="},{"location":"Celestine/Marker.html#Celestine::Marker#ref_y","text":"View source","title":"#ref_y"},{"location":"Celestine/Marker.html#Celestine::Marker#ref_y=(ref_y)","text":"View source","title":"#ref_y="},{"location":"Celestine/Marker.html#Celestine::Marker#svg(&)","text":"Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items.","title":"#svg"},{"location":"Celestine/Marker.html#Celestine::Marker#text(&)","text":"Allows a Celestine::Text to be made using a DSL call, and added to this drawables items.","title":"#text"},{"location":"Celestine/Marker.html#Celestine::Marker#units","text":"View source","title":"#units"},{"location":"Celestine/Marker.html#Celestine::Marker#units=(units)","text":"View source","title":"#units="},{"location":"Celestine/Marker.html#Celestine::Marker#view_box","text":"View source","title":"#view_box"},{"location":"Celestine/Marker.html#Celestine::Marker#view_box=(view_box)","text":"View source","title":"#view_box="},{"location":"Celestine/Marker.html#Celestine::Marker#width","text":"","title":"#width"},{"location":"Celestine/Marker.html#Celestine::Marker#width=(width)","text":"","title":"#width="},{"location":"Celestine/Marker.html#Celestine::Marker#width_units","text":"What kind of unit width should use when rendering","title":"#width_units"},{"location":"Celestine/Marker.html#Celestine::Marker#width_units=(width_units)","text":"What kind of unit width should use when rendering","title":"#width_units="},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs::HEIGHT","text":"","title":"HEIGHT"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs::ORIENTATION","text":"","title":"ORIENTATION"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs::PRESERVE_ASPECT_RATIO","text":"","title":"PRESERVE_ASPECT_RATIO"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs::REF_X","text":"","title":"REF_X"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs::REF_Y","text":"","title":"REF_Y"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs::UNITS","text":"","title":"UNITS"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs::VIEW_BOX","text":"","title":"VIEW_BOX"},{"location":"Celestine/Marker.html#Celestine::Marker::Attrs::WIDTH","text":"","title":"WIDTH"},{"location":"Celestine/Mask.html","text":"class Celestine::Mask inherits Celestine::Drawable # Class which acts like a group, but applies masking to another drawable. Included modules Celestine::Meta::Context::Methods Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Body Celestine::Modules::Filter Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"mask\" # Methods # #anchor ( & block : Celestine::Anchor -> Celestine::Anchor ) : Celestine::Anchor # Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items. #circle ( & block : Celestine::Circle -> Celestine::Circle ) : Celestine::Circle # Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items. #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #ellipse ( & block : Celestine::Ellipse -> Celestine::Ellipse ) : Celestine::Ellipse # Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items. #group ( & block : Celestine::Group -> Celestine::Group ) : Celestine::Group # Allows a Celestine::Group to be made using a DSL call, and added to this drawables items. #image ( & block : Celestine::Image -> Celestine::Image ) : Celestine::Image # Allows a Celestine::Image to be made using a DSL call, and added to this drawables items. #path ( & block : Celestine::Path -> Celestine::Path ) : Celestine::Path # Allows a Celestine::Path to be made using a DSL call, and added to this drawables items. #rectangle ( & block : Celestine::Rectangle -> Celestine::Rectangle ) : Celestine::Rectangle # Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items. #svg ( & block : Celestine::Svg -> Celestine::Svg ) : Celestine::Svg # Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items. #text ( & block : Celestine::Text -> Celestine::Text ) : Celestine::Text # Allows a Celestine::Text to be made using a DSL call, and added to this drawables items. module Celestine::Mask::Attrs # Included modules Celestine::Modules::Body::Attrs Celestine::Modules::Filter::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs","title":"Mask"},{"location":"Celestine/Mask.html#Celestine::Mask","text":"Class which acts like a group, but applies masking to another drawable.","title":"Mask"},{"location":"Celestine/Mask.html#Celestine::Mask-constants","text":"","title":"Constants"},{"location":"Celestine/Mask.html#Celestine::Mask::TAG","text":"","title":"TAG"},{"location":"Celestine/Mask.html#Celestine::Mask-methods","text":"","title":"Methods"},{"location":"Celestine/Mask.html#Celestine::Mask#anchor(&)","text":"Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items.","title":"#anchor"},{"location":"Celestine/Mask.html#Celestine::Mask#circle(&)","text":"Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items.","title":"#circle"},{"location":"Celestine/Mask.html#Celestine::Mask#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Mask.html#Celestine::Mask#ellipse(&)","text":"Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items.","title":"#ellipse"},{"location":"Celestine/Mask.html#Celestine::Mask#group(&)","text":"Allows a Celestine::Group to be made using a DSL call, and added to this drawables items.","title":"#group"},{"location":"Celestine/Mask.html#Celestine::Mask#image(&)","text":"Allows a Celestine::Image to be made using a DSL call, and added to this drawables items.","title":"#image"},{"location":"Celestine/Mask.html#Celestine::Mask#path(&)","text":"Allows a Celestine::Path to be made using a DSL call, and added to this drawables items.","title":"#path"},{"location":"Celestine/Mask.html#Celestine::Mask#rectangle(&)","text":"Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items.","title":"#rectangle"},{"location":"Celestine/Mask.html#Celestine::Mask#svg(&)","text":"Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items.","title":"#svg"},{"location":"Celestine/Mask.html#Celestine::Mask#text(&)","text":"Allows a Celestine::Text to be made using a DSL call, and added to this drawables items.","title":"#text"},{"location":"Celestine/Mask.html#Celestine::Mask::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Math.html","text":"module Celestine::Math # Class methods # .rotate_point ( x , y , ox , oy , deg ) : Celestine::FPoint # View source .rotate_point ( point : Celestine::FPoint | Celestine::Point , origin : Celestine::FPoint | Celestine::Point , deg ) : Celestine::FPoint # View source","title":"Math"},{"location":"Celestine/Math.html#Celestine::Math","text":"","title":"Math"},{"location":"Celestine/Math.html#Celestine::Math-class-methods","text":"","title":"Class methods"},{"location":"Celestine/Math.html#Celestine::Math.rotate_point(x,y,ox,oy,deg)","text":"View source","title":".rotate_point"},{"location":"Celestine/Meta.html","text":"module Celestine::Meta # Modules where all DSL and Meta code is held Constants # CLASSES = [ Celestine :: Svg , Celestine :: Circle , Celestine :: Rectangle , Celestine :: Path , Celestine :: Ellipse , Celestine :: Group , Celestine :: Image , Celestine :: Text , Celestine :: Anchor ] # List of classes we want context methods for (such as circle, rectangle, etc). If you need to add a new drawable to Celestine you must add it here as well.","title":"Meta"},{"location":"Celestine/Meta.html#Celestine::Meta","text":"Modules where all DSL and Meta code is held","title":"Meta"},{"location":"Celestine/Meta.html#Celestine::Meta-constants","text":"","title":"Constants"},{"location":"Celestine/Meta.html#Celestine::Meta::CLASSES","text":"List of classes we want context methods for (such as circle, rectangle, etc). If you need to add a new drawable to Celestine you must add it here as well.","title":"CLASSES"},{"location":"Celestine/Modules.html","text":"module Celestine::Modules #","title":"Modules"},{"location":"Celestine/Modules.html#Celestine::Modules","text":"","title":"Modules"},{"location":"Celestine/Path.html","text":"class Celestine::Path inherits Celestine::Drawable # A class which represents an SVG path. Methods starting with a_ use absolute coordinates, while r_ methods require relative coordinates. Mozilla SVG Docs Included modules Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::Filter Celestine::Modules::Marker Celestine::Modules::Mask Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"path\" # Methods # #a_arc ( x , y , rx , ry , rotation = 0 , large = false , flip = false ) # View source #a_bcurve ( cx1 , cy1 , cx2 , cy2 , x , y ) # View source #a_h_line ( x ) # Draws a horizontal line to an absolute point View source #a_line ( x , y ) # Draws a line to an absolute point View source #a_move ( x , y ) # Moves to an absolute point View source #a_q_bcurve ( cx , cy , x , y ) # View source #a_s_bcurve ( cx2 , cy2 , x , y ) # View source #a_t_bcurve ( x , y ) # View source #a_v_line ( y ) # Draws a vertical line to an absolute point View source #close # Closes the path. View source #code # Finalized path code points. Understanding Path Code View source #code= ( other : String ) # View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #r_arc ( x , y , rx , ry , rotation = 0 , large = false , flip = false ) # View source #r_bcurve ( cx1 , cy1 , cx2 , cy2 , x , y ) # View source #r_h_line ( x ) # Draws a horizontal line to a relative point View source #r_line ( x , y ) # Draws a line to a relative point View source #r_move ( x , y ) # Moves to a relative point View source #r_q_bcurve ( cx , cy , x , y ) # View source #r_s_bcurve ( cx2 , cy2 , x , y ) # View source #r_t_bcurve ( x , y ) # View source #r_v_line ( y ) # Draws a vertical line to a relative point View source module Celestine::Path::Attrs # Included modules Celestine::Modules::Filter::Attrs Celestine::Modules::Marker::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs","title":"Path"},{"location":"Celestine/Path.html#Celestine::Path","text":"A class which represents an SVG path. Methods starting with a_ use absolute coordinates, while r_ methods require relative coordinates. Mozilla SVG Docs","title":"Path"},{"location":"Celestine/Path.html#Celestine::Path-constants","text":"","title":"Constants"},{"location":"Celestine/Path.html#Celestine::Path::TAG","text":"","title":"TAG"},{"location":"Celestine/Path.html#Celestine::Path-methods","text":"","title":"Methods"},{"location":"Celestine/Path.html#Celestine::Path#a_arc(x,y,rx,ry,rotation,large,flip)","text":"View source","title":"#a_arc"},{"location":"Celestine/Path.html#Celestine::Path#a_bcurve(cx1,cy1,cx2,cy2,x,y)","text":"View source","title":"#a_bcurve"},{"location":"Celestine/Path.html#Celestine::Path#a_h_line(x)","text":"Draws a horizontal line to an absolute point View source","title":"#a_h_line"},{"location":"Celestine/Path.html#Celestine::Path#a_line(x,y)","text":"Draws a line to an absolute point View source","title":"#a_line"},{"location":"Celestine/Path.html#Celestine::Path#a_move(x,y)","text":"Moves to an absolute point View source","title":"#a_move"},{"location":"Celestine/Path.html#Celestine::Path#a_q_bcurve(cx,cy,x,y)","text":"View source","title":"#a_q_bcurve"},{"location":"Celestine/Path.html#Celestine::Path#a_s_bcurve(cx2,cy2,x,y)","text":"View source","title":"#a_s_bcurve"},{"location":"Celestine/Path.html#Celestine::Path#a_t_bcurve(x,y)","text":"View source","title":"#a_t_bcurve"},{"location":"Celestine/Path.html#Celestine::Path#a_v_line(y)","text":"Draws a vertical line to an absolute point View source","title":"#a_v_line"},{"location":"Celestine/Path.html#Celestine::Path#close","text":"Closes the path. View source","title":"#close"},{"location":"Celestine/Path.html#Celestine::Path#code","text":"Finalized path code points. Understanding Path Code View source","title":"#code"},{"location":"Celestine/Path.html#Celestine::Path#code=(other)","text":"View source","title":"#code="},{"location":"Celestine/Path.html#Celestine::Path#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Path.html#Celestine::Path#r_arc(x,y,rx,ry,rotation,large,flip)","text":"View source","title":"#r_arc"},{"location":"Celestine/Path.html#Celestine::Path#r_bcurve(cx1,cy1,cx2,cy2,x,y)","text":"View source","title":"#r_bcurve"},{"location":"Celestine/Path.html#Celestine::Path#r_h_line(x)","text":"Draws a horizontal line to a relative point View source","title":"#r_h_line"},{"location":"Celestine/Path.html#Celestine::Path#r_line(x,y)","text":"Draws a line to a relative point View source","title":"#r_line"},{"location":"Celestine/Path.html#Celestine::Path#r_move(x,y)","text":"Moves to a relative point View source","title":"#r_move"},{"location":"Celestine/Path.html#Celestine::Path#r_q_bcurve(cx,cy,x,y)","text":"View source","title":"#r_q_bcurve"},{"location":"Celestine/Path.html#Celestine::Path#r_s_bcurve(cx2,cy2,x,y)","text":"View source","title":"#r_s_bcurve"},{"location":"Celestine/Path.html#Celestine::Path#r_t_bcurve(x,y)","text":"View source","title":"#r_t_bcurve"},{"location":"Celestine/Path.html#Celestine::Path#r_v_line(y)","text":"Draws a vertical line to a relative point View source","title":"#r_v_line"},{"location":"Celestine/Path.html#Celestine::Path::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Pattern.html","text":"class Celestine::Pattern inherits Celestine::Drawable # Class which acts like a group, but applies masking to another drawable. Included modules Celestine::Meta::Context::Methods Celestine::Modules::Animate Celestine::Modules::Body Celestine::Modules::Filter Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"pattern\" # Methods # #anchor ( & block : Celestine::Anchor -> Celestine::Anchor ) : Celestine::Anchor # Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items. #circle ( & block : Celestine::Circle -> Celestine::Circle ) : Celestine::Circle # Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items. #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #ellipse ( & block : Celestine::Ellipse -> Celestine::Ellipse ) : Celestine::Ellipse # Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items. #group ( & block : Celestine::Group -> Celestine::Group ) : Celestine::Group # Allows a Celestine::Group to be made using a DSL call, and added to this drawables items. #href : String? # View source #href= ( href : String? ) # View source #image ( & block : Celestine::Image -> Celestine::Image ) : Celestine::Image # Allows a Celestine::Image to be made using a DSL call, and added to this drawables items. #path ( & block : Celestine::Path -> Celestine::Path ) : Celestine::Path # Allows a Celestine::Path to be made using a DSL call, and added to this drawables items. #pattern_content_units : String? # View source #pattern_content_units= ( pattern_content_units : String? ) # View source #pattern_transform ( & block : Celestine::Drawable::Transform -> Celestine::Drawable::Transform ) # View source #pattern_transform_attribute ( io : IO ) # View source #pattern_units : String? # View source #pattern_units= ( pattern_units : String? ) # View source #preserve_aspect_ratio : String? # View source #preserve_aspect_ratio= ( preserve_aspect_ratio : String? ) # View source #rectangle ( & block : Celestine::Rectangle -> Celestine::Rectangle ) : Celestine::Rectangle # Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items. #svg ( & block : Celestine::Svg -> Celestine::Svg ) : Celestine::Svg # Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items. #text ( & block : Celestine::Text -> Celestine::Text ) : Celestine::Text # Allows a Celestine::Text to be made using a DSL call, and added to this drawables items. #view_box : Celestine::ViewBox? # View source #view_box= ( view_box : Celestine::ViewBox? ) # View source module Celestine::Pattern::Attrs # Included modules Celestine::Modules::Body::Attrs Celestine::Modules::Filter::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs Constants # HREF = \"href\" # PATTERN_CONTENT_UNITS = \"patternContentUnits\" # PATTERN_TRANSFORM = \"patternTransform\" # PATTERN_UNITS = \"patternUnits\" # PRESERVE_ASPECT_RATIO = \"preserveAspectRatio\" # VIEW_BOX = \"viewBox\" #","title":"Pattern"},{"location":"Celestine/Pattern.html#Celestine::Pattern","text":"Class which acts like a group, but applies masking to another drawable.","title":"Pattern"},{"location":"Celestine/Pattern.html#Celestine::Pattern-constants","text":"","title":"Constants"},{"location":"Celestine/Pattern.html#Celestine::Pattern::TAG","text":"","title":"TAG"},{"location":"Celestine/Pattern.html#Celestine::Pattern-methods","text":"","title":"Methods"},{"location":"Celestine/Pattern.html#Celestine::Pattern#anchor(&)","text":"Allows a Celestine::Anchor to be made using a DSL call, and added to this drawables items.","title":"#anchor"},{"location":"Celestine/Pattern.html#Celestine::Pattern#circle(&)","text":"Allows a Celestine::Circle to be made using a DSL call, and added to this drawables items.","title":"#circle"},{"location":"Celestine/Pattern.html#Celestine::Pattern#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Pattern.html#Celestine::Pattern#ellipse(&)","text":"Allows a Celestine::Ellipse to be made using a DSL call, and added to this drawables items.","title":"#ellipse"},{"location":"Celestine/Pattern.html#Celestine::Pattern#group(&)","text":"Allows a Celestine::Group to be made using a DSL call, and added to this drawables items.","title":"#group"},{"location":"Celestine/Pattern.html#Celestine::Pattern#href","text":"View source","title":"#href"},{"location":"Celestine/Pattern.html#Celestine::Pattern#href=(href)","text":"View source","title":"#href="},{"location":"Celestine/Pattern.html#Celestine::Pattern#image(&)","text":"Allows a Celestine::Image to be made using a DSL call, and added to this drawables items.","title":"#image"},{"location":"Celestine/Pattern.html#Celestine::Pattern#path(&)","text":"Allows a Celestine::Path to be made using a DSL call, and added to this drawables items.","title":"#path"},{"location":"Celestine/Pattern.html#Celestine::Pattern#pattern_content_units","text":"View source","title":"#pattern_content_units"},{"location":"Celestine/Pattern.html#Celestine::Pattern#pattern_content_units=(pattern_content_units)","text":"View source","title":"#pattern_content_units="},{"location":"Celestine/Pattern.html#Celestine::Pattern#pattern_transform(&)","text":"View source","title":"#pattern_transform"},{"location":"Celestine/Pattern.html#Celestine::Pattern#pattern_transform_attribute(io)","text":"View source","title":"#pattern_transform_attribute"},{"location":"Celestine/Pattern.html#Celestine::Pattern#pattern_units","text":"View source","title":"#pattern_units"},{"location":"Celestine/Pattern.html#Celestine::Pattern#pattern_units=(pattern_units)","text":"View source","title":"#pattern_units="},{"location":"Celestine/Pattern.html#Celestine::Pattern#preserve_aspect_ratio","text":"View source","title":"#preserve_aspect_ratio"},{"location":"Celestine/Pattern.html#Celestine::Pattern#preserve_aspect_ratio=(preserve_aspect_ratio)","text":"View source","title":"#preserve_aspect_ratio="},{"location":"Celestine/Pattern.html#Celestine::Pattern#rectangle(&)","text":"Allows a Celestine::Rectangle to be made using a DSL call, and added to this drawables items.","title":"#rectangle"},{"location":"Celestine/Pattern.html#Celestine::Pattern#svg(&)","text":"Allows a Celestine::Svg to be made using a DSL call, and added to this drawables items.","title":"#svg"},{"location":"Celestine/Pattern.html#Celestine::Pattern#text(&)","text":"Allows a Celestine::Text to be made using a DSL call, and added to this drawables items.","title":"#text"},{"location":"Celestine/Pattern.html#Celestine::Pattern#view_box","text":"View source","title":"#view_box"},{"location":"Celestine/Pattern.html#Celestine::Pattern#view_box=(view_box)","text":"View source","title":"#view_box="},{"location":"Celestine/Pattern.html#Celestine::Pattern::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Pattern.html#Celestine::Pattern::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Pattern.html#Celestine::Pattern::Attrs::HREF","text":"","title":"HREF"},{"location":"Celestine/Pattern.html#Celestine::Pattern::Attrs::PATTERN_CONTENT_UNITS","text":"","title":"PATTERN_CONTENT_UNITS"},{"location":"Celestine/Pattern.html#Celestine::Pattern::Attrs::PATTERN_TRANSFORM","text":"","title":"PATTERN_TRANSFORM"},{"location":"Celestine/Pattern.html#Celestine::Pattern::Attrs::PATTERN_UNITS","text":"","title":"PATTERN_UNITS"},{"location":"Celestine/Pattern.html#Celestine::Pattern::Attrs::PRESERVE_ASPECT_RATIO","text":"","title":"PRESERVE_ASPECT_RATIO"},{"location":"Celestine/Pattern.html#Celestine::Pattern::Attrs::VIEW_BOX","text":"","title":"VIEW_BOX"},{"location":"Celestine/Point.html","text":"class Celestine::Point inherits Reference # Constants # OPERATIONS = [ :+ , :- , :/ , :* , :** , :& , :| , :^ , :<< , :>> , :% ] # ZERO = Celestine :: Point . new ( 0 , 0 ) # Class methods # .new ( x , y ) # View source Methods # #% ( other : Celestine::Point ) # View source #& ( other : Celestine::Point ) # View source #* ( other : Celestine::Point ) # View source #** ( other : Celestine::Point ) # View source #+ ( other : Celestine::Point ) # View source #- ( other : Celestine::Point ) # View source #/ ( other : Celestine::Point ) # View source #<< ( other : Celestine::Point ) # View source #>> ( other : Celestine::Point ) # View source #^ ( other : Celestine::Point ) # View source #to_s ( io ) # View source #x : Int32 # View source #x= ( x : Int32 ) # View source #y : Int32 # View source #y= ( y : Int32 ) # View source #| ( other : Celestine::Point ) # View source","title":"Point"},{"location":"Celestine/Point.html#Celestine::Point","text":"","title":"Point"},{"location":"Celestine/Point.html#Celestine::Point-constants","text":"","title":"Constants"},{"location":"Celestine/Point.html#Celestine::Point::OPERATIONS","text":"","title":"OPERATIONS"},{"location":"Celestine/Point.html#Celestine::Point::ZERO","text":"","title":"ZERO"},{"location":"Celestine/Point.html#Celestine::Point-class-methods","text":"","title":"Class methods"},{"location":"Celestine/Point.html#Celestine::Point.new(x,y)","text":"View source","title":".new"},{"location":"Celestine/Point.html#Celestine::Point-methods","text":"","title":"Methods"},{"location":"Celestine/Point.html#Celestine::Point#%(other)","text":"View source","title":"#%"},{"location":"Celestine/Point.html#Celestine::Point#&(other)","text":"View source","title":"#&amp;"},{"location":"Celestine/Point.html#Celestine::Point#*(other)","text":"View source","title":"#*"},{"location":"Celestine/Point.html#Celestine::Point#**(other)","text":"View source","title":"#**"},{"location":"Celestine/Point.html#Celestine::Point#+(other)","text":"View source","title":"#+"},{"location":"Celestine/Point.html#Celestine::Point#-(other)","text":"View source","title":"#-"},{"location":"Celestine/Point.html#Celestine::Point#/(other)","text":"View source","title":"#/"},{"location":"Celestine/Point.html#Celestine::Point#<<(other)","text":"View source","title":"#&lt;&lt;"},{"location":"Celestine/Point.html#Celestine::Point#>>(other)","text":"View source","title":"#&gt;&gt;"},{"location":"Celestine/Point.html#Celestine::Point#^(other)","text":"View source","title":"#^"},{"location":"Celestine/Point.html#Celestine::Point#to_s(io)","text":"View source","title":"#to_s"},{"location":"Celestine/Point.html#Celestine::Point#x","text":"View source","title":"#x"},{"location":"Celestine/Point.html#Celestine::Point#x=(x)","text":"View source","title":"#x="},{"location":"Celestine/Point.html#Celestine::Point#y","text":"View source","title":"#y"},{"location":"Celestine/Point.html#Celestine::Point#y=(y)","text":"View source","title":"#y="},{"location":"Celestine/Point.html#Celestine::Point#|(other)","text":"View source","title":"#|"},{"location":"Celestine/Rectangle.html","text":"class Celestine::Rectangle inherits Celestine::Drawable # Draws and holds information for rectangles Mozilla SVG Docs Included modules Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::Body Celestine::Modules::Filter Celestine::Modules::Marker Celestine::Modules::Mask Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"rect\" # Methods # #draw ( io : IO ) : Nil # Draws this rectangle to an IO View source #radius_x : IFNumber? # The corner radius value Mozilla SVG Docs #radius_x= ( radius_x : IFNumber? ) # The corner radius value Mozilla SVG Docs #radius_x_units : String? # What kind of unit radius_x should use when rendering #radius_x_units= ( radius_x_units : String? ) # What kind of unit radius_x should use when rendering module Celestine::Rectangle::Attrs # Included modules Celestine::Modules::Body::Attrs Celestine::Modules::Filter::Attrs Celestine::Modules::Marker::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs Constants # RADIUS_X = \"rx\" #","title":"Rectangle"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle","text":"Draws and holds information for rectangles Mozilla SVG Docs","title":"Rectangle"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle-constants","text":"","title":"Constants"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle::TAG","text":"","title":"TAG"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle-methods","text":"","title":"Methods"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle#draw(io)","text":"Draws this rectangle to an IO View source","title":"#draw"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle#radius_x","text":"The corner radius value Mozilla SVG Docs","title":"#radius_x"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle#radius_x=(radius_x)","text":"The corner radius value Mozilla SVG Docs","title":"#radius_x="},{"location":"Celestine/Rectangle.html#Celestine::Rectangle#radius_x_units","text":"What kind of unit radius_x should use when rendering","title":"#radius_x_units"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle#radius_x_units=(radius_x_units)","text":"What kind of unit radius_x should use when rendering","title":"#radius_x_units="},{"location":"Celestine/Rectangle.html#Celestine::Rectangle::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Rectangle.html#Celestine::Rectangle::Attrs::RADIUS_X","text":"","title":"RADIUS_X"},{"location":"Celestine/Svg.html","text":"class Celestine::Svg inherits Celestine::Drawable # Group class which can group multiple drawables together. Included modules Celestine::Meta::Context::Methods Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::Body Celestine::Modules::Filter Celestine::Modules::Mask Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"svg\" # Class methods # .new # View source Methods # #anchor ( define = false , & block : Celestine::Anchor -> Celestine::Anchor ) : Celestine::Anchor # Allows a Celestine::Anchor to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #circle ( define = false , & block : Celestine::Circle -> Celestine::Circle ) : Celestine::Circle # Allows a Celestine::Circle to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #define ( drawable : Celestine::Drawable ) # Add drawable to this Celestine::Svg 's definitions, allowing it to be use d later. View source #draw ( io : IO ) : Nil # Draws this rectangle to an IO View source #ellipse ( define = false , & block : Celestine::Ellipse -> Celestine::Ellipse ) : Celestine::Ellipse # Allows a Celestine::Ellipse to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #filter ( & block : Celestine::Filter -> Celestine::Filter ) # Create a filter object and add it to this Celestine::Svg 's defs View source #group ( define = false , & block : Celestine::Group -> Celestine::Group ) : Celestine::Group # Allows a Celestine::Group to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #image ( define = false , & block : Celestine::Image -> Celestine::Image ) : Celestine::Image # Allows a Celestine::Image to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #linear_gradient ( & block : Celestine::Gradient::Linear -> Celestine::Gradient::Linear ) # Create a linear gradient object and add it to this Celestine::Svg 's defs View source #marker ( & block : Celestine::Marker -> Celestine::Marker ) # Create a marker object and add it to this Celestine::Svg 's defs View source #mask ( & block : Celestine::Mask -> Celestine::Mask ) # Create a mask object and add it to this Celestine::Svg 's defs View source #path ( define = false , & block : Celestine::Path -> Celestine::Path ) : Celestine::Path # Allows a Celestine::Path to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #pattern ( & block : Celestine::Pattern -> Celestine::Pattern ) # Create a pattern object and add it to this Celestine::Svg 's defs View source #radial_gradient ( & block : Celestine::Gradient::Radial -> Celestine::Gradient::Radial ) # Create a linear gradient object and add it to this Celestine::Svg 's defs View source #rectangle ( define = false , & block : Celestine::Rectangle -> Celestine::Rectangle ) : Celestine::Rectangle # Allows a Celestine::Rectangle to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #shape_rendering : String? # Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: auto | optimizeSpeed | crispEdges | geometricPrecision Mozilla SVG Docs View source #shape_rendering= ( shape_rendering : String? ) # Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: auto | optimizeSpeed | crispEdges | geometricPrecision Mozilla SVG Docs View source #svg ( define = false , & block : Celestine::Svg -> Celestine::Svg ) : Celestine::Svg # Allows a Celestine::Svg to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #text ( define = false , & block : Celestine::Text -> Celestine::Text ) : Celestine::Text # Allows a Celestine::Text to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself. #view_box : Celestine::ViewBox? # View source #view_box= ( view_box : Celestine::ViewBox? ) # View source module Celestine::Svg::Attrs # Included modules Celestine::Modules::Body::Attrs Celestine::Modules::Filter::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs","title":"Svg"},{"location":"Celestine/Svg.html#Celestine::Svg","text":"Group class which can group multiple drawables together.","title":"Svg"},{"location":"Celestine/Svg.html#Celestine::Svg-constants","text":"","title":"Constants"},{"location":"Celestine/Svg.html#Celestine::Svg::TAG","text":"","title":"TAG"},{"location":"Celestine/Svg.html#Celestine::Svg-class-methods","text":"","title":"Class methods"},{"location":"Celestine/Svg.html#Celestine::Svg.new","text":"View source","title":".new"},{"location":"Celestine/Svg.html#Celestine::Svg-methods","text":"","title":"Methods"},{"location":"Celestine/Svg.html#Celestine::Svg#anchor(define,&)","text":"Allows a Celestine::Anchor to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#anchor"},{"location":"Celestine/Svg.html#Celestine::Svg#circle(define,&)","text":"Allows a Celestine::Circle to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#circle"},{"location":"Celestine/Svg.html#Celestine::Svg#define(drawable)","text":"Add drawable to this Celestine::Svg 's definitions, allowing it to be use d later. View source","title":"#define"},{"location":"Celestine/Svg.html#Celestine::Svg#draw(io)","text":"Draws this rectangle to an IO View source","title":"#draw"},{"location":"Celestine/Svg.html#Celestine::Svg#ellipse(define,&)","text":"Allows a Celestine::Ellipse to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#ellipse"},{"location":"Celestine/Svg.html#Celestine::Svg#filter(&)","text":"Create a filter object and add it to this Celestine::Svg 's defs View source","title":"#filter"},{"location":"Celestine/Svg.html#Celestine::Svg#group(define,&)","text":"Allows a Celestine::Group to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#group"},{"location":"Celestine/Svg.html#Celestine::Svg#image(define,&)","text":"Allows a Celestine::Image to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#image"},{"location":"Celestine/Svg.html#Celestine::Svg#linear_gradient(&)","text":"Create a linear gradient object and add it to this Celestine::Svg 's defs View source","title":"#linear_gradient"},{"location":"Celestine/Svg.html#Celestine::Svg#marker(&)","text":"Create a marker object and add it to this Celestine::Svg 's defs View source","title":"#marker"},{"location":"Celestine/Svg.html#Celestine::Svg#mask(&)","text":"Create a mask object and add it to this Celestine::Svg 's defs View source","title":"#mask"},{"location":"Celestine/Svg.html#Celestine::Svg#path(define,&)","text":"Allows a Celestine::Path to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#path"},{"location":"Celestine/Svg.html#Celestine::Svg#pattern(&)","text":"Create a pattern object and add it to this Celestine::Svg 's defs View source","title":"#pattern"},{"location":"Celestine/Svg.html#Celestine::Svg#radial_gradient(&)","text":"Create a linear gradient object and add it to this Celestine::Svg 's defs View source","title":"#radial_gradient"},{"location":"Celestine/Svg.html#Celestine::Svg#rectangle(define,&)","text":"Allows a Celestine::Rectangle to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#rectangle"},{"location":"Celestine/Svg.html#Celestine::Svg#shape_rendering","text":"Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: auto | optimizeSpeed | crispEdges | geometricPrecision Mozilla SVG Docs View source","title":"#shape_rendering"},{"location":"Celestine/Svg.html#Celestine::Svg#shape_rendering=(shape_rendering)","text":"Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: auto | optimizeSpeed | crispEdges | geometricPrecision Mozilla SVG Docs View source","title":"#shape_rendering="},{"location":"Celestine/Svg.html#Celestine::Svg#svg(define,&)","text":"Allows a Celestine::Svg to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#svg"},{"location":"Celestine/Svg.html#Celestine::Svg#text(define,&)","text":"Allows a Celestine::Text to be made using a DSL call. Can be defined, which adds the drawable to the main context's definitions, and not to the main document itself.","title":"#text"},{"location":"Celestine/Svg.html#Celestine::Svg#view_box","text":"View source","title":"#view_box"},{"location":"Celestine/Svg.html#Celestine::Svg#view_box=(view_box)","text":"View source","title":"#view_box="},{"location":"Celestine/Svg.html#Celestine::Svg::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Text.html","text":"class Celestine::Text inherits Celestine::Drawable # Draws and holds information for text Mozilla SVG Docs Included modules Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::Filter Celestine::Modules::Mask Celestine::Modules::Position Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"text\" # Methods # #dominant_baseline : String? # Changes where the natural anchor is for the text. Potential Values: auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top Mozilla SVG Docs View source #dominant_baseline= ( dominant_baseline : String? ) # Changes where the natural anchor is for the text. Potential Values: auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top Mozilla SVG Docs View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #dx : IFNumber? # Shifts the text position horizontally from a previous text element Mozilla SVG Docs #dx= ( dx : IFNumber? ) # Shifts the text position horizontally from a previous text element Mozilla SVG Docs #dx_units : String? # What kind of unit dx should use when rendering #dx_units= ( dx_units : String? ) # What kind of unit dx should use when rendering #dy : IFNumber? # Shifts the text position vertically from a previous text element Mozilla SVG Docs #dy= ( dy : IFNumber? ) # Shifts the text position vertically from a previous text element Mozilla SVG Docs #dy_units : String? # What kind of unit dy should use when rendering #dy_units= ( dy_units : String? ) # What kind of unit dy should use when rendering #font_family : String? # Changes the font family used. Mozilla SVG Docs View source #font_family= ( font_family : String? ) # Changes the font family used. Mozilla SVG Docs View source #font_size : IFNumber? # Changes the font size used. Mozilla SVG Docs #font_size= ( font_size : IFNumber? ) # Changes the font size used. Mozilla SVG Docs #font_size_adjust : Float64? # Changes the font size adjustment. Mozilla SVG Docs View source #font_size_adjust= ( font_size_adjust : Float64? ) # Changes the font size adjustment. Mozilla SVG Docs View source #font_size_units : String? # What kind of unit font_size should use when rendering #font_size_units= ( font_size_units : String? ) # What kind of unit font_size should use when rendering #font_stretch : String? # Changes the font stretch type. Mozilla SVG Docs View source #font_stretch= ( font_stretch : String? ) # Changes the font stretch type. Mozilla SVG Docs View source #font_style : String? # Changes the font style. Mozilla SVG Docs View source #font_style= ( font_style : String? ) # Changes the font style. Mozilla SVG Docs View source #font_variant : String? # Changes the font variant. Mozilla SVG Docs View source #font_variant= ( font_variant : String? ) # Changes the font variant. Mozilla SVG Docs View source #font_weight : String? # Changes the font weight. Mozilla SVG Docs View source #font_weight= ( font_weight : String? ) # Changes the font weight. Mozilla SVG Docs View source #length : IFNumber? # Changes the length of the text. Mozilla SVG Docs #length= ( length : IFNumber? ) # Changes the length of the text. Mozilla SVG Docs #length_adjust : String? # How the length should be adjusted. Potential values: spacing | spacingAndGlyphs Mozilla SVG Docs View source #length_adjust= ( length_adjust : String? ) # How the length should be adjusted. Potential values: spacing | spacingAndGlyphs Mozilla SVG Docs View source #length_units : String? # What kind of unit length should use when rendering #length_units= ( length_units : String? ) # What kind of unit length should use when rendering #letter_spacing : IFNumber? # Changes how far letters are spaced. Mozilla SVG Docs TODO: Make this SIFNumber? since it can have the string value \"normal\" as well as numbers :( #letter_spacing= ( letter_spacing : IFNumber? ) # Changes how far letters are spaced. Mozilla SVG Docs TODO: Make this SIFNumber? since it can have the string value \"normal\" as well as numbers :( #letter_spacing_units : String? # What kind of unit letter_spacing should use when rendering #letter_spacing_units= ( letter_spacing_units : String? ) # What kind of unit letter_spacing should use when rendering #rotate : Array ( Float64 ) # An array that allows for the rotation of each individual glyph Mozilla SVG Docs note the docs here do not talk about this usage, only on the main element page mentions this View source #rotate= ( rotate : Array ( Float64 )) # An array that allows for the rotation of each individual glyph Mozilla SVG Docs note the docs here do not talk about this usage, only on the main element page mentions this View source #text : String? # The text to be displayed View source #text= ( text : String? ) # The text to be displayed View source module Celestine::Text::Attrs # Included modules Celestine::Modules::Filter::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::Position::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs Constants # DOMINANT_BASELINE = \"dominant-baseline\" # DX = \"dx\" # DY = \"dy\" # FONT_FAMILY = \"font-family\" # FONT_SIZE = \"font-size\" # FONT_SIZE_ADJUST = \"font-size-adjust\" # FONT_STRETCH = \"font-stretch\" # FONT_STYLE = \"font-style\" # FONT_VARIANT = \"font-variant\" # FONT_WEIGHT = \"font-weight\" # LENGTH = \"textLength\" # LENGTH_ADJUST = \"lengthAdjust\" # LETTER_SPACING = \"letter-spacing\" # ROTATE = \"rotate\" #","title":"Text"},{"location":"Celestine/Text.html#Celestine::Text","text":"Draws and holds information for text Mozilla SVG Docs","title":"Text"},{"location":"Celestine/Text.html#Celestine::Text-constants","text":"","title":"Constants"},{"location":"Celestine/Text.html#Celestine::Text::TAG","text":"","title":"TAG"},{"location":"Celestine/Text.html#Celestine::Text-methods","text":"","title":"Methods"},{"location":"Celestine/Text.html#Celestine::Text#dominant_baseline","text":"Changes where the natural anchor is for the text. Potential Values: auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top Mozilla SVG Docs View source","title":"#dominant_baseline"},{"location":"Celestine/Text.html#Celestine::Text#dominant_baseline=(dominant_baseline)","text":"Changes where the natural anchor is for the text. Potential Values: auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top Mozilla SVG Docs View source","title":"#dominant_baseline="},{"location":"Celestine/Text.html#Celestine::Text#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Text.html#Celestine::Text#dx","text":"Shifts the text position horizontally from a previous text element Mozilla SVG Docs","title":"#dx"},{"location":"Celestine/Text.html#Celestine::Text#dx=(dx)","text":"Shifts the text position horizontally from a previous text element Mozilla SVG Docs","title":"#dx="},{"location":"Celestine/Text.html#Celestine::Text#dx_units","text":"What kind of unit dx should use when rendering","title":"#dx_units"},{"location":"Celestine/Text.html#Celestine::Text#dx_units=(dx_units)","text":"What kind of unit dx should use when rendering","title":"#dx_units="},{"location":"Celestine/Text.html#Celestine::Text#dy","text":"Shifts the text position vertically from a previous text element Mozilla SVG Docs","title":"#dy"},{"location":"Celestine/Text.html#Celestine::Text#dy=(dy)","text":"Shifts the text position vertically from a previous text element Mozilla SVG Docs","title":"#dy="},{"location":"Celestine/Text.html#Celestine::Text#dy_units","text":"What kind of unit dy should use when rendering","title":"#dy_units"},{"location":"Celestine/Text.html#Celestine::Text#dy_units=(dy_units)","text":"What kind of unit dy should use when rendering","title":"#dy_units="},{"location":"Celestine/Text.html#Celestine::Text#font_family","text":"Changes the font family used. Mozilla SVG Docs View source","title":"#font_family"},{"location":"Celestine/Text.html#Celestine::Text#font_family=(font_family)","text":"Changes the font family used. Mozilla SVG Docs View source","title":"#font_family="},{"location":"Celestine/Text.html#Celestine::Text#font_size","text":"Changes the font size used. Mozilla SVG Docs","title":"#font_size"},{"location":"Celestine/Text.html#Celestine::Text#font_size=(font_size)","text":"Changes the font size used. Mozilla SVG Docs","title":"#font_size="},{"location":"Celestine/Text.html#Celestine::Text#font_size_adjust","text":"Changes the font size adjustment. Mozilla SVG Docs View source","title":"#font_size_adjust"},{"location":"Celestine/Text.html#Celestine::Text#font_size_adjust=(font_size_adjust)","text":"Changes the font size adjustment. Mozilla SVG Docs View source","title":"#font_size_adjust="},{"location":"Celestine/Text.html#Celestine::Text#font_size_units","text":"What kind of unit font_size should use when rendering","title":"#font_size_units"},{"location":"Celestine/Text.html#Celestine::Text#font_size_units=(font_size_units)","text":"What kind of unit font_size should use when rendering","title":"#font_size_units="},{"location":"Celestine/Text.html#Celestine::Text#font_stretch","text":"Changes the font stretch type. Mozilla SVG Docs View source","title":"#font_stretch"},{"location":"Celestine/Text.html#Celestine::Text#font_stretch=(font_stretch)","text":"Changes the font stretch type. Mozilla SVG Docs View source","title":"#font_stretch="},{"location":"Celestine/Text.html#Celestine::Text#font_style","text":"Changes the font style. Mozilla SVG Docs View source","title":"#font_style"},{"location":"Celestine/Text.html#Celestine::Text#font_style=(font_style)","text":"Changes the font style. Mozilla SVG Docs View source","title":"#font_style="},{"location":"Celestine/Text.html#Celestine::Text#font_variant","text":"Changes the font variant. Mozilla SVG Docs View source","title":"#font_variant"},{"location":"Celestine/Text.html#Celestine::Text#font_variant=(font_variant)","text":"Changes the font variant. Mozilla SVG Docs View source","title":"#font_variant="},{"location":"Celestine/Text.html#Celestine::Text#font_weight","text":"Changes the font weight. Mozilla SVG Docs View source","title":"#font_weight"},{"location":"Celestine/Text.html#Celestine::Text#font_weight=(font_weight)","text":"Changes the font weight. Mozilla SVG Docs View source","title":"#font_weight="},{"location":"Celestine/Text.html#Celestine::Text#length","text":"Changes the length of the text. Mozilla SVG Docs","title":"#length"},{"location":"Celestine/Text.html#Celestine::Text#length=(length)","text":"Changes the length of the text. Mozilla SVG Docs","title":"#length="},{"location":"Celestine/Text.html#Celestine::Text#length_adjust","text":"How the length should be adjusted. Potential values: spacing | spacingAndGlyphs Mozilla SVG Docs View source","title":"#length_adjust"},{"location":"Celestine/Text.html#Celestine::Text#length_adjust=(length_adjust)","text":"How the length should be adjusted. Potential values: spacing | spacingAndGlyphs Mozilla SVG Docs View source","title":"#length_adjust="},{"location":"Celestine/Text.html#Celestine::Text#length_units","text":"What kind of unit length should use when rendering","title":"#length_units"},{"location":"Celestine/Text.html#Celestine::Text#length_units=(length_units)","text":"What kind of unit length should use when rendering","title":"#length_units="},{"location":"Celestine/Text.html#Celestine::Text#letter_spacing","text":"Changes how far letters are spaced. Mozilla SVG Docs TODO: Make this SIFNumber? since it can have the string value \"normal\" as well as numbers :(","title":"#letter_spacing"},{"location":"Celestine/Text.html#Celestine::Text#letter_spacing=(letter_spacing)","text":"Changes how far letters are spaced. Mozilla SVG Docs TODO: Make this SIFNumber? since it can have the string value \"normal\" as well as numbers :(","title":"#letter_spacing="},{"location":"Celestine/Text.html#Celestine::Text#letter_spacing_units","text":"What kind of unit letter_spacing should use when rendering","title":"#letter_spacing_units"},{"location":"Celestine/Text.html#Celestine::Text#letter_spacing_units=(letter_spacing_units)","text":"What kind of unit letter_spacing should use when rendering","title":"#letter_spacing_units="},{"location":"Celestine/Text.html#Celestine::Text#rotate","text":"An array that allows for the rotation of each individual glyph Mozilla SVG Docs note the docs here do not talk about this usage, only on the main element page mentions this View source","title":"#rotate"},{"location":"Celestine/Text.html#Celestine::Text#rotate=(rotate)","text":"An array that allows for the rotation of each individual glyph Mozilla SVG Docs note the docs here do not talk about this usage, only on the main element page mentions this View source","title":"#rotate="},{"location":"Celestine/Text.html#Celestine::Text#text","text":"The text to be displayed View source","title":"#text"},{"location":"Celestine/Text.html#Celestine::Text#text=(text)","text":"The text to be displayed View source","title":"#text="},{"location":"Celestine/Text.html#Celestine::Text::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Text.html#Celestine::Text::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::DOMINANT_BASELINE","text":"","title":"DOMINANT_BASELINE"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::DX","text":"","title":"DX"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::DY","text":"","title":"DY"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::FONT_FAMILY","text":"","title":"FONT_FAMILY"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::FONT_SIZE","text":"","title":"FONT_SIZE"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::FONT_SIZE_ADJUST","text":"","title":"FONT_SIZE_ADJUST"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::FONT_STRETCH","text":"","title":"FONT_STRETCH"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::FONT_STYLE","text":"","title":"FONT_STYLE"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::FONT_VARIANT","text":"","title":"FONT_VARIANT"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::FONT_WEIGHT","text":"","title":"FONT_WEIGHT"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::LENGTH","text":"","title":"LENGTH"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::LENGTH_ADJUST","text":"","title":"LENGTH_ADJUST"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::LETTER_SPACING","text":"","title":"LETTER_SPACING"},{"location":"Celestine/Text.html#Celestine::Text::Attrs::ROTATE","text":"","title":"ROTATE"},{"location":"Celestine/Use.html","text":"class Celestine::Use inherits Celestine::Drawable # Allows reuse of another drawable by ID Mozilla SVG Docs Included modules Celestine::Modules::Animate Celestine::Modules::Animate::Motion Celestine::Modules::Animate::Transform Celestine::Modules::Body Celestine::Modules::Filter Celestine::Modules::Mask Celestine::Modules::StrokeFill Celestine::Modules::Transform Constants # TAG = \"use\" # Class methods # .new ( target : Celestine::Drawable ) # View source .new ( target_id : Sting ) # View source .new # View source Methods # #draw ( io : IO ) : Nil # Draws this use to the IO View source #target_id : String # The ID to be reused Mozilla SVG Docs View source #target_id= ( target_id : String ) # The ID to be reused Mozilla SVG Docs View source module Celestine::Use::Attrs # Included modules Celestine::Modules::Body::Attrs Celestine::Modules::Filter::Attrs Celestine::Modules::Mask::Attrs Celestine::Modules::StrokeFill::Attrs Celestine::Modules::Transform::Attrs","title":"Use"},{"location":"Celestine/Use.html#Celestine::Use","text":"Allows reuse of another drawable by ID Mozilla SVG Docs","title":"Use"},{"location":"Celestine/Use.html#Celestine::Use-constants","text":"","title":"Constants"},{"location":"Celestine/Use.html#Celestine::Use::TAG","text":"","title":"TAG"},{"location":"Celestine/Use.html#Celestine::Use-class-methods","text":"","title":"Class methods"},{"location":"Celestine/Use.html#Celestine::Use.new(target)","text":"View source","title":".new"},{"location":"Celestine/Use.html#Celestine::Use-methods","text":"","title":"Methods"},{"location":"Celestine/Use.html#Celestine::Use#draw(io)","text":"Draws this use to the IO View source","title":"#draw"},{"location":"Celestine/Use.html#Celestine::Use#target_id","text":"The ID to be reused Mozilla SVG Docs View source","title":"#target_id"},{"location":"Celestine/Use.html#Celestine::Use#target_id=(target_id)","text":"The ID to be reused Mozilla SVG Docs View source","title":"#target_id="},{"location":"Celestine/Use.html#Celestine::Use::Attrs","text":"","title":"Attrs"},{"location":"Celestine/ViewBox.html","text":"alias Celestine::ViewBox # Alias definition { x : Float64 | Int32 , y : Float64 | Int32 , w : Float64 | Int32 , h : Float64 | Int32 }","title":"ViewBox"},{"location":"Celestine/ViewBox.html#Celestine::ViewBox","text":"","title":"ViewBox"},{"location":"Celestine/Animate/Motion.html","text":"class Celestine::Animate::Motion inherits Celestine::Drawable # Included modules Celestine::Modules::Animate Celestine::Modules::CommonAnimate Constants # TAG = \"animateMotion\" # Methods # #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #key_points : Array ( Float64 ) # This attribute indicate, in the range [0,1], how far is the object along the path for each key_times associated values. View source #key_points= ( key_points ) # This attribute indicate, in the range [0,1], how far is the object along the path for each key_times associated values. View source #link_mpath ( path : Celestine::Path ) # View source #link_mpath ( id : String ) # View source #mpath : String # View source #mpath ( & block : Proc ( Celestine::Path , Nil )) # View source #mpath= ( path : Celestine::Path ) # View source #rotate : String # View source #rotate= ( rotate ) # View source module Celestine::Animate::Motion::Attrs # Included modules Celestine::Modules::CommonAnimate::Attrs Constants # KEY_POINTS = \"keyPoints\" # MPATH = \"path\" # ROTATE = \"rotate\" #","title":"Motion"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion","text":"","title":"Motion"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion-constants","text":"","title":"Constants"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion::TAG","text":"","title":"TAG"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion-methods","text":"","title":"Methods"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion#key_points","text":"This attribute indicate, in the range [0,1], how far is the object along the path for each key_times associated values. View source","title":"#key_points"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion#key_points=(key_points)","text":"This attribute indicate, in the range [0,1], how far is the object along the path for each key_times associated values. View source","title":"#key_points="},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion#link_mpath(path)","text":"View source","title":"#link_mpath"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion#mpath","text":"View source","title":"#mpath"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion#mpath=(path)","text":"View source","title":"#mpath="},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion#rotate","text":"View source","title":"#rotate"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion#rotate=(rotate)","text":"View source","title":"#rotate="},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion::Attrs::KEY_POINTS","text":"","title":"KEY_POINTS"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion::Attrs::MPATH","text":"","title":"MPATH"},{"location":"Celestine/Animate/Motion.html#Celestine::Animate::Motion::Attrs::ROTATE","text":"","title":"ROTATE"},{"location":"Celestine/Drawable/Transform.html","text":"class Celestine::Drawable::Transform inherits Reference # A transform class used to interact with the transform attribute Methods # #empty? # View source #matrix ( a : Float64 , b : Float64 , c : Float64 , d : Float64 , e : Float64 , f : Float64 ) # View source #objects_io : IO :: Memory # View source #rotate ( degrees , origin_x , origin_y ) # View source #scale ( x , y ) # View source #skew_x ( x ) # View source #skew_y ( y ) # View source #to_s # Returns a string representation of this object. Descendants must usually not override this method. Instead, they must override to_s(io) , which must append to the given IO object. View source #translate ( x , y ) # View source","title":"Transform"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform","text":"A transform class used to interact with the transform attribute","title":"Transform"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform-methods","text":"","title":"Methods"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#empty?","text":"View source","title":"#empty?"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#matrix(a,b,c,d,e,f)","text":"View source","title":"#matrix"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#objects_io","text":"View source","title":"#objects_io"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#rotate(degrees,origin_x,origin_y)","text":"View source","title":"#rotate"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#scale(x,y)","text":"View source","title":"#scale"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#skew_x(x)","text":"View source","title":"#skew_x"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#skew_y(y)","text":"View source","title":"#skew_y"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#to_s","text":"Returns a string representation of this object. Descendants must usually not override this method. Instead, they must override to_s(io) , which must append to the given IO object. View source","title":"#to_s"},{"location":"Celestine/Drawable/Transform.html#Celestine::Drawable::Transform#translate(x,y)","text":"View source","title":"#translate"},{"location":"Celestine/Filter/Basic.html","text":"abstract class Celestine::Filter::Basic inherits Celestine::Drawable # Included modules Celestine::Modules::Animate Celestine::Modules::Body Direct known subclasses Celestine::Filter::Blend Celestine::Filter::Blur Celestine::Filter::ColorMatrix Celestine::Filter::ComponentTransfer Celestine::Filter::Composite Celestine::Filter::DisplacementMap Celestine::Filter::DropShadow Celestine::Filter::Flood Celestine::Filter::Image Celestine::Filter::Merge Celestine::Filter::Morphology Celestine::Filter::Offset Celestine::Filter::SpecularLighting Celestine::Filter::Tile Celestine::Filter::Turbulence Constants # TAG = \"WARNING CELESTINE::FILTER::BASIC NOT TO BE USED!!!!!\" # Methods # #filter_basic_attribute ( io ) # View source #result : String? # View source #result= ( result : String? ) # View source module Celestine::Filter::Basic::Attrs # Included modules Celestine::Modules::Body::Attrs Direct including types Celestine::Filter::Blend::Attrs Celestine::Filter::Blur::Attrs Celestine::Filter::ColorMatrix::Attrs Celestine::Filter::ComponentTransfer::Attrs Celestine::Filter::Composite::Attrs Celestine::Filter::DisplacementMap::Attrs Celestine::Filter::DropShadow::Attrs Celestine::Filter::Flood::Attrs Celestine::Filter::Image::Attrs Celestine::Filter::Merge::Attrs Celestine::Filter::Morphology::Attrs Celestine::Filter::Offset::Attrs Celestine::Filter::SpecularLighting::Attrs Celestine::Filter::Tile::Attrs Celestine::Filter::Turbulence::Attrs Constants # RESULT = \"result\" #","title":"Basic"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic","text":"","title":"Basic"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic#filter_basic_attribute(io)","text":"View source","title":"#filter_basic_attribute"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic#result","text":"View source","title":"#result"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic#result=(result)","text":"View source","title":"#result="},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Basic.html#Celestine::Filter::Basic::Attrs::RESULT","text":"","title":"RESULT"},{"location":"Celestine/Filter/Blend.html","text":"class Celestine::Filter::Blend inherits Celestine::Filter::Basic # Allows blending two filter sources Mozilla SVG Docs Constants # TAG = \"feBlend\" # Methods # #draw ( io : IO ) : Nil # Draws this blend filter to an IO View source #input : String? # The first input Mozilla SVG Docs View source #input2 : String? # The second input Mozilla SVG Docs View source #input2= ( input2 : String? ) # The second input Mozilla SVG Docs View source #input= ( input : String? ) # The first input Mozilla SVG Docs View source #mode : String? # The blending type to use. Mozilla SVG Docs View source #mode= ( mode : String? ) # The blending type to use. Mozilla SVG Docs View source module Celestine::Filter::Blend::Attrs # Allows blending two filter sources Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # INPUT = \"in\" # INPUT2 = \"in2\" # MODE = \"mode\" #","title":"Blend"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend","text":"Allows blending two filter sources Mozilla SVG Docs","title":"Blend"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend#draw(io)","text":"Draws this blend filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend#input","text":"The first input Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend#input2","text":"The second input Mozilla SVG Docs View source","title":"#input2"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend#input2=(input2)","text":"The second input Mozilla SVG Docs View source","title":"#input2="},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend#input=(input)","text":"The first input Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend#mode","text":"The blending type to use. Mozilla SVG Docs View source","title":"#mode"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend#mode=(mode)","text":"The blending type to use. Mozilla SVG Docs View source","title":"#mode="},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend::Attrs","text":"Allows blending two filter sources Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend::Attrs::INPUT","text":"","title":"INPUT"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend::Attrs::INPUT2","text":"","title":"INPUT2"},{"location":"Celestine/Filter/Blend.html#Celestine::Filter::Blend::Attrs::MODE","text":"","title":"MODE"},{"location":"Celestine/Filter/Blur.html","text":"class Celestine::Filter::Blur inherits Celestine::Filter::Basic # Gaussian blurs a source Mozilla SVG Docs Constants # TAG = \"feGaussianBlur\" # Methods # #draw ( io : IO ) : Nil # Draws this blur filter to an IO View source #edge_mode : String? # How the filter should extend its image size to allow the duplication or wrapping of edge values. Potential Values: duplicate | wrap | none Mozilla SVG Docs View source #edge_mode= ( edge_mode : String? ) # How the filter should extend its image size to allow the duplication or wrapping of edge values. Potential Values: duplicate | wrap | none Mozilla SVG Docs View source #input : String? # The input source Mozilla SVG Docs View source #input= ( input : String? ) # The input source Mozilla SVG Docs View source #standard_deviation : IFNumber? # The amount of bluring that should occur Mozilla SVG Docs #standard_deviation= ( standard_deviation : IFNumber? ) # The amount of bluring that should occur Mozilla SVG Docs #standard_deviation_units : String? # What kind of unit standard_deviation should use when rendering #standard_deviation_units= ( standard_deviation_units : String? ) # What kind of unit standard_deviation should use when rendering module Celestine::Filter::Blur::Attrs # Gaussian blurs a source Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # EDGE_MODE = \"edgeMode\" # STANDARD_DEVIATION = \"stdDeviation\" #","title":"Blur"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur","text":"Gaussian blurs a source Mozilla SVG Docs","title":"Blur"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#draw(io)","text":"Draws this blur filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#edge_mode","text":"How the filter should extend its image size to allow the duplication or wrapping of edge values. Potential Values: duplicate | wrap | none Mozilla SVG Docs View source","title":"#edge_mode"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#edge_mode=(edge_mode)","text":"How the filter should extend its image size to allow the duplication or wrapping of edge values. Potential Values: duplicate | wrap | none Mozilla SVG Docs View source","title":"#edge_mode="},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#input","text":"The input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#input=(input)","text":"The input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#standard_deviation","text":"The amount of bluring that should occur Mozilla SVG Docs","title":"#standard_deviation"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#standard_deviation=(standard_deviation)","text":"The amount of bluring that should occur Mozilla SVG Docs","title":"#standard_deviation="},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#standard_deviation_units","text":"What kind of unit standard_deviation should use when rendering","title":"#standard_deviation_units"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur#standard_deviation_units=(standard_deviation_units)","text":"What kind of unit standard_deviation should use when rendering","title":"#standard_deviation_units="},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur::Attrs","text":"Gaussian blurs a source Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur::Attrs::EDGE_MODE","text":"","title":"EDGE_MODE"},{"location":"Celestine/Filter/Blur.html#Celestine::Filter::Blur::Attrs::STANDARD_DEVIATION","text":"","title":"STANDARD_DEVIATION"},{"location":"Celestine/Filter/ColorMatrix.html","text":"class Celestine::Filter::ColorMatrix inherits Celestine::Filter::Basic # Allows matrix operations on color values Mozilla SVG Docs Constants # TAG = \"feColorMatrix\" # Methods # #draw ( io : IO ) : Nil # Draws this color matrix filter to an IO View source #input : String? # The input source Mozilla SVG Docs View source #input= ( input : String? ) # The input source Mozilla SVG Docs View source #type : String? # The type of operation Potential Values: matrix | saturate | hueRotate | luminanceToAlpha Mozilla SVG Docs View source #type= ( type : String? ) # The type of operation Potential Values: matrix | saturate | hueRotate | luminanceToAlpha Mozilla SVG Docs View source #values : Array ( IFNumber ) # The matrix values for the operation Mozilla SVG Docs View source #values= ( values : Array ( IFNumber )) # The matrix values for the operation Mozilla SVG Docs View source module Celestine::Filter::ColorMatrix::Attrs # Allows matrix operations on color values Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # INPUT = \"in\" # TYPE = \"type\" # VALUES = \"values\" #","title":"ColorMatrix"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix","text":"Allows matrix operations on color values Mozilla SVG Docs","title":"ColorMatrix"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix#draw(io)","text":"Draws this color matrix filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix#input","text":"The input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix#input=(input)","text":"The input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix#type","text":"The type of operation Potential Values: matrix | saturate | hueRotate | luminanceToAlpha Mozilla SVG Docs View source","title":"#type"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix#type=(type)","text":"The type of operation Potential Values: matrix | saturate | hueRotate | luminanceToAlpha Mozilla SVG Docs View source","title":"#type="},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix#values","text":"The matrix values for the operation Mozilla SVG Docs View source","title":"#values"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix#values=(values)","text":"The matrix values for the operation Mozilla SVG Docs View source","title":"#values="},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix::Attrs","text":"Allows matrix operations on color values Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix::Attrs::INPUT","text":"","title":"INPUT"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix::Attrs::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Filter/ColorMatrix.html#Celestine::Filter::ColorMatrix::Attrs::VALUES","text":"","title":"VALUES"},{"location":"Celestine/Filter/ComponentTransfer.html","text":"class Celestine::Filter::ComponentTransfer inherits Celestine::Filter::Basic # Transfers color components Mozilla SVG Docs Constants # TAG = \"feComponentTransfer\" # Methods # #draw ( io : IO ) : Nil # Draws this component transfer filter to an IO View source #func_a ( & block : Celestine::Filter::ComponentTransfer::FuncA -> Celestine::Filter::ComponentTransfer::FuncA ) # DSL call for feFuncA View source #func_a_discrete ( table_values : Array ( IFNumber )) # DSL call for feFuncA with discrete View source #func_a_gamma ( amplitude : IFNumber , exponent : IFNumber , offset : IFNumber ) # DSL call for feFuncA with gamma View source #func_a_identity # DSL call for feFuncA with identity View source #func_a_linear ( slope : IFNumber , intercept : IFNumber ) # DSL call for feFuncA with linear View source #func_a_table ( table_values : Array ( IFNumber )) # DSL call for feFuncA with table View source #func_b ( & block : Celestine::Filter::ComponentTransfer::FuncB -> Celestine::Filter::ComponentTransfer::FuncB ) # DSL call for feFuncB View source #func_b_discrete ( table_values : Array ( IFNumber )) # DSL call for feFuncB with discrete View source #func_b_gamma ( amplitude : IFNumber , exponent : IFNumber , offset : IFNumber ) # DSL call for feFuncB with gamma View source #func_b_identity # DSL call for feFuncB with identity View source #func_b_linear ( slope : IFNumber , intercept : IFNumber ) # DSL call for feFuncB with linear View source #func_b_table ( table_values : Array ( IFNumber )) # DSL call for feFuncB with table View source #func_g ( & block : Celestine::Filter::ComponentTransfer::FuncG -> Celestine::Filter::ComponentTransfer::FuncG ) # DSL call for feFuncG View source #func_g_discrete ( table_values : Array ( IFNumber )) # DSL call for feFuncG with discrete View source #func_g_gamma ( amplitude : IFNumber , exponent : IFNumber , offset : IFNumber ) # DSL call for feFuncG with gamma View source #func_g_identity # DSL call for feFuncG with identity View source #func_g_linear ( slope : IFNumber , intercept : IFNumber ) # DSL call for feFuncG with linear View source #func_g_table ( table_values : Array ( IFNumber )) # DSL call for feFuncG with table View source #func_r ( & block : Celestine::Filter::ComponentTransfer::FuncR -> Celestine::Filter::ComponentTransfer::FuncR ) # DSL call for feFuncR View source #func_r_discrete ( table_values : Array ( IFNumber )) # DSL call for feFuncR with discrete View source #func_r_gamma ( amplitude : IFNumber , exponent : IFNumber , offset : IFNumber ) # DSL call for feFuncR with gamma View source #func_r_identity # DSL call for feFuncR with identity View source #func_r_linear ( slope : IFNumber , intercept : IFNumber ) # DSL call for feFuncR with linear View source #func_r_table ( table_values : Array ( IFNumber )) # DSL call for feFuncR with table View source #input : String? # The input source Mozilla SVG Docs View source #input= ( input : String? ) # The input source Mozilla SVG Docs View source module Celestine::Filter::ComponentTransfer::Attrs # Transfers color components Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # INPUT = \"in\" #","title":"ComponentTransfer"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer","text":"Transfers color components Mozilla SVG Docs","title":"ComponentTransfer"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#draw(io)","text":"Draws this component transfer filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_a(&)","text":"DSL call for feFuncA View source","title":"#func_a"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_a_discrete(table_values)","text":"DSL call for feFuncA with discrete View source","title":"#func_a_discrete"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_a_gamma(amplitude,exponent,offset)","text":"DSL call for feFuncA with gamma View source","title":"#func_a_gamma"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_a_identity","text":"DSL call for feFuncA with identity View source","title":"#func_a_identity"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_a_linear(slope,intercept)","text":"DSL call for feFuncA with linear View source","title":"#func_a_linear"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_a_table(table_values)","text":"DSL call for feFuncA with table View source","title":"#func_a_table"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_b(&)","text":"DSL call for feFuncB View source","title":"#func_b"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_b_discrete(table_values)","text":"DSL call for feFuncB with discrete View source","title":"#func_b_discrete"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_b_gamma(amplitude,exponent,offset)","text":"DSL call for feFuncB with gamma View source","title":"#func_b_gamma"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_b_identity","text":"DSL call for feFuncB with identity View source","title":"#func_b_identity"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_b_linear(slope,intercept)","text":"DSL call for feFuncB with linear View source","title":"#func_b_linear"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_b_table(table_values)","text":"DSL call for feFuncB with table View source","title":"#func_b_table"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_g(&)","text":"DSL call for feFuncG View source","title":"#func_g"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_g_discrete(table_values)","text":"DSL call for feFuncG with discrete View source","title":"#func_g_discrete"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_g_gamma(amplitude,exponent,offset)","text":"DSL call for feFuncG with gamma View source","title":"#func_g_gamma"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_g_identity","text":"DSL call for feFuncG with identity View source","title":"#func_g_identity"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_g_linear(slope,intercept)","text":"DSL call for feFuncG with linear View source","title":"#func_g_linear"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_g_table(table_values)","text":"DSL call for feFuncG with table View source","title":"#func_g_table"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_r(&)","text":"DSL call for feFuncR View source","title":"#func_r"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_r_discrete(table_values)","text":"DSL call for feFuncR with discrete View source","title":"#func_r_discrete"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_r_gamma(amplitude,exponent,offset)","text":"DSL call for feFuncR with gamma View source","title":"#func_r_gamma"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_r_identity","text":"DSL call for feFuncR with identity View source","title":"#func_r_identity"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_r_linear(slope,intercept)","text":"DSL call for feFuncR with linear View source","title":"#func_r_linear"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#func_r_table(table_values)","text":"DSL call for feFuncR with table View source","title":"#func_r_table"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#input","text":"The input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer#input=(input)","text":"The input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer::Attrs","text":"Transfers color components Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ComponentTransfer.html#Celestine::Filter::ComponentTransfer::Attrs::INPUT","text":"","title":"INPUT"},{"location":"Celestine/Filter/Composite.html","text":"class Celestine::Filter::Composite inherits Celestine::Filter::Basic # Composites two filter sources Mozilla SVG Docs How it works Constants # TAG = \"feComposite\" # Methods # #draw ( io : IO ) : Nil # Draws this composite filter to an IO View source #input : String? # The first input source Mozilla SVG Docs View source #input2 : String? # The second input source Mozilla SVG Docs View source #input2= ( input2 : String? ) # The second input source Mozilla SVG Docs View source #input= ( input : String? ) # The first input source Mozilla SVG Docs View source #k1 : IFNumber? # Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source #k1= ( k1 : IFNumber? ) # Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source #k2 : IFNumber? # Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source #k2= ( k2 : IFNumber? ) # Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source #k3 : IFNumber? # Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source #k3= ( k3 : IFNumber? ) # Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source #k4 : IFNumber? # Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source #k4= ( k4 : IFNumber? ) # Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source #operator : String? # The operation to apply Potential Values: over | in | out | atop | xor | lighter | arithmetic Mozilla SVG Docs View source #operator= ( operator : String? ) # The operation to apply Potential Values: over | in | out | atop | xor | lighter | arithmetic Mozilla SVG Docs View source module Celestine::Filter::Composite::Attrs # Composites two filter sources Mozilla SVG Docs How it works Included modules Celestine::Filter::Basic::Attrs Constants # INPUT = \"in\" # INPUT2 = \"in2\" # OPERATOR = \"operator\" #","title":"Composite"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite","text":"Composites two filter sources Mozilla SVG Docs How it works","title":"Composite"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#draw(io)","text":"Draws this composite filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#input","text":"The first input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#input2","text":"The second input source Mozilla SVG Docs View source","title":"#input2"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#input2=(input2)","text":"The second input source Mozilla SVG Docs View source","title":"#input2="},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#input=(input)","text":"The first input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#k1","text":"Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source","title":"#k1"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#k1=(k1)","text":"Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source","title":"#k1="},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#k2","text":"Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source","title":"#k2"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#k2=(k2)","text":"Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source","title":"#k2="},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#k3","text":"Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source","title":"#k3"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#k3=(k3)","text":"Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source","title":"#k3="},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#k4","text":"Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source","title":"#k4"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#k4=(k4)","text":"Used with the arithmetic operation. result = k1*i1*i2 + k2*i1 + k3*i2 + k4 Mozilla SVG Docs View source","title":"#k4="},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#operator","text":"The operation to apply Potential Values: over | in | out | atop | xor | lighter | arithmetic Mozilla SVG Docs View source","title":"#operator"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite#operator=(operator)","text":"The operation to apply Potential Values: over | in | out | atop | xor | lighter | arithmetic Mozilla SVG Docs View source","title":"#operator="},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite::Attrs","text":"Composites two filter sources Mozilla SVG Docs How it works","title":"Attrs"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite::Attrs::INPUT","text":"","title":"INPUT"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite::Attrs::INPUT2","text":"","title":"INPUT2"},{"location":"Celestine/Filter/Composite.html#Celestine::Filter::Composite::Attrs::OPERATOR","text":"","title":"OPERATOR"},{"location":"Celestine/Filter/DisplacementMap.html","text":"class Celestine::Filter::DisplacementMap inherits Celestine::Filter::Basic # Composites two filter sources Mozilla SVG Docs Constants # TAG = \"feDisplacementMap\" # Methods # #draw ( io : IO ) : Nil # Draws this displacement map to an IO View source #input : String? # The first input source Mozilla SVG Docs View source #input2 : String? # The second input source Mozilla SVG Docs View source #input2= ( input2 : String? ) # The second input source Mozilla SVG Docs View source #input= ( input : String? ) # The first input source Mozilla SVG Docs View source #scale : IFNumber? # Displacement factor to be used [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/scale View source #scale= ( scale : IFNumber? ) # Displacement factor to be used [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/scale View source #x_channel_selector : String? # Seems broken ,couldn't find a working example. Even mozilla's example was busted. Potential Values: R | G | B | A [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xChannelSelector View source #x_channel_selector= ( x_channel_selector : String? ) # Seems broken ,couldn't find a working example. Even mozilla's example was busted. Potential Values: R | G | B | A [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xChannelSelector View source #y_channel_selector : String? # Seems broken ,couldn't find a working example. Even mozilla's example was busted. Potential Values: R | G | B | A [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/yChannelSelector View source #y_channel_selector= ( y_channel_selector : String? ) # Seems broken ,couldn't find a working example. Even mozilla's example was busted. Potential Values: R | G | B | A [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/yChannelSelector View source module Celestine::Filter::DisplacementMap::Attrs # Composites two filter sources Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # INPUT = \"in\" # INPUT2 = \"in2\" # SCALE = \"scale\" # X_CHANNEL_SELECTOR = \"xChannelSelector\" # Y_CHANNEL_SELECTOR = \"yChannelSelector\" #","title":"DisplacementMap"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap","text":"Composites two filter sources Mozilla SVG Docs","title":"DisplacementMap"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#draw(io)","text":"Draws this displacement map to an IO View source","title":"#draw"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#input","text":"The first input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#input2","text":"The second input source Mozilla SVG Docs View source","title":"#input2"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#input2=(input2)","text":"The second input source Mozilla SVG Docs View source","title":"#input2="},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#input=(input)","text":"The first input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#scale","text":"Displacement factor to be used [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/scale View source","title":"#scale"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#scale=(scale)","text":"Displacement factor to be used [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/scale View source","title":"#scale="},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#x_channel_selector","text":"Seems broken ,couldn't find a working example. Even mozilla's example was busted. Potential Values: R | G | B | A [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xChannelSelector View source","title":"#x_channel_selector"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#x_channel_selector=(x_channel_selector)","text":"Seems broken ,couldn't find a working example. Even mozilla's example was busted. Potential Values: R | G | B | A [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xChannelSelector View source","title":"#x_channel_selector="},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#y_channel_selector","text":"Seems broken ,couldn't find a working example. Even mozilla's example was busted. Potential Values: R | G | B | A [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/yChannelSelector View source","title":"#y_channel_selector"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap#y_channel_selector=(y_channel_selector)","text":"Seems broken ,couldn't find a working example. Even mozilla's example was busted. Potential Values: R | G | B | A [Mozilla SVG Docs]( https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/yChannelSelector View source","title":"#y_channel_selector="},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap::Attrs","text":"Composites two filter sources Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap::Attrs::INPUT","text":"","title":"INPUT"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap::Attrs::INPUT2","text":"","title":"INPUT2"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap::Attrs::SCALE","text":"","title":"SCALE"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap::Attrs::X_CHANNEL_SELECTOR","text":"","title":"X_CHANNEL_SELECTOR"},{"location":"Celestine/Filter/DisplacementMap.html#Celestine::Filter::DisplacementMap::Attrs::Y_CHANNEL_SELECTOR","text":"","title":"Y_CHANNEL_SELECTOR"},{"location":"Celestine/Filter/DropShadow.html","text":"class Celestine::Filter::DropShadow inherits Celestine::Filter::Basic # Adds a drop shadow behind the object Mozilla SVG Docs Constants # TAG = \"feDropShadow\" # Methods # #draw ( io : IO ) : Nil # Draws this blend filter to an IO View source #dx : IFNumber? # How much to offset on the x-axis Mozilla SVG Docs #dx= ( dx : IFNumber? ) # How much to offset on the x-axis Mozilla SVG Docs #dx_units : String? # What kind of unit dx should use when rendering #dx_units= ( dx_units : String? ) # What kind of unit dx should use when rendering #dy : IFNumber? # How much to offset on the y-axis Mozilla SVG Docs #dy= ( dy : IFNumber? ) # How much to offset on the y-axis Mozilla SVG Docs #dy_units : String? # What kind of unit dy should use when rendering #dy_units= ( dy_units : String? ) # What kind of unit dy should use when rendering #input : String? # The input source Mozilla SVG Docs View source #input= ( input : String? ) # The input source Mozilla SVG Docs View source #standard_deviation : IFNumber? # The amount of bluring that should occur Mozilla SVG Docs #standard_deviation= ( standard_deviation : IFNumber? ) # The amount of bluring that should occur Mozilla SVG Docs #standard_deviation_units : String? # What kind of unit standard_deviation should use when rendering #standard_deviation_units= ( standard_deviation_units : String? ) # What kind of unit standard_deviation should use when rendering module Celestine::Filter::DropShadow::Attrs # Adds a drop shadow behind the object Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # COLOR = \"flood-color\" # DX = \"dx\" # DY = \"dy\" # INPUT = \"in\" # OPACITY = \"flood-opacity\" # STANDARD_DEVIATION = \"stdDeviation\" #","title":"DropShadow"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow","text":"Adds a drop shadow behind the object Mozilla SVG Docs","title":"DropShadow"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#draw(io)","text":"Draws this blend filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#dx","text":"How much to offset on the x-axis Mozilla SVG Docs","title":"#dx"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#dx=(dx)","text":"How much to offset on the x-axis Mozilla SVG Docs","title":"#dx="},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#dx_units","text":"What kind of unit dx should use when rendering","title":"#dx_units"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#dx_units=(dx_units)","text":"What kind of unit dx should use when rendering","title":"#dx_units="},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#dy","text":"How much to offset on the y-axis Mozilla SVG Docs","title":"#dy"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#dy=(dy)","text":"How much to offset on the y-axis Mozilla SVG Docs","title":"#dy="},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#dy_units","text":"What kind of unit dy should use when rendering","title":"#dy_units"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#dy_units=(dy_units)","text":"What kind of unit dy should use when rendering","title":"#dy_units="},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#input","text":"The input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#input=(input)","text":"The input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#standard_deviation","text":"The amount of bluring that should occur Mozilla SVG Docs","title":"#standard_deviation"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#standard_deviation=(standard_deviation)","text":"The amount of bluring that should occur Mozilla SVG Docs","title":"#standard_deviation="},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#standard_deviation_units","text":"What kind of unit standard_deviation should use when rendering","title":"#standard_deviation_units"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow#standard_deviation_units=(standard_deviation_units)","text":"What kind of unit standard_deviation should use when rendering","title":"#standard_deviation_units="},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::Attrs","text":"Adds a drop shadow behind the object Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::Attrs::COLOR","text":"","title":"COLOR"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::Attrs::DX","text":"","title":"DX"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::Attrs::DY","text":"","title":"DY"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::Attrs::INPUT","text":"","title":"INPUT"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::Attrs::OPACITY","text":"","title":"OPACITY"},{"location":"Celestine/Filter/DropShadow.html#Celestine::Filter::DropShadow::Attrs::STANDARD_DEVIATION","text":"","title":"STANDARD_DEVIATION"},{"location":"Celestine/Filter/Flood.html","text":"class Celestine::Filter::Flood inherits Celestine::Filter::Basic # Composites two filter sources Mozilla SVG Docs Constants # TAG = \"feFlood\" # Methods # #color : String? # The color of the flood fill Mozilla SVG Docs TODO: Change this to color View source #color= ( color : String? ) # The color of the flood fill Mozilla SVG Docs TODO: Change this to color View source #draw ( io : IO ) : Nil # Draws this flood filter to an IO View source #opacity : IFNumber? # The opacity of the flood fill Mozilla SVG Docs TODO: Change this to opacity View source #opacity= ( opacity : IFNumber? ) # The opacity of the flood fill Mozilla SVG Docs TODO: Change this to opacity View source module Celestine::Filter::Flood::Attrs # Composites two filter sources Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # COLOR = \"flood-color\" # OPACITY = \"flood-opacity\" #","title":"Flood"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood","text":"Composites two filter sources Mozilla SVG Docs","title":"Flood"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood#color","text":"The color of the flood fill Mozilla SVG Docs TODO: Change this to color View source","title":"#color"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood#color=(color)","text":"The color of the flood fill Mozilla SVG Docs TODO: Change this to color View source","title":"#color="},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood#draw(io)","text":"Draws this flood filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood#opacity","text":"The opacity of the flood fill Mozilla SVG Docs TODO: Change this to opacity View source","title":"#opacity"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood#opacity=(opacity)","text":"The opacity of the flood fill Mozilla SVG Docs TODO: Change this to opacity View source","title":"#opacity="},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood::Attrs","text":"Composites two filter sources Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood::Attrs::COLOR","text":"","title":"COLOR"},{"location":"Celestine/Filter/Flood.html#Celestine::Filter::Flood::Attrs::OPACITY","text":"","title":"OPACITY"},{"location":"Celestine/Filter/Image.html","text":"class Celestine::Filter::Image inherits Celestine::Filter::Basic # Creates a source from an image href. Mozilla SVG Docs Constants # TAG = \"feImage\" # Methods # #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #href : String? # The URI of the image Mozilla SVG Docs View source #href= ( href : String? ) # The URI of the image Mozilla SVG Docs View source module Celestine::Filter::Image::Attrs # Creates a source from an image href. Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs","title":"Image"},{"location":"Celestine/Filter/Image.html#Celestine::Filter::Image","text":"Creates a source from an image href. Mozilla SVG Docs","title":"Image"},{"location":"Celestine/Filter/Image.html#Celestine::Filter::Image-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Image.html#Celestine::Filter::Image::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Image.html#Celestine::Filter::Image-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Image.html#Celestine::Filter::Image#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Filter/Image.html#Celestine::Filter::Image#href","text":"The URI of the image Mozilla SVG Docs View source","title":"#href"},{"location":"Celestine/Filter/Image.html#Celestine::Filter::Image#href=(href)","text":"The URI of the image Mozilla SVG Docs View source","title":"#href="},{"location":"Celestine/Filter/Image.html#Celestine::Filter::Image::Attrs","text":"Creates a source from an image href. Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/Merge.html","text":"class Celestine::Filter::Merge inherits Celestine::Filter::Basic # Merges one or more filters into a single result Mozilla SVG Docs feMergeNode Constants # NODE_TAG = \"feMergeNode\" # TAG = \"feMerge\" # Methods # #add_node ( filter_name ) # Adds a new feMergeNode to this filter. View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source module Celestine::Filter::Merge::Attrs # Merges one or more filters into a single result Mozilla SVG Docs feMergeNode Included modules Celestine::Filter::Basic::Attrs","title":"Merge"},{"location":"Celestine/Filter/Merge.html#Celestine::Filter::Merge","text":"Merges one or more filters into a single result Mozilla SVG Docs feMergeNode","title":"Merge"},{"location":"Celestine/Filter/Merge.html#Celestine::Filter::Merge-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Merge.html#Celestine::Filter::Merge::NODE_TAG","text":"","title":"NODE_TAG"},{"location":"Celestine/Filter/Merge.html#Celestine::Filter::Merge::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Merge.html#Celestine::Filter::Merge-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Merge.html#Celestine::Filter::Merge#add_node(filter_name)","text":"Adds a new feMergeNode to this filter. View source","title":"#add_node"},{"location":"Celestine/Filter/Merge.html#Celestine::Filter::Merge#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Filter/Merge.html#Celestine::Filter::Merge::Attrs","text":"Merges one or more filters into a single result Mozilla SVG Docs feMergeNode","title":"Attrs"},{"location":"Celestine/Filter/Morphology.html","text":"class Celestine::Filter::Morphology inherits Celestine::Filter::Basic # Dilates or erodes it's source. Mozilla SVG Docs Constants # TAG = \"feMorphology\" # Methods # #draw ( io : IO ) : Nil # Draws this morphology filter to an IO View source #input : String? # The first input source Mozilla SVG Docs View source #input= ( input : String? ) # The first input source Mozilla SVG Docs View source #operator : String? # The amount to dilate or erode Potential Values: dilate | erode Mozilla SVG Docs View source #operator= ( operator : String? ) # The amount to dilate or erode Potential Values: dilate | erode Mozilla SVG Docs View source #radius : IFNumber? # The amount to dilate or erode Mozilla SVG Docs #radius= ( radius : IFNumber? ) # The amount to dilate or erode Mozilla SVG Docs #radius_units : String? # What kind of unit radius should use when rendering #radius_units= ( radius_units : String? ) # What kind of unit radius should use when rendering module Celestine::Filter::Morphology::Attrs # Dilates or erodes it's source. Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # OPERATOR = \"operator\" # RADIUS = \"radius\" #","title":"Morphology"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology","text":"Dilates or erodes it's source. Mozilla SVG Docs","title":"Morphology"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#draw(io)","text":"Draws this morphology filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#input","text":"The first input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#input=(input)","text":"The first input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#operator","text":"The amount to dilate or erode Potential Values: dilate | erode Mozilla SVG Docs View source","title":"#operator"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#operator=(operator)","text":"The amount to dilate or erode Potential Values: dilate | erode Mozilla SVG Docs View source","title":"#operator="},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#radius","text":"The amount to dilate or erode Mozilla SVG Docs","title":"#radius"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#radius=(radius)","text":"The amount to dilate or erode Mozilla SVG Docs","title":"#radius="},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#radius_units","text":"What kind of unit radius should use when rendering","title":"#radius_units"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology#radius_units=(radius_units)","text":"What kind of unit radius should use when rendering","title":"#radius_units="},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology::Attrs","text":"Dilates or erodes it's source. Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology::Attrs::OPERATOR","text":"","title":"OPERATOR"},{"location":"Celestine/Filter/Morphology.html#Celestine::Filter::Morphology::Attrs::RADIUS","text":"","title":"RADIUS"},{"location":"Celestine/Filter/Offset.html","text":"class Celestine::Filter::Offset inherits Celestine::Filter::Basic # Moves the output to another location Mozilla SVG Docs Constants # TAG = \"feOffset\" # Methods # #draw ( io : IO ) : Nil # Draws this offset filter to an IO View source #dx : IFNumber? # How much to offset on the x-axis Mozilla SVG Docs #dx= ( dx : IFNumber? ) # How much to offset on the x-axis Mozilla SVG Docs #dx_units : String? # What kind of unit dx should use when rendering #dx_units= ( dx_units : String? ) # What kind of unit dx should use when rendering #dy : IFNumber? # How much to offset on the y-axis Mozilla SVG Docs #dy= ( dy : IFNumber? ) # How much to offset on the y-axis Mozilla SVG Docs #dy_units : String? # What kind of unit dy should use when rendering #dy_units= ( dy_units : String? ) # What kind of unit dy should use when rendering #input : String? # The first input source Mozilla SVG Docs View source #input= ( input : String? ) # The first input source Mozilla SVG Docs View source module Celestine::Filter::Offset::Attrs # Moves the output to another location Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs Constants # DX = \"dx\" # DY = \"dy\" #","title":"Offset"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset","text":"Moves the output to another location Mozilla SVG Docs","title":"Offset"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#draw(io)","text":"Draws this offset filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#dx","text":"How much to offset on the x-axis Mozilla SVG Docs","title":"#dx"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#dx=(dx)","text":"How much to offset on the x-axis Mozilla SVG Docs","title":"#dx="},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#dx_units","text":"What kind of unit dx should use when rendering","title":"#dx_units"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#dx_units=(dx_units)","text":"What kind of unit dx should use when rendering","title":"#dx_units="},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#dy","text":"How much to offset on the y-axis Mozilla SVG Docs","title":"#dy"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#dy=(dy)","text":"How much to offset on the y-axis Mozilla SVG Docs","title":"#dy="},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#dy_units","text":"What kind of unit dy should use when rendering","title":"#dy_units"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#dy_units=(dy_units)","text":"What kind of unit dy should use when rendering","title":"#dy_units="},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#input","text":"The first input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset#input=(input)","text":"The first input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset::Attrs","text":"Moves the output to another location Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset::Attrs::DX","text":"","title":"DX"},{"location":"Celestine/Filter/Offset.html#Celestine::Filter::Offset::Attrs::DY","text":"","title":"DY"},{"location":"Celestine/Filter/SpecularLighting.html","text":"class Celestine::Filter::SpecularLighting inherits Celestine::Filter::Basic # Shades an object using specular lighting using the alpha channel as a bump map. Mozilla SVG Docs fePointLight feSpotLight feDistantLight Constants # DISTANT_NODE_TAG = \"feDistantLight\" # POINT_NODE_TAG = \"fePointLight\" # SPOT_NODE_TAG = \"feSpotLight\" # TAG = \"feSpecularLighting\" # Methods # #add_distant_light ( azimuth , elevation ) # View source #add_point_light ( x , y , z ) # View source #add_spot_light ( x = nil , y = nil , z = nil , points_at_x = nil , points_at_y = nil , points_at_z = nil , specular_exponent = nil , limiting_cone_angle = nil ) # View source #constant : IFNumber? # Mozilla SVG Docs View source #constant= ( constant : IFNumber? ) # Mozilla SVG Docs View source #draw ( io : IO ) : Nil # Draws this speculuar lighting filter to an IO View source #exponent : IFNumber? # Mozilla SVG Docs View source #exponent= ( exponent : IFNumber? ) # Mozilla SVG Docs View source #input : String? # The first input source Mozilla SVG Docs View source #input= ( input : String? ) # The first input source Mozilla SVG Docs View source #lighting_color : String? # The color of the lighting Mozilla SVG Docs View source #lighting_color= ( lighting_color : String? ) # The color of the lighting Mozilla SVG Docs View source #surface_scale : IFNumber? # The scale of the surface. Mozilla SVG Docs View source #surface_scale= ( surface_scale : IFNumber? ) # The scale of the surface. Mozilla SVG Docs View source module Celestine::Filter::SpecularLighting::Attrs # Shades an object using specular lighting using the alpha channel as a bump map. Mozilla SVG Docs fePointLight feSpotLight feDistantLight Included modules Celestine::Filter::Basic::Attrs","title":"SpecularLighting"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting","text":"Shades an object using specular lighting using the alpha channel as a bump map. Mozilla SVG Docs fePointLight feSpotLight feDistantLight","title":"SpecularLighting"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting::DISTANT_NODE_TAG","text":"","title":"DISTANT_NODE_TAG"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting::POINT_NODE_TAG","text":"","title":"POINT_NODE_TAG"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting::SPOT_NODE_TAG","text":"","title":"SPOT_NODE_TAG"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#add_distant_light(azimuth,elevation)","text":"View source","title":"#add_distant_light"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#add_point_light(x,y,z)","text":"View source","title":"#add_point_light"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#add_spot_light(x,y,z,points_at_x,points_at_y,points_at_z,specular_exponent,limiting_cone_angle)","text":"View source","title":"#add_spot_light"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#constant","text":"Mozilla SVG Docs View source","title":"#constant"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#constant=(constant)","text":"Mozilla SVG Docs View source","title":"#constant="},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#draw(io)","text":"Draws this speculuar lighting filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#exponent","text":"Mozilla SVG Docs View source","title":"#exponent"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#exponent=(exponent)","text":"Mozilla SVG Docs View source","title":"#exponent="},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#input","text":"The first input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#input=(input)","text":"The first input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#lighting_color","text":"The color of the lighting Mozilla SVG Docs View source","title":"#lighting_color"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#lighting_color=(lighting_color)","text":"The color of the lighting Mozilla SVG Docs View source","title":"#lighting_color="},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#surface_scale","text":"The scale of the surface. Mozilla SVG Docs View source","title":"#surface_scale"},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting#surface_scale=(surface_scale)","text":"The scale of the surface. Mozilla SVG Docs View source","title":"#surface_scale="},{"location":"Celestine/Filter/SpecularLighting.html#Celestine::Filter::SpecularLighting::Attrs","text":"Shades an object using specular lighting using the alpha channel as a bump map. Mozilla SVG Docs fePointLight feSpotLight feDistantLight","title":"Attrs"},{"location":"Celestine/Filter/Tile.html","text":"class Celestine::Filter::Tile inherits Celestine::Filter::Basic # Fill a target rectangle with a repeated, tiled pattern of an input image Mozilla SVG Docs Constants # TAG = \"feTile\" # Methods # #draw ( io : IO ) : Nil # Draws this tile filter to an IO View source #input : String? # The first input source Mozilla SVG Docs View source #input= ( input : String? ) # The first input source Mozilla SVG Docs View source module Celestine::Filter::Tile::Attrs # Fill a target rectangle with a repeated, tiled pattern of an input image Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs","title":"Tile"},{"location":"Celestine/Filter/Tile.html#Celestine::Filter::Tile","text":"Fill a target rectangle with a repeated, tiled pattern of an input image Mozilla SVG Docs","title":"Tile"},{"location":"Celestine/Filter/Tile.html#Celestine::Filter::Tile-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Tile.html#Celestine::Filter::Tile::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Tile.html#Celestine::Filter::Tile-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Tile.html#Celestine::Filter::Tile#draw(io)","text":"Draws this tile filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/Tile.html#Celestine::Filter::Tile#input","text":"The first input source Mozilla SVG Docs View source","title":"#input"},{"location":"Celestine/Filter/Tile.html#Celestine::Filter::Tile#input=(input)","text":"The first input source Mozilla SVG Docs View source","title":"#input="},{"location":"Celestine/Filter/Tile.html#Celestine::Filter::Tile::Attrs","text":"Fill a target rectangle with a repeated, tiled pattern of an input image Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/Turbulence.html","text":"class Celestine::Filter::Turbulence inherits Celestine::Filter::Basic # Merges one or mopre filters into a single result Mozilla SVG Docs Constants # TAG = \"feTurbulence\" # Methods # #base_freq : IFNumber? # The base frequency parameter for the noise function Mozilla SVG Docs View source #base_freq= ( base_freq : IFNumber? ) # The base frequency parameter for the noise function Mozilla SVG Docs View source #draw ( io : IO ) : Nil # Draws this turbulence filter to an IO View source #num_octaves : IFNumber? # The number of octaves for the noise function Mozilla SVG Docs View source #num_octaves= ( num_octaves : IFNumber? ) # The number of octaves for the noise function Mozilla SVG Docs View source #seed : IFNumber? # The seed for the noise function Mozilla SVG Docs View source #seed= ( seed : IFNumber? ) # The seed for the noise function Mozilla SVG Docs View source #stitch_tiles : String? # Defines how the Perlin Noise tiles behave at the border Pontential Values: noStitch | stitch Mozilla SVG Docs View source #stitch_tiles= ( stitch_tiles : String? ) # Defines how the Perlin Noise tiles behave at the border Pontential Values: noStitch | stitch Mozilla SVG Docs View source #type : String? # Type of noise function Pontential Values: fractalNoise | turbulence Mozilla SVG Docs View source #type= ( type : String? ) # Type of noise function Pontential Values: fractalNoise | turbulence Mozilla SVG Docs View source module Celestine::Filter::Turbulence::Attrs # Merges one or mopre filters into a single result Mozilla SVG Docs Included modules Celestine::Filter::Basic::Attrs","title":"Turbulence"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence","text":"Merges one or mopre filters into a single result Mozilla SVG Docs","title":"Turbulence"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#base_freq","text":"The base frequency parameter for the noise function Mozilla SVG Docs View source","title":"#base_freq"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#base_freq=(base_freq)","text":"The base frequency parameter for the noise function Mozilla SVG Docs View source","title":"#base_freq="},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#draw(io)","text":"Draws this turbulence filter to an IO View source","title":"#draw"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#num_octaves","text":"The number of octaves for the noise function Mozilla SVG Docs View source","title":"#num_octaves"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#num_octaves=(num_octaves)","text":"The number of octaves for the noise function Mozilla SVG Docs View source","title":"#num_octaves="},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#seed","text":"The seed for the noise function Mozilla SVG Docs View source","title":"#seed"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#seed=(seed)","text":"The seed for the noise function Mozilla SVG Docs View source","title":"#seed="},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#stitch_tiles","text":"Defines how the Perlin Noise tiles behave at the border Pontential Values: noStitch | stitch Mozilla SVG Docs View source","title":"#stitch_tiles"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#stitch_tiles=(stitch_tiles)","text":"Defines how the Perlin Noise tiles behave at the border Pontential Values: noStitch | stitch Mozilla SVG Docs View source","title":"#stitch_tiles="},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#type","text":"Type of noise function Pontential Values: fractalNoise | turbulence Mozilla SVG Docs View source","title":"#type"},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence#type=(type)","text":"Type of noise function Pontential Values: fractalNoise | turbulence Mozilla SVG Docs View source","title":"#type="},{"location":"Celestine/Filter/Turbulence.html#Celestine::Filter::Turbulence::Attrs","text":"Merges one or mopre filters into a single result Mozilla SVG Docs","title":"Attrs"},{"location":"Celestine/Filter/ComponentTransfer/Func.html","text":"abstract class Celestine::Filter::ComponentTransfer::Func inherits Celestine::Drawable # Basic class for Celestine::Filter::ComponentTransfer inner elements. Shouldn't be needed to be used for anything else. Direct known subclasses Celestine::Filter::ComponentTransfer::FuncA Celestine::Filter::ComponentTransfer::FuncB Celestine::Filter::ComponentTransfer::FuncG Celestine::Filter::ComponentTransfer::FuncR Constants # TAG = \"WARNING FUNC NOT MEANT TO BE USED!\" # Methods # #amplitude : IFNumber? # View source #amplitude= ( amplitude : IFNumber? ) # View source #exponent : IFNumber? # View source #exponent= ( exponent : IFNumber? ) # View source #intercept : IFNumber? # View source #intercept= ( intercept : IFNumber? ) # View source #offset : IFNumber? # View source #offset= ( offset : IFNumber? ) # View source #slope : IFNumber? # View source #slope= ( slope : IFNumber? ) # View source #table_values : Array ( IFNumber ) # View source #table_values= ( table_values : Array ( IFNumber )) # View source #type : String? # View source #type= ( type : String? ) # View source Macros # add_draw # View source module Celestine::Filter::ComponentTransfer::Func::Attrs # Constants # INPUT = \"in\" #","title":"Func"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func","text":"Basic class for Celestine::Filter::ComponentTransfer inner elements. Shouldn't be needed to be used for anything else.","title":"Func"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#amplitude","text":"View source","title":"#amplitude"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#amplitude=(amplitude)","text":"View source","title":"#amplitude="},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#exponent","text":"View source","title":"#exponent"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#exponent=(exponent)","text":"View source","title":"#exponent="},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#intercept","text":"View source","title":"#intercept"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#intercept=(intercept)","text":"View source","title":"#intercept="},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#offset","text":"View source","title":"#offset"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#offset=(offset)","text":"View source","title":"#offset="},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#slope","text":"View source","title":"#slope"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#slope=(slope)","text":"View source","title":"#slope="},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#table_values","text":"View source","title":"#table_values"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#table_values=(table_values)","text":"View source","title":"#table_values="},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#type","text":"View source","title":"#type"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func#type=(type)","text":"View source","title":"#type="},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func-macros","text":"","title":"Macros"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func:add_draw","text":"View source","title":"add_draw"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ComponentTransfer/Func.html#Celestine::Filter::ComponentTransfer::Func::Attrs::INPUT","text":"","title":"INPUT"},{"location":"Celestine/Filter/ComponentTransfer/FuncA.html","text":"class Celestine::Filter::ComponentTransfer::FuncA inherits Celestine::Filter::ComponentTransfer::Func # Constants # TAG = \"feFuncA\" # Methods # #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source","title":"FuncA"},{"location":"Celestine/Filter/ComponentTransfer/FuncA.html#Celestine::Filter::ComponentTransfer::FuncA","text":"","title":"FuncA"},{"location":"Celestine/Filter/ComponentTransfer/FuncA.html#Celestine::Filter::ComponentTransfer::FuncA-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ComponentTransfer/FuncA.html#Celestine::Filter::ComponentTransfer::FuncA::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/ComponentTransfer/FuncA.html#Celestine::Filter::ComponentTransfer::FuncA-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/ComponentTransfer/FuncA.html#Celestine::Filter::ComponentTransfer::FuncA#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Filter/ComponentTransfer/FuncB.html","text":"class Celestine::Filter::ComponentTransfer::FuncB inherits Celestine::Filter::ComponentTransfer::Func # Constants # TAG = \"feFuncB\" # Methods # #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source","title":"FuncB"},{"location":"Celestine/Filter/ComponentTransfer/FuncB.html#Celestine::Filter::ComponentTransfer::FuncB","text":"","title":"FuncB"},{"location":"Celestine/Filter/ComponentTransfer/FuncB.html#Celestine::Filter::ComponentTransfer::FuncB-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ComponentTransfer/FuncB.html#Celestine::Filter::ComponentTransfer::FuncB::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/ComponentTransfer/FuncB.html#Celestine::Filter::ComponentTransfer::FuncB-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/ComponentTransfer/FuncB.html#Celestine::Filter::ComponentTransfer::FuncB#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Filter/ComponentTransfer/FuncG.html","text":"class Celestine::Filter::ComponentTransfer::FuncG inherits Celestine::Filter::ComponentTransfer::Func # Constants # TAG = \"feFuncG\" # Methods # #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source","title":"FuncG"},{"location":"Celestine/Filter/ComponentTransfer/FuncG.html#Celestine::Filter::ComponentTransfer::FuncG","text":"","title":"FuncG"},{"location":"Celestine/Filter/ComponentTransfer/FuncG.html#Celestine::Filter::ComponentTransfer::FuncG-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ComponentTransfer/FuncG.html#Celestine::Filter::ComponentTransfer::FuncG::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/ComponentTransfer/FuncG.html#Celestine::Filter::ComponentTransfer::FuncG-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/ComponentTransfer/FuncG.html#Celestine::Filter::ComponentTransfer::FuncG#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Filter/ComponentTransfer/FuncR.html","text":"class Celestine::Filter::ComponentTransfer::FuncR inherits Celestine::Filter::ComponentTransfer::Func # Constants # TAG = \"feFuncR\" # Methods # #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source","title":"FuncR"},{"location":"Celestine/Filter/ComponentTransfer/FuncR.html#Celestine::Filter::ComponentTransfer::FuncR","text":"","title":"FuncR"},{"location":"Celestine/Filter/ComponentTransfer/FuncR.html#Celestine::Filter::ComponentTransfer::FuncR-constants","text":"","title":"Constants"},{"location":"Celestine/Filter/ComponentTransfer/FuncR.html#Celestine::Filter::ComponentTransfer::FuncR::TAG","text":"","title":"TAG"},{"location":"Celestine/Filter/ComponentTransfer/FuncR.html#Celestine::Filter::ComponentTransfer::FuncR-methods","text":"","title":"Methods"},{"location":"Celestine/Filter/ComponentTransfer/FuncR.html#Celestine::Filter::ComponentTransfer::FuncR#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Gradient/Linear.html","text":"class Celestine::Gradient::Linear inherits Celestine::Gradient # Constants # TAG = \"linearGradient\" # Methods # #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #x1 : IFNumber? # #x1= ( x1 : IFNumber? ) # #x1_units : String? # What kind of unit x1 should use when rendering #x1_units= ( x1_units : String? ) # What kind of unit x1 should use when rendering #x2 : IFNumber? # #x2= ( x2 : IFNumber? ) # #x2_units : String? # What kind of unit x2 should use when rendering #x2_units= ( x2_units : String? ) # What kind of unit x2 should use when rendering #y1 : IFNumber? # #y1= ( y1 : IFNumber? ) # #y1_units : String? # What kind of unit y1 should use when rendering #y1_units= ( y1_units : String? ) # What kind of unit y1 should use when rendering #y2 : IFNumber? # #y2= ( y2 : IFNumber? ) # #y2_units : String? # What kind of unit y2 should use when rendering #y2_units= ( y2_units : String? ) # What kind of unit y2 should use when rendering module Celestine::Gradient::Linear::Attrs # Constants # X1 = \"x1\" # X2 = \"x2\" # Y1 = \"y1\" # Y2 = \"y2\" #","title":"Linear"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear","text":"","title":"Linear"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear-constants","text":"","title":"Constants"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear::TAG","text":"","title":"TAG"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear-methods","text":"","title":"Methods"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#x1","text":"","title":"#x1"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#x1=(x1)","text":"","title":"#x1="},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#x1_units","text":"What kind of unit x1 should use when rendering","title":"#x1_units"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#x1_units=(x1_units)","text":"What kind of unit x1 should use when rendering","title":"#x1_units="},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#x2","text":"","title":"#x2"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#x2=(x2)","text":"","title":"#x2="},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#x2_units","text":"What kind of unit x2 should use when rendering","title":"#x2_units"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#x2_units=(x2_units)","text":"What kind of unit x2 should use when rendering","title":"#x2_units="},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#y1","text":"","title":"#y1"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#y1=(y1)","text":"","title":"#y1="},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#y1_units","text":"What kind of unit y1 should use when rendering","title":"#y1_units"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#y1_units=(y1_units)","text":"What kind of unit y1 should use when rendering","title":"#y1_units="},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#y2","text":"","title":"#y2"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#y2=(y2)","text":"","title":"#y2="},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#y2_units","text":"What kind of unit y2 should use when rendering","title":"#y2_units"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear#y2_units=(y2_units)","text":"What kind of unit y2 should use when rendering","title":"#y2_units="},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear::Attrs::X1","text":"","title":"X1"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear::Attrs::X2","text":"","title":"X2"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear::Attrs::Y1","text":"","title":"Y1"},{"location":"Celestine/Gradient/Linear.html#Celestine::Gradient::Linear::Attrs::Y2","text":"","title":"Y2"},{"location":"Celestine/Gradient/Radial.html","text":"class Celestine::Gradient::Radial inherits Celestine::Gradient # Included modules Celestine::Modules::CPosition Constants # TAG = \"radialGradient\" # Methods # #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #radius : IFNumber? # #radius= ( radius : IFNumber? ) # #radius_units : String? # What kind of unit radius should use when rendering #radius_units= ( radius_units : String? ) # What kind of unit radius should use when rendering #start_radius : IFNumber? # #start_radius= ( start_radius : IFNumber? ) # #start_radius_units : String? # What kind of unit start_radius should use when rendering #start_radius_units= ( start_radius_units : String? ) # What kind of unit start_radius should use when rendering #start_x : IFNumber? # #start_x= ( start_x : IFNumber? ) # #start_x_units : String? # What kind of unit start_x should use when rendering #start_x_units= ( start_x_units : String? ) # What kind of unit start_x should use when rendering #start_y : IFNumber? # #start_y= ( start_y : IFNumber? ) # #start_y_units : String? # What kind of unit start_y should use when rendering #start_y_units= ( start_y_units : String? ) # What kind of unit start_y should use when rendering module Celestine::Gradient::Radial::Attrs # Included modules Celestine::Modules::CPosition::Attrs","title":"Radial"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial","text":"","title":"Radial"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial-constants","text":"","title":"Constants"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial::TAG","text":"","title":"TAG"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial-methods","text":"","title":"Methods"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#radius","text":"","title":"#radius"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#radius=(radius)","text":"","title":"#radius="},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#radius_units","text":"What kind of unit radius should use when rendering","title":"#radius_units"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#radius_units=(radius_units)","text":"What kind of unit radius should use when rendering","title":"#radius_units="},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_radius","text":"","title":"#start_radius"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_radius=(start_radius)","text":"","title":"#start_radius="},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_radius_units","text":"What kind of unit start_radius should use when rendering","title":"#start_radius_units"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_radius_units=(start_radius_units)","text":"What kind of unit start_radius should use when rendering","title":"#start_radius_units="},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_x","text":"","title":"#start_x"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_x=(start_x)","text":"","title":"#start_x="},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_x_units","text":"What kind of unit start_x should use when rendering","title":"#start_x_units"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_x_units=(start_x_units)","text":"What kind of unit start_x should use when rendering","title":"#start_x_units="},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_y","text":"","title":"#start_y"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_y=(start_y)","text":"","title":"#start_y="},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_y_units","text":"What kind of unit start_y should use when rendering","title":"#start_y_units"},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial#start_y_units=(start_y_units)","text":"What kind of unit start_y should use when rendering","title":"#start_y_units="},{"location":"Celestine/Gradient/Radial.html#Celestine::Gradient::Radial::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Gradient/Stop.html","text":"class Celestine::Gradient::Stop inherits Celestine::Drawable # Included modules Celestine::Modules::Animate Constants # TAG = \"stop\" # Methods # #color : String? # View source #color= ( color : String? ) # View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #offset : IFNumber? # #offset= ( offset : IFNumber? ) # #offset_units : String? # What kind of unit offset should use when rendering #offset_units= ( offset_units : String? ) # What kind of unit offset should use when rendering #opacity : IFNumber? # View source #opacity= ( opacity : IFNumber? ) # View source module Celestine::Gradient::Stop::Attrs # Constants # COLOR = \"stop-color\" # OFFSET = \"offset\" # OPACITY = \"stop-opacity\" #","title":"Stop"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop","text":"","title":"Stop"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop-constants","text":"","title":"Constants"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop::TAG","text":"","title":"TAG"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop-methods","text":"","title":"Methods"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#color","text":"View source","title":"#color"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#color=(color)","text":"View source","title":"#color="},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#offset","text":"","title":"#offset"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#offset=(offset)","text":"","title":"#offset="},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#offset_units","text":"What kind of unit offset should use when rendering","title":"#offset_units"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#offset_units=(offset_units)","text":"What kind of unit offset should use when rendering","title":"#offset_units="},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#opacity","text":"View source","title":"#opacity"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop#opacity=(opacity)","text":"View source","title":"#opacity="},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop::Attrs::COLOR","text":"","title":"COLOR"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop::Attrs::OFFSET","text":"","title":"OFFSET"},{"location":"Celestine/Gradient/Stop.html#Celestine::Gradient::Stop::Attrs::OPACITY","text":"","title":"OPACITY"},{"location":"Celestine/Meta/Context.html","text":"module Celestine::Meta::Context # Hold context information for the DSL","title":"Context"},{"location":"Celestine/Meta/Context.html#Celestine::Meta::Context","text":"Hold context information for the DSL","title":"Context"},{"location":"Celestine/Meta/Context/Methods.html","text":"module Celestine::Meta::Context::Methods # Holds all the context methods to be included in DSL classes like Context, Group, and Mask. This creates all the methods that can be used inside the draw block, like circle or group or use . Direct including types Celestine::Anchor Celestine::Group Celestine::Marker Celestine::Mask Celestine::Pattern Celestine::Svg Methods # #<< ( drawable : Celestine::Drawable ) # Adds a new drawable to this context's objects View source #use ( id : String ) # Reuses an element defined using define: true by id View source #use ( drawable : Celestine::Drawable ) # Reuses an element defined using define: true View source #use ( drawable : Celestine::Drawable , & block : Celestine::Use -> Celestine::Use ) # Reuses an element defined using define: true and then opens a block with that object for configuring View source #use ( id : String , & block : Celestine::Use -> Celestine::Use ) # Reuses an element defined using define: true by id and then opens a block with that object for configuring View source #use ( & block : Celestine::Use -> Celestine::Use ) # Reuses an element defined using define: true and then opens a block with that object for configuring View source","title":"Methods"},{"location":"Celestine/Meta/Context/Methods.html#Celestine::Meta::Context::Methods","text":"Holds all the context methods to be included in DSL classes like Context, Group, and Mask. This creates all the methods that can be used inside the draw block, like circle or group or use .","title":"Methods"},{"location":"Celestine/Meta/Context/Methods.html#Celestine::Meta::Context::Methods-methods","text":"","title":"Methods"},{"location":"Celestine/Meta/Context/Methods.html#Celestine::Meta::Context::Methods#<<(drawable)","text":"Adds a new drawable to this context's objects View source","title":"#&lt;&lt;"},{"location":"Celestine/Meta/Context/Methods.html#Celestine::Meta::Context::Methods#use(id)","text":"Reuses an element defined using define: true by id View source","title":"#use"},{"location":"Celestine/Modules/Animate.html","text":"module Celestine::Modules::Animate # Gives drawables access to the animate DSL Direct including types Celestine::Anchor Celestine::Animate Celestine::Animate::Motion Celestine::Circle Celestine::Ellipse Celestine::Filter Celestine::Filter::Basic Celestine::Gradient Celestine::Gradient::Stop Celestine::Group Celestine::Image Celestine::Marker Celestine::Mask Celestine::Path Celestine::Pattern Celestine::Rectangle Celestine::Svg Celestine::Text Celestine::Use Methods # #animate ( & block : Proc ( Celestine::Animate , Nil )) # Adds a Celestine::Animate to the calling drawable's inner elements. View source","title":"Animate"},{"location":"Celestine/Modules/Animate.html#Celestine::Modules::Animate","text":"Gives drawables access to the animate DSL","title":"Animate"},{"location":"Celestine/Modules/Animate.html#Celestine::Modules::Animate-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Animate.html#Celestine::Modules::Animate#animate(&)","text":"Adds a Celestine::Animate to the calling drawable's inner elements. View source","title":"#animate"},{"location":"Celestine/Modules/Body.html","text":"module Celestine::Modules::Body # Gives drawables access to basic X, Y, W, H paramaters Included modules Celestine::Modules::Position Direct including types Celestine::Filter Celestine::Filter::Basic Celestine::Image Celestine::Mask Celestine::Pattern Celestine::Rectangle Celestine::Svg Celestine::Use Methods # #body_attribute ( io ) # Draws the body and position attributes to an IO View source #height : IFNumber? # #height= ( height : IFNumber? ) # #height_units : String? # What kind of unit height should use when rendering #height_units= ( height_units : String? ) # What kind of unit height should use when rendering #width : IFNumber? # #width= ( width : IFNumber? ) # #width_units : String? # What kind of unit width should use when rendering #width_units= ( width_units : String? ) # What kind of unit width should use when rendering module Celestine::Modules::Body::Attrs # Direct including types Celestine::Filter::Attrs Celestine::Filter::Basic::Attrs Celestine::Image::Attrs Celestine::Mask::Attrs Celestine::Pattern::Attrs Celestine::Rectangle::Attrs Celestine::Svg::Attrs Celestine::Use::Attrs Constants # HEIGHT = \"height\" # WIDTH = \"width\" #","title":"Body"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body","text":"Gives drawables access to basic X, Y, W, H paramaters","title":"Body"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#body_attribute(io)","text":"Draws the body and position attributes to an IO View source","title":"#body_attribute"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#height","text":"","title":"#height"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#height=(height)","text":"","title":"#height="},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#height_units","text":"What kind of unit height should use when rendering","title":"#height_units"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#height_units=(height_units)","text":"What kind of unit height should use when rendering","title":"#height_units="},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#width","text":"","title":"#width"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#width=(width)","text":"","title":"#width="},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#width_units","text":"What kind of unit width should use when rendering","title":"#width_units"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body#width_units=(width_units)","text":"What kind of unit width should use when rendering","title":"#width_units="},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body::Attrs::HEIGHT","text":"","title":"HEIGHT"},{"location":"Celestine/Modules/Body.html#Celestine::Modules::Body::Attrs::WIDTH","text":"","title":"WIDTH"},{"location":"Celestine/Modules/CPosition.html","text":"module Celestine::Modules::CPosition # Gives drawables access to the X -> CX, Y -> CY params Direct including types Celestine::Circle Celestine::Ellipse Celestine::Gradient::Radial Methods # #position_attribute ( io : IO ) # Draws the positions attributes out to an IO View source #x : IFNumber? # #x= ( x : IFNumber? ) # #x_units : String? # What kind of unit x should use when rendering #x_units= ( x_units : String? ) # What kind of unit x should use when rendering #y : IFNumber? # #y= ( y : IFNumber? ) # #y_units : String? # What kind of unit y should use when rendering #y_units= ( y_units : String? ) # What kind of unit y should use when rendering module Celestine::Modules::CPosition::Attrs # Direct including types Celestine::Circle::Attrs Celestine::Ellipse::Attrs Celestine::Gradient::Radial::Attrs Constants # X = \"cx\" # Y = \"cy\" #","title":"CPosition"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition","text":"Gives drawables access to the X -> CX, Y -> CY params","title":"CPosition"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#position_attribute(io)","text":"Draws the positions attributes out to an IO View source","title":"#position_attribute"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#x","text":"","title":"#x"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#x=(x)","text":"","title":"#x="},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#x_units","text":"What kind of unit x should use when rendering","title":"#x_units"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#x_units=(x_units)","text":"What kind of unit x should use when rendering","title":"#x_units="},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#y","text":"","title":"#y"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#y=(y)","text":"","title":"#y="},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#y_units","text":"What kind of unit y should use when rendering","title":"#y_units"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition#y_units=(y_units)","text":"What kind of unit y should use when rendering","title":"#y_units="},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition::Attrs::X","text":"","title":"X"},{"location":"Celestine/Modules/CPosition.html#Celestine::Modules::CPosition::Attrs::Y","text":"","title":"Y"},{"location":"Celestine/Modules/CommonAnimate.html","text":"module Celestine::Modules::CommonAnimate # Gives animated elements like animate and animate_motion it's shared attributes. Direct including types Celestine::Animate Celestine::Animate::Motion Celestine::Modules::Animate::Transform::Rotate Celestine::Modules::Animate::Transform::Scale Celestine::Modules::Animate::Transform::SkewX Celestine::Modules::Animate::Transform::SkewY Celestine::Modules::Animate::Transform::Translate Methods # #accumulate= ( accumulate ) # The accumulate attribute controls whether or not an animation is cumulative. It is frequently useful for repeated animations to build upon the previous results, accumulating with each iteration. Mozilla SVG Docs View source #accumulate? # The accumulate attribute controls whether or not an animation is cumulative. It is frequently useful for repeated animations to build upon the previous results, accumulating with each iteration. Mozilla SVG Docs View source #additive= ( additive ) # The additive attribute controls whether or not an animation is additive. It is frequently useful to define animation as an offset or delta to an attribute's value, rather than as absolute values. Mozilla SVG Docs View source #additive? # The additive attribute controls whether or not an animation is additive. It is frequently useful to define animation as an offset or delta to an attribute's value, rather than as absolute values. Mozilla SVG Docs View source #animate_attribute ( io : IO ) # View source #calc_mode : String? # Defines how the animation should interpolate values. Potential values: discrete | linear | paced | spline Mozilla SVG Docs View source #calc_mode= ( calc_mode : String? ) # Defines how the animation should interpolate values. Potential values: discrete | linear | paced | spline Mozilla SVG Docs View source #duration : IFNumber? # The duration of the animation #duration= ( duration : IFNumber? ) # The duration of the animation #duration_units : String? # What kind of unit duration should use when rendering #duration_units= ( duration_units : String? ) # What kind of unit duration should use when rendering #freeze= ( freeze ) # The additive attribute controls whether or not an animation is additive. It is frequently useful to define animation as an offset or delta to an attribute's value, rather than as absolute values. Mozilla SVG Docs View source #freeze? # The additive attribute controls whether or not an animation is additive. It is frequently useful to define animation as an offset or delta to an attribute's value, rather than as absolute values. Mozilla SVG Docs View source #key_splines : Array ( SIFNumber ) # This is an optional array of floats that describe at what times in an animation values should be used. This can only be used with values . TODO: Restrict this to only allow numbers between 0 and 1.0 View source #key_splines= ( key_splines : Array ( SIFNumber )) # This is an optional array of floats that describe at what times in an animation values should be used. This can only be used with values . TODO: Restrict this to only allow numbers between 0 and 1.0 View source #key_times : Array ( SIFNumber ) # This is an optional array of floats that describe at what times in an animation values should be used. This can only be used with values . TODO: Restrict this to only allow numbers between 0 and 1.0 View source #key_times= ( key_times : Array ( SIFNumber )) # This is an optional array of floats that describe at what times in an animation values should be used. This can only be used with values . TODO: Restrict this to only allow numbers between 0 and 1.0 View source #max : IFNumber? # The max attribute specifies the minimum value of the active animation duration Mozilla SVG Docs #max= ( max : IFNumber? ) # The max attribute specifies the minimum value of the active animation duration Mozilla SVG Docs #max_units : String? # What kind of unit max should use when rendering #max_units= ( max_units : String? ) # What kind of unit max should use when rendering #min : IFNumber? # The min attribute specifies the minimum value of the active animation duration Mozilla SVG Docs #min= ( min : IFNumber? ) # The min attribute specifies the minimum value of the active animation duration Mozilla SVG Docs #min_units : String? # What kind of unit min should use when rendering #min_units= ( min_units : String? ) # What kind of unit min should use when rendering #repeat_count : IFNumber | String | Nil # How many times this animation should be repeated. This can be a number or the string \"indefinite\" View source #repeat_count= ( repeat_count : IFNumber | String | Nil ) # How many times this animation should be repeated. This can be a number or the string \"indefinite\" View source #repeat_duration : IFNumber? # The duration that the animation should repeat. #repeat_duration= ( repeat_duration : IFNumber? ) # The duration that the animation should repeat. #repeat_duration_units : String? # What kind of unit repeat_duration should use when rendering #repeat_duration_units= ( repeat_duration_units : String? ) # What kind of unit repeat_duration should use when rendering #values : Array ( SIFNumber ) # An optional way to specify the values to animate between, for example, adding the numbers 0 , 100 , 0 it will animate the attribute from 0 to 100 in the first half # of the animation time and then go back to 0 . Values in this View source #values= ( values : Array ( SIFNumber )) # An optional way to specify the values to animate between, for example, adding the numbers 0 , 100 , 0 it will animate the attribute from 0 to 100 in the first half # of the animation time and then go back to 0 . Values in this View source module Celestine::Modules::CommonAnimate::Attrs # Direct including types Celestine::Animate::Attrs Celestine::Animate::Motion::Attrs Celestine::Modules::Animate::Transform::Rotate::Attrs Celestine::Modules::Animate::Transform::Scale::Attrs Celestine::Modules::Animate::Transform::SkewX::Attrs Celestine::Modules::Animate::Transform::SkewY::Attrs Celestine::Modules::Animate::Transform::Translate::Attrs Constants # ACCUMULATE = \"accumulate\" # ADDITIVE = \"additive\" # CALC_MODE = \"calcMode\" # DURATION = \"dur\" # FILL = \"fill\" # KEY_SPLINES = \"keySplines\" # KEY_TIMES = \"keyTimes\" # MAX = \"max\" # MIN = \"min\" # REPEAT_COUNT = \"repeatCount\" # REPEAT_DURATION = \"repeatDur\" # VALUES = \"values\" #","title":"CommonAnimate"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate","text":"Gives animated elements like animate and animate_motion it's shared attributes.","title":"CommonAnimate"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#accumulate=(accumulate)","text":"The accumulate attribute controls whether or not an animation is cumulative. It is frequently useful for repeated animations to build upon the previous results, accumulating with each iteration. Mozilla SVG Docs View source","title":"#accumulate="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#accumulate?","text":"The accumulate attribute controls whether or not an animation is cumulative. It is frequently useful for repeated animations to build upon the previous results, accumulating with each iteration. Mozilla SVG Docs View source","title":"#accumulate?"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#additive=(additive)","text":"The additive attribute controls whether or not an animation is additive. It is frequently useful to define animation as an offset or delta to an attribute's value, rather than as absolute values. Mozilla SVG Docs View source","title":"#additive="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#additive?","text":"The additive attribute controls whether or not an animation is additive. It is frequently useful to define animation as an offset or delta to an attribute's value, rather than as absolute values. Mozilla SVG Docs View source","title":"#additive?"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#animate_attribute(io)","text":"View source","title":"#animate_attribute"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#calc_mode","text":"Defines how the animation should interpolate values. Potential values: discrete | linear | paced | spline Mozilla SVG Docs View source","title":"#calc_mode"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#calc_mode=(calc_mode)","text":"Defines how the animation should interpolate values. Potential values: discrete | linear | paced | spline Mozilla SVG Docs View source","title":"#calc_mode="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#duration","text":"The duration of the animation","title":"#duration"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#duration=(duration)","text":"The duration of the animation","title":"#duration="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#duration_units","text":"What kind of unit duration should use when rendering","title":"#duration_units"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#duration_units=(duration_units)","text":"What kind of unit duration should use when rendering","title":"#duration_units="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#freeze=(freeze)","text":"The additive attribute controls whether or not an animation is additive. It is frequently useful to define animation as an offset or delta to an attribute's value, rather than as absolute values. Mozilla SVG Docs View source","title":"#freeze="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#freeze?","text":"The additive attribute controls whether or not an animation is additive. It is frequently useful to define animation as an offset or delta to an attribute's value, rather than as absolute values. Mozilla SVG Docs View source","title":"#freeze?"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#key_splines","text":"This is an optional array of floats that describe at what times in an animation values should be used. This can only be used with values . TODO: Restrict this to only allow numbers between 0 and 1.0 View source","title":"#key_splines"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#key_splines=(key_splines)","text":"This is an optional array of floats that describe at what times in an animation values should be used. This can only be used with values . TODO: Restrict this to only allow numbers between 0 and 1.0 View source","title":"#key_splines="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#key_times","text":"This is an optional array of floats that describe at what times in an animation values should be used. This can only be used with values . TODO: Restrict this to only allow numbers between 0 and 1.0 View source","title":"#key_times"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#key_times=(key_times)","text":"This is an optional array of floats that describe at what times in an animation values should be used. This can only be used with values . TODO: Restrict this to only allow numbers between 0 and 1.0 View source","title":"#key_times="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#max","text":"The max attribute specifies the minimum value of the active animation duration Mozilla SVG Docs","title":"#max"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#max=(max)","text":"The max attribute specifies the minimum value of the active animation duration Mozilla SVG Docs","title":"#max="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#max_units","text":"What kind of unit max should use when rendering","title":"#max_units"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#max_units=(max_units)","text":"What kind of unit max should use when rendering","title":"#max_units="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#min","text":"The min attribute specifies the minimum value of the active animation duration Mozilla SVG Docs","title":"#min"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#min=(min)","text":"The min attribute specifies the minimum value of the active animation duration Mozilla SVG Docs","title":"#min="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#min_units","text":"What kind of unit min should use when rendering","title":"#min_units"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#min_units=(min_units)","text":"What kind of unit min should use when rendering","title":"#min_units="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#repeat_count","text":"How many times this animation should be repeated. This can be a number or the string \"indefinite\" View source","title":"#repeat_count"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#repeat_count=(repeat_count)","text":"How many times this animation should be repeated. This can be a number or the string \"indefinite\" View source","title":"#repeat_count="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#repeat_duration","text":"The duration that the animation should repeat.","title":"#repeat_duration"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#repeat_duration=(repeat_duration)","text":"The duration that the animation should repeat.","title":"#repeat_duration="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#repeat_duration_units","text":"What kind of unit repeat_duration should use when rendering","title":"#repeat_duration_units"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#repeat_duration_units=(repeat_duration_units)","text":"What kind of unit repeat_duration should use when rendering","title":"#repeat_duration_units="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#values","text":"An optional way to specify the values to animate between, for example, adding the numbers 0 , 100 , 0 it will animate the attribute from 0 to 100 in the first half # of the animation time and then go back to 0 . Values in this View source","title":"#values"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate#values=(values)","text":"An optional way to specify the values to animate between, for example, adding the numbers 0 , 100 , 0 it will animate the attribute from 0 to 100 in the first half # of the animation time and then go back to 0 . Values in this View source","title":"#values="},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::ACCUMULATE","text":"","title":"ACCUMULATE"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::ADDITIVE","text":"","title":"ADDITIVE"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::CALC_MODE","text":"","title":"CALC_MODE"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::DURATION","text":"","title":"DURATION"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::FILL","text":"","title":"FILL"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::KEY_SPLINES","text":"","title":"KEY_SPLINES"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::KEY_TIMES","text":"","title":"KEY_TIMES"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::MAX","text":"","title":"MAX"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::MIN","text":"","title":"MIN"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::REPEAT_COUNT","text":"","title":"REPEAT_COUNT"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::REPEAT_DURATION","text":"","title":"REPEAT_DURATION"},{"location":"Celestine/Modules/CommonAnimate.html#Celestine::Modules::CommonAnimate::Attrs::VALUES","text":"","title":"VALUES"},{"location":"Celestine/Modules/Filter.html","text":"module Celestine::Modules::Filter # Gives drawables access to applied filters Direct including types Celestine::Anchor Celestine::Circle Celestine::Ellipse Celestine::Gradient Celestine::Group Celestine::Image Celestine::Marker Celestine::Mask Celestine::Path Celestine::Pattern Celestine::Rectangle Celestine::Svg Celestine::Text Celestine::Use Methods # #filter_attribute ( io : IO ) # Draws the filter attribute to an IO View source #set_filter ( id : String ) # Sets the filter to use via ID for this drawable View source #set_filter ( filter : Celestine::Filter ) # Sets the filter to use for this drawable View source module Celestine::Modules::Filter::Attrs # Direct including types Celestine::Anchor::Attrs Celestine::Circle::Attrs Celestine::Ellipse::Attrs Celestine::Gradient::Attrs Celestine::Group::Attrs Celestine::Image::Attrs Celestine::Marker::Attrs Celestine::Mask::Attrs Celestine::Path::Attrs Celestine::Pattern::Attrs Celestine::Rectangle::Attrs Celestine::Svg::Attrs Celestine::Text::Attrs Celestine::Use::Attrs Constants # FILTER = \"filter\" #","title":"Filter"},{"location":"Celestine/Modules/Filter.html#Celestine::Modules::Filter","text":"Gives drawables access to applied filters","title":"Filter"},{"location":"Celestine/Modules/Filter.html#Celestine::Modules::Filter-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Filter.html#Celestine::Modules::Filter#filter_attribute(io)","text":"Draws the filter attribute to an IO View source","title":"#filter_attribute"},{"location":"Celestine/Modules/Filter.html#Celestine::Modules::Filter#set_filter(id)","text":"Sets the filter to use via ID for this drawable View source","title":"#set_filter"},{"location":"Celestine/Modules/Filter.html#Celestine::Modules::Filter::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Filter.html#Celestine::Modules::Filter::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Filter.html#Celestine::Modules::Filter::Attrs::FILTER","text":"","title":"FILTER"},{"location":"Celestine/Modules/Marker.html","text":"module Celestine::Modules::Marker # Gives drawables access to the marker attributes TODO: Test this Direct including types Celestine::Circle Celestine::Ellipse Celestine::Path Celestine::Rectangle Methods # #marker_attribute ( io : IO ) # View source #set_marker_end ( id : String ) # View source #set_marker_end ( marker : Celestine::Marker ) # View source #set_marker_mid ( id : String ) # View source #set_marker_mid ( marker : Celestine::Marker ) # View source #set_marker_start ( id : String ) # View source #set_marker_start ( marker : Celestine::Marker ) # View source module Celestine::Modules::Marker::Attrs # Direct including types Celestine::Circle::Attrs Celestine::Ellipse::Attrs Celestine::Path::Attrs Celestine::Rectangle::Attrs Constants # END = \"marker-end\" # MID = \"marker-mid\" # START = \"marker-start\" #","title":"Marker"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker","text":"Gives drawables access to the marker attributes TODO: Test this","title":"Marker"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker#marker_attribute(io)","text":"View source","title":"#marker_attribute"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker#set_marker_end(id)","text":"View source","title":"#set_marker_end"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker#set_marker_mid(id)","text":"View source","title":"#set_marker_mid"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker#set_marker_start(id)","text":"View source","title":"#set_marker_start"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker::Attrs::END","text":"","title":"END"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker::Attrs::MID","text":"","title":"MID"},{"location":"Celestine/Modules/Marker.html#Celestine::Modules::Marker::Attrs::START","text":"","title":"START"},{"location":"Celestine/Modules/Mask.html","text":"module Celestine::Modules::Mask # Gives drawable access to an applied mask Direct including types Celestine::Anchor Celestine::Circle Celestine::Ellipse Celestine::Group Celestine::Image Celestine::Path Celestine::Rectangle Celestine::Svg Celestine::Text Celestine::Use Methods # #mask_attribute ( io : IO ) # Draws the mask atttribute out to an IO View source #set_mask ( id : String ) # Sets the mask to use via ID on this drawable View source #set_mask ( mask : Celestine::Mask ) # Sets the mask to use on this drawable View source module Celestine::Modules::Mask::Attrs # Direct including types Celestine::Anchor::Attrs Celestine::Circle::Attrs Celestine::Ellipse::Attrs Celestine::Group::Attrs Celestine::Image::Attrs Celestine::Path::Attrs Celestine::Rectangle::Attrs Celestine::Svg::Attrs Celestine::Text::Attrs Celestine::Use::Attrs Constants # MASK = \"mask\" #","title":"Mask"},{"location":"Celestine/Modules/Mask.html#Celestine::Modules::Mask","text":"Gives drawable access to an applied mask","title":"Mask"},{"location":"Celestine/Modules/Mask.html#Celestine::Modules::Mask-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Mask.html#Celestine::Modules::Mask#mask_attribute(io)","text":"Draws the mask atttribute out to an IO View source","title":"#mask_attribute"},{"location":"Celestine/Modules/Mask.html#Celestine::Modules::Mask#set_mask(id)","text":"Sets the mask to use via ID on this drawable View source","title":"#set_mask"},{"location":"Celestine/Modules/Mask.html#Celestine::Modules::Mask::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Mask.html#Celestine::Modules::Mask::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Mask.html#Celestine::Modules::Mask::Attrs::MASK","text":"","title":"MASK"},{"location":"Celestine/Modules/Position.html","text":"module Celestine::Modules::Position # Gives drawables access to the X, Y params Direct including types Celestine::Modules::Body Celestine::Text Methods # #position_attribute ( io : IO ) # Draws the positions attributes out to an IO View source #x : IFNumber? # #x= ( x : IFNumber? ) # #x_units : String? # What kind of unit x should use when rendering #x_units= ( x_units : String? ) # What kind of unit x should use when rendering #y : IFNumber? # #y= ( y : IFNumber? ) # #y_units : String? # What kind of unit y should use when rendering #y_units= ( y_units : String? ) # What kind of unit y should use when rendering module Celestine::Modules::Position::Attrs # Direct including types Celestine::Text::Attrs Constants # X = \"x\" # Y = \"y\" #","title":"Position"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position","text":"Gives drawables access to the X, Y params","title":"Position"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#position_attribute(io)","text":"Draws the positions attributes out to an IO View source","title":"#position_attribute"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#x","text":"","title":"#x"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#x=(x)","text":"","title":"#x="},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#x_units","text":"What kind of unit x should use when rendering","title":"#x_units"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#x_units=(x_units)","text":"What kind of unit x should use when rendering","title":"#x_units="},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#y","text":"","title":"#y"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#y=(y)","text":"","title":"#y="},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#y_units","text":"What kind of unit y should use when rendering","title":"#y_units"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position#y_units=(y_units)","text":"What kind of unit y should use when rendering","title":"#y_units="},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position::Attrs::X","text":"","title":"X"},{"location":"Celestine/Modules/Position.html#Celestine::Modules::Position::Attrs::Y","text":"","title":"Y"},{"location":"Celestine/Modules/StrokeFill.html","text":"module Celestine::Modules::StrokeFill # Gives a drawable access to stroke, fill, and opacity attributes, as well as other related attributes Direct including types Celestine::Anchor Celestine::Circle Celestine::Ellipse Celestine::Group Celestine::Marker Celestine::Mask Celestine::Path Celestine::Pattern Celestine::Rectangle Celestine::Svg Celestine::Text Celestine::Use Methods # #color : String? # The inherited/inheriting color of the drawable Potential Values: <Any CSS Color Type> | currentColor Mozilla SVG Docs View source #color= ( color : String? ) # The inherited/inheriting color of the drawable Potential Values: <Any CSS Color Type> | currentColor Mozilla SVG Docs View source #color_interpolation : String? # Specifies the color space for gradient interpolations, color animations, and alpha compositing Potential Values: auto | sRGB | linearRGB Mozilla SVG Docs View source #color_interpolation= ( color_interpolation : String? ) # Specifies the color space for gradient interpolations, color animations, and alpha compositing Potential Values: auto | sRGB | linearRGB Mozilla SVG Docs View source #color_interpolation_filters : String? # Specifies the color space for imaging operations performed via filter effects. Potential Values: auto | sRGB | linearRGB Mozilla SVG Docs View source #color_interpolation_filters= ( color_interpolation_filters : String? ) # Specifies the color space for imaging operations performed via filter effects. Potential Values: auto | sRGB | linearRGB Mozilla SVG Docs View source #dash_array : Array ( Float64 ) # An array representing the amount of units a line should be \"on\" and \"off\" for. An array of [3] will dash the line for 3 units, then off for 3 units, then repeats until the line is finished. An array of [3 3] will dash the line for 3 units, then off for 3 units, then repeats until the line is finished. The same as [3] An array of [4 2] will dash the line for 4 units, then off for 2 units, then repeats until the line is finished. You can add more of these to make much more complicated dashed lines. Mozilla SVG Docs View source #dash_array= ( dash_array : Array ( Float64 )) # An array representing the amount of units a line should be \"on\" and \"off\" for. An array of [3] will dash the line for 3 units, then off for 3 units, then repeats until the line is finished. An array of [3 3] will dash the line for 3 units, then off for 3 units, then repeats until the line is finished. The same as [3] An array of [4 2] will dash the line for 4 units, then off for 2 units, then repeats until the line is finished. You can add more of these to make much more complicated dashed lines. Mozilla SVG Docs View source #dash_offset : IFNumber? # The offset to begin dashes on Mozilla SVG Docs #dash_offset= ( dash_offset : IFNumber? ) # The offset to begin dashes on Mozilla SVG Docs #dash_offset_units : String? # What kind of unit dash_offset should use when rendering #dash_offset_units= ( dash_offset_units : String? ) # What kind of unit dash_offset should use when rendering #fill : String? # The color of the fill Mozilla SVG Docs View source #fill= ( fill : String? ) # The color of the fill Mozilla SVG Docs View source #fill_opacity : IFNumber? # The opacity of the fill Mozilla SVG Docs View source #fill_opacity= ( fill_opacity : IFNumber? ) # The opacity of the fill Mozilla SVG Docs View source #fill_rule : Bool # The algorithm to use to determine the inside part of a shape. Potential Values: nonzero | evenodd * Mozilla SVG Docs View source #fill_rule= ( fill_rule : Bool ) # The algorithm to use to determine the inside part of a shape. Potential Values: nonzero | evenodd * Mozilla SVG Docs View source #line_cap : String? # How a line is capped at the ends Potential Values: butt | round | square * Mozilla SVG Docs View source #line_cap= ( line_cap : String? ) # How a line is capped at the ends Potential Values: butt | round | square * Mozilla SVG Docs View source #line_join : String? # How lines should be joined Potential Values: arcs | bevel |miter | miter-clip | round * Mozilla SVG Docs View source #line_join= ( line_join : String? ) # How lines should be joined Potential Values: arcs | bevel |miter | miter-clip | round * Mozilla SVG Docs View source #miter_limit : IFNumber? # The limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel. Mozilla SVG Docs #miter_limit= ( miter_limit : IFNumber? ) # The limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel. Mozilla SVG Docs #miter_limit_units : String? # What kind of unit miter_limit should use when rendering #miter_limit_units= ( miter_limit_units : String? ) # What kind of unit miter_limit should use when rendering #opacity : IFNumber? # The total opacity of the drawable Mozilla SVG Docs View source #opacity= ( opacity : IFNumber? ) # The total opacity of the drawable Mozilla SVG Docs View source #set_fill ( gradient : Celestine::Gradient ) # View source #set_fill ( pattern : Celestine::Pattern ) # View source #set_stroke ( pattern : Celestine::Pattern ) # View source #set_stroke ( gradient : Celestine::Gradient ) # View source #shape_rendering : String? # Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: auto | optimizeSpeed | crispEdges | geometricPrecision Mozilla SVG Docs View source #shape_rendering= ( shape_rendering : String? ) # Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: auto | optimizeSpeed | crispEdges | geometricPrecision Mozilla SVG Docs View source #stroke : String? # The color of the stroke Mozilla SVG Docs View source #stroke= ( stroke : String? ) # The color of the stroke Mozilla SVG Docs View source #stroke_fill_attribute ( io : IO ) # Draws the stroke and fill attributes out to an IO View source #stroke_opacity : IFNumber? # The opacity of the fill Mozilla SVG Docs View source #stroke_opacity= ( stroke_opacity : IFNumber? ) # The opacity of the fill Mozilla SVG Docs View source #stroke_width : IFNumber? # The width of the stroke Mozilla SVG Docs #stroke_width= ( stroke_width : IFNumber? ) # The width of the stroke Mozilla SVG Docs #stroke_width_units : String? # What kind of unit stroke_width should use when rendering #stroke_width_units= ( stroke_width_units : String? ) # What kind of unit stroke_width should use when rendering #vector_effect : String? # Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: none | non-scaling-stroke | non-scaling-size | non-rotation | fixed-position Mozilla SVG Docs View source #vector_effect= ( vector_effect : String? ) # Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: none | non-scaling-stroke | non-scaling-size | non-rotation | fixed-position Mozilla SVG Docs View source module Celestine::Modules::StrokeFill::Attrs # Direct including types Celestine::Anchor::Attrs Celestine::Circle::Attrs Celestine::Ellipse::Attrs Celestine::Group::Attrs Celestine::Marker::Attrs Celestine::Mask::Attrs Celestine::Path::Attrs Celestine::Pattern::Attrs Celestine::Rectangle::Attrs Celestine::Svg::Attrs Celestine::Text::Attrs Celestine::Use::Attrs Constants # COLOR = \"color\" # COLOR_INTERPOLATION = \"color_interpolation\" # COLOR_INTERPOLATION_FILTERS = \"color_interpolation_filters\" # DASH_ARRAY = \"stroke-dasharray\" # DASH_OFFSET = \"stroke-dashoffset\" # FILL = \"fill\" # FILL_OPACITY = \"fill-opacity\" # FILL_RULE = \"fill-rule\" # LINE_CAP = \"stroke-linecap\" # LINE_JOIN = \"stroke-linejoin\" # MITER_LIMIT = \"stroke-miterlimit\" # OPACITY = \"opacity\" # STROKE = \"stroke\" # STROKE_OPACITY = \"stroke-opacity\" # STROKE_WIDTH = \"stroke-width\" # VECTOR_EFFECT = \"vector-effect\" #","title":"StrokeFill"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill","text":"Gives a drawable access to stroke, fill, and opacity attributes, as well as other related attributes","title":"StrokeFill"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#color","text":"The inherited/inheriting color of the drawable Potential Values: <Any CSS Color Type> | currentColor Mozilla SVG Docs View source","title":"#color"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#color=(color)","text":"The inherited/inheriting color of the drawable Potential Values: <Any CSS Color Type> | currentColor Mozilla SVG Docs View source","title":"#color="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#color_interpolation","text":"Specifies the color space for gradient interpolations, color animations, and alpha compositing Potential Values: auto | sRGB | linearRGB Mozilla SVG Docs View source","title":"#color_interpolation"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#color_interpolation=(color_interpolation)","text":"Specifies the color space for gradient interpolations, color animations, and alpha compositing Potential Values: auto | sRGB | linearRGB Mozilla SVG Docs View source","title":"#color_interpolation="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#color_interpolation_filters","text":"Specifies the color space for imaging operations performed via filter effects. Potential Values: auto | sRGB | linearRGB Mozilla SVG Docs View source","title":"#color_interpolation_filters"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#color_interpolation_filters=(color_interpolation_filters)","text":"Specifies the color space for imaging operations performed via filter effects. Potential Values: auto | sRGB | linearRGB Mozilla SVG Docs View source","title":"#color_interpolation_filters="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#dash_array","text":"An array representing the amount of units a line should be \"on\" and \"off\" for. An array of [3] will dash the line for 3 units, then off for 3 units, then repeats until the line is finished. An array of [3 3] will dash the line for 3 units, then off for 3 units, then repeats until the line is finished. The same as [3] An array of [4 2] will dash the line for 4 units, then off for 2 units, then repeats until the line is finished. You can add more of these to make much more complicated dashed lines. Mozilla SVG Docs View source","title":"#dash_array"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#dash_array=(dash_array)","text":"An array representing the amount of units a line should be \"on\" and \"off\" for. An array of [3] will dash the line for 3 units, then off for 3 units, then repeats until the line is finished. An array of [3 3] will dash the line for 3 units, then off for 3 units, then repeats until the line is finished. The same as [3] An array of [4 2] will dash the line for 4 units, then off for 2 units, then repeats until the line is finished. You can add more of these to make much more complicated dashed lines. Mozilla SVG Docs View source","title":"#dash_array="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#dash_offset","text":"The offset to begin dashes on Mozilla SVG Docs","title":"#dash_offset"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#dash_offset=(dash_offset)","text":"The offset to begin dashes on Mozilla SVG Docs","title":"#dash_offset="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#dash_offset_units","text":"What kind of unit dash_offset should use when rendering","title":"#dash_offset_units"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#dash_offset_units=(dash_offset_units)","text":"What kind of unit dash_offset should use when rendering","title":"#dash_offset_units="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#fill","text":"The color of the fill Mozilla SVG Docs View source","title":"#fill"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#fill=(fill)","text":"The color of the fill Mozilla SVG Docs View source","title":"#fill="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#fill_opacity","text":"The opacity of the fill Mozilla SVG Docs View source","title":"#fill_opacity"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#fill_opacity=(fill_opacity)","text":"The opacity of the fill Mozilla SVG Docs View source","title":"#fill_opacity="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#fill_rule","text":"The algorithm to use to determine the inside part of a shape. Potential Values: nonzero | evenodd * Mozilla SVG Docs View source","title":"#fill_rule"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#fill_rule=(fill_rule)","text":"The algorithm to use to determine the inside part of a shape. Potential Values: nonzero | evenodd * Mozilla SVG Docs View source","title":"#fill_rule="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#line_cap","text":"How a line is capped at the ends Potential Values: butt | round | square * Mozilla SVG Docs View source","title":"#line_cap"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#line_cap=(line_cap)","text":"How a line is capped at the ends Potential Values: butt | round | square * Mozilla SVG Docs View source","title":"#line_cap="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#line_join","text":"How lines should be joined Potential Values: arcs | bevel |miter | miter-clip | round * Mozilla SVG Docs View source","title":"#line_join"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#line_join=(line_join)","text":"How lines should be joined Potential Values: arcs | bevel |miter | miter-clip | round * Mozilla SVG Docs View source","title":"#line_join="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#miter_limit","text":"The limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel. Mozilla SVG Docs","title":"#miter_limit"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#miter_limit=(miter_limit)","text":"The limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel. Mozilla SVG Docs","title":"#miter_limit="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#miter_limit_units","text":"What kind of unit miter_limit should use when rendering","title":"#miter_limit_units"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#miter_limit_units=(miter_limit_units)","text":"What kind of unit miter_limit should use when rendering","title":"#miter_limit_units="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#opacity","text":"The total opacity of the drawable Mozilla SVG Docs View source","title":"#opacity"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#opacity=(opacity)","text":"The total opacity of the drawable Mozilla SVG Docs View source","title":"#opacity="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#set_fill(gradient)","text":"View source","title":"#set_fill"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#set_stroke(pattern)","text":"View source","title":"#set_stroke"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#shape_rendering","text":"Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: auto | optimizeSpeed | crispEdges | geometricPrecision Mozilla SVG Docs View source","title":"#shape_rendering"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#shape_rendering=(shape_rendering)","text":"Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: auto | optimizeSpeed | crispEdges | geometricPrecision Mozilla SVG Docs View source","title":"#shape_rendering="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke","text":"The color of the stroke Mozilla SVG Docs View source","title":"#stroke"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke=(stroke)","text":"The color of the stroke Mozilla SVG Docs View source","title":"#stroke="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke_fill_attribute(io)","text":"Draws the stroke and fill attributes out to an IO View source","title":"#stroke_fill_attribute"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke_opacity","text":"The opacity of the fill Mozilla SVG Docs View source","title":"#stroke_opacity"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke_opacity=(stroke_opacity)","text":"The opacity of the fill Mozilla SVG Docs View source","title":"#stroke_opacity="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke_width","text":"The width of the stroke Mozilla SVG Docs","title":"#stroke_width"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke_width=(stroke_width)","text":"The width of the stroke Mozilla SVG Docs","title":"#stroke_width="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke_width_units","text":"What kind of unit stroke_width should use when rendering","title":"#stroke_width_units"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#stroke_width_units=(stroke_width_units)","text":"What kind of unit stroke_width should use when rendering","title":"#stroke_width_units="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#vector_effect","text":"Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: none | non-scaling-stroke | non-scaling-size | non-rotation | fixed-position Mozilla SVG Docs View source","title":"#vector_effect"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill#vector_effect=(vector_effect)","text":"Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles. Potential Values: none | non-scaling-stroke | non-scaling-size | non-rotation | fixed-position Mozilla SVG Docs View source","title":"#vector_effect="},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::COLOR","text":"","title":"COLOR"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::COLOR_INTERPOLATION","text":"","title":"COLOR_INTERPOLATION"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::COLOR_INTERPOLATION_FILTERS","text":"","title":"COLOR_INTERPOLATION_FILTERS"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::DASH_ARRAY","text":"","title":"DASH_ARRAY"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::DASH_OFFSET","text":"","title":"DASH_OFFSET"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::FILL","text":"","title":"FILL"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::FILL_OPACITY","text":"","title":"FILL_OPACITY"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::FILL_RULE","text":"","title":"FILL_RULE"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::LINE_CAP","text":"","title":"LINE_CAP"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::LINE_JOIN","text":"","title":"LINE_JOIN"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::MITER_LIMIT","text":"","title":"MITER_LIMIT"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::OPACITY","text":"","title":"OPACITY"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::STROKE","text":"","title":"STROKE"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::STROKE_OPACITY","text":"","title":"STROKE_OPACITY"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::STROKE_WIDTH","text":"","title":"STROKE_WIDTH"},{"location":"Celestine/Modules/StrokeFill.html#Celestine::Modules::StrokeFill::Attrs::VECTOR_EFFECT","text":"","title":"VECTOR_EFFECT"},{"location":"Celestine/Modules/Transform.html","text":"module Celestine::Modules::Transform # Gives a drawable access to the trasnform DSL Direct including types Celestine::Anchor Celestine::Circle Celestine::Ellipse Celestine::Gradient Celestine::Group Celestine::Image Celestine::Marker Celestine::Mask Celestine::Path Celestine::Pattern Celestine::Rectangle Celestine::Svg Celestine::Text Celestine::Use Methods # #transform ( & block : Celestine::Drawable::Transform -> Celestine::Drawable::Transform ) # View source #transform_attribute ( io : IO ) # View source module Celestine::Modules::Transform::Attrs # Direct including types Celestine::Anchor::Attrs Celestine::Circle::Attrs Celestine::Ellipse::Attrs Celestine::Gradient::Attrs Celestine::Group::Attrs Celestine::Image::Attrs Celestine::Marker::Attrs Celestine::Mask::Attrs Celestine::Path::Attrs Celestine::Pattern::Attrs Celestine::Rectangle::Attrs Celestine::Svg::Attrs Celestine::Text::Attrs Celestine::Use::Attrs Constants # TRANSFORM = \"transform\" #","title":"Transform"},{"location":"Celestine/Modules/Transform.html#Celestine::Modules::Transform","text":"Gives a drawable access to the trasnform DSL","title":"Transform"},{"location":"Celestine/Modules/Transform.html#Celestine::Modules::Transform-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Transform.html#Celestine::Modules::Transform#transform(&)","text":"View source","title":"#transform"},{"location":"Celestine/Modules/Transform.html#Celestine::Modules::Transform#transform_attribute(io)","text":"View source","title":"#transform_attribute"},{"location":"Celestine/Modules/Transform.html#Celestine::Modules::Transform::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Transform.html#Celestine::Modules::Transform::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Transform.html#Celestine::Modules::Transform::Attrs::TRANSFORM","text":"","title":"TRANSFORM"},{"location":"Celestine/Modules/Animate/Motion.html","text":"module Celestine::Modules::Animate::Motion # Gives drawables access to the animate_motion DSL Direct including types Celestine::Anchor Celestine::Circle Celestine::Ellipse Celestine::Group Celestine::Image Celestine::Marker Celestine::Mask Celestine::Path Celestine::Rectangle Celestine::Svg Celestine::Text Celestine::Use Methods # #animate_motion ( & block : Celestine::Animate::Motion -> Celestine::Animate::Motion ) # Adds a Celestine::Animate::Motion to the calling drawable's inner elements. View source","title":"Motion"},{"location":"Celestine/Modules/Animate/Motion.html#Celestine::Modules::Animate::Motion","text":"Gives drawables access to the animate_motion DSL","title":"Motion"},{"location":"Celestine/Modules/Animate/Motion.html#Celestine::Modules::Animate::Motion-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Animate/Motion.html#Celestine::Modules::Animate::Motion#animate_motion(&)","text":"Adds a Celestine::Animate::Motion to the calling drawable's inner elements. View source","title":"#animate_motion"},{"location":"Celestine/Modules/Animate/Transform.html","text":"module Celestine::Modules::Animate::Transform # Gives drawables access to the animate_transform DSL Direct including types Celestine::Anchor Celestine::Circle Celestine::Ellipse Celestine::Group Celestine::Image Celestine::Path Celestine::Rectangle Celestine::Svg Celestine::Text Celestine::Use Constants # ANIMATE_TRANSFORM_TYPES = [ \"rotate\" , \"translate\" , \"scale\" , \"skewX\" , \"skewY\" ] # Methods # #animate_transform_rotate ( & block : Proc ( Celestine::Animate::Transform::Rotate , Nil )) # Adds a Celestine::Animate::Transform to the calling drawable's inner elements. View source #animate_transform_scale ( & block : Proc ( Celestine::Animate::Transform::Scale , Nil )) # View source #animate_transform_skew_x ( & block : Proc ( Celestine::Animate::Transform::SkewX , Nil )) # View source #animate_transform_skew_y ( & block : Proc ( Celestine::Animate::Transform::SkewY , Nil )) # View source #animate_transform_translate ( & block : Proc ( Celestine::Animate::Transform::Translate , Nil )) # View source","title":"Transform"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform","text":"Gives drawables access to the animate_transform DSL","title":"Transform"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform::ANIMATE_TRANSFORM_TYPES","text":"","title":"ANIMATE_TRANSFORM_TYPES"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform#animate_transform_rotate(&)","text":"Adds a Celestine::Animate::Transform to the calling drawable's inner elements. View source","title":"#animate_transform_rotate"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform#animate_transform_scale(&)","text":"View source","title":"#animate_transform_scale"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform#animate_transform_skew_x(&)","text":"View source","title":"#animate_transform_skew_x"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform#animate_transform_skew_y(&)","text":"View source","title":"#animate_transform_skew_y"},{"location":"Celestine/Modules/Animate/Transform.html#Celestine::Modules::Animate::Transform#animate_transform_translate(&)","text":"View source","title":"#animate_transform_translate"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html","text":"class Celestine::Modules::Animate::Transform::Rotate inherits Celestine::Drawable # Included modules Celestine::Modules::CommonAnimate Constants # TAG = \"animateTransform\" # TYPE = \"rotate\" # Methods # #by_angle : Float64? # View source #by_angle= ( by_angle : Float64? ) # View source #by_origin_x : Float64? # View source #by_origin_x= ( by_origin_x : Float64? ) # View source #by_origin_y : Float64? # View source #by_origin_y= ( by_origin_y : Float64? ) # View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #from_angle : Float64? # View source #from_angle= ( from_angle : Float64? ) # View source #from_origin_x : Float64? # View source #from_origin_x= ( from_origin_x : Float64? ) # View source #from_origin_y : Float64? # View source #from_origin_y= ( from_origin_y : Float64? ) # View source #to_angle : Float64? # View source #to_angle= ( to_angle : Float64? ) # View source #to_origin_x : Float64? # View source #to_origin_x= ( to_origin_x : Float64? ) # View source #to_origin_y : Float64? # View source #to_origin_y= ( to_origin_y : Float64? ) # View source #use_by= ( use_by ) # View source #use_by? : Bool # View source #use_from= ( use_from ) # View source #use_from? : Bool # View source #use_to= ( use_to ) # View source #use_to? : Bool # View source module Celestine::Modules::Animate::Transform::Rotate::Attrs # Included modules Celestine::Modules::CommonAnimate::Attrs Constants # ATTRIBUTE_NAME = \"attributeName\" # BY = \"by\" # FROM = \"from\" # TO = \"to\" # TYPE = \"type\" #","title":"Rotate"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate","text":"","title":"Rotate"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::TAG","text":"","title":"TAG"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#by_angle","text":"View source","title":"#by_angle"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#by_angle=(by_angle)","text":"View source","title":"#by_angle="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#by_origin_x","text":"View source","title":"#by_origin_x"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#by_origin_x=(by_origin_x)","text":"View source","title":"#by_origin_x="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#by_origin_y","text":"View source","title":"#by_origin_y"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#by_origin_y=(by_origin_y)","text":"View source","title":"#by_origin_y="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#from_angle","text":"View source","title":"#from_angle"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#from_angle=(from_angle)","text":"View source","title":"#from_angle="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#from_origin_x","text":"View source","title":"#from_origin_x"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#from_origin_x=(from_origin_x)","text":"View source","title":"#from_origin_x="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#from_origin_y","text":"View source","title":"#from_origin_y"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#from_origin_y=(from_origin_y)","text":"View source","title":"#from_origin_y="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#to_angle","text":"View source","title":"#to_angle"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#to_angle=(to_angle)","text":"View source","title":"#to_angle="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#to_origin_x","text":"View source","title":"#to_origin_x"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#to_origin_x=(to_origin_x)","text":"View source","title":"#to_origin_x="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#to_origin_y","text":"View source","title":"#to_origin_y"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#to_origin_y=(to_origin_y)","text":"View source","title":"#to_origin_y="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#use_by=(use_by)","text":"View source","title":"#use_by="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#use_by?","text":"View source","title":"#use_by?"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#use_from=(use_from)","text":"View source","title":"#use_from="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#use_from?","text":"View source","title":"#use_from?"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#use_to=(use_to)","text":"View source","title":"#use_to="},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate#use_to?","text":"View source","title":"#use_to?"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::Attrs::ATTRIBUTE_NAME","text":"","title":"ATTRIBUTE_NAME"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::Attrs::BY","text":"","title":"BY"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::Attrs::FROM","text":"","title":"FROM"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::Attrs::TO","text":"","title":"TO"},{"location":"Celestine/Modules/Animate/Transform/Rotate.html#Celestine::Modules::Animate::Transform::Rotate::Attrs::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/Scale.html","text":"class Celestine::Modules::Animate::Transform::Scale inherits Celestine::Drawable # Included modules Celestine::Modules::CommonAnimate Constants # TAG = \"animateTransform\" # TYPE = \"scale\" # Methods # #by_x : Float64? # View source #by_x= ( by_x : Float64? ) # View source #by_y : Float64? # View source #by_y= ( by_y : Float64? ) # View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #from_x : Float64? # View source #from_x= ( from_x : Float64? ) # View source #from_y : Float64? # View source #from_y= ( from_y : Float64? ) # View source #to_x : Float64? # View source #to_x= ( to_x : Float64? ) # View source #to_y : Float64? # View source #to_y= ( to_y : Float64? ) # View source #use_by= ( use_by ) # View source #use_by? : Bool # View source #use_from= ( use_from ) # View source #use_from? : Bool # View source #use_to= ( use_to ) # View source #use_to? : Bool # View source module Celestine::Modules::Animate::Transform::Scale::Attrs # Included modules Celestine::Modules::CommonAnimate::Attrs Constants # ATTRIBUTE_NAME = \"attributeName\" # BY = \"by\" # FROM = \"from\" # TO = \"to\" # TYPE = \"type\" #","title":"Scale"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale","text":"","title":"Scale"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::TAG","text":"","title":"TAG"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#by_x","text":"View source","title":"#by_x"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#by_x=(by_x)","text":"View source","title":"#by_x="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#by_y","text":"View source","title":"#by_y"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#by_y=(by_y)","text":"View source","title":"#by_y="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#from_x","text":"View source","title":"#from_x"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#from_x=(from_x)","text":"View source","title":"#from_x="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#from_y","text":"View source","title":"#from_y"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#from_y=(from_y)","text":"View source","title":"#from_y="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#to_x","text":"View source","title":"#to_x"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#to_x=(to_x)","text":"View source","title":"#to_x="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#to_y","text":"View source","title":"#to_y"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#to_y=(to_y)","text":"View source","title":"#to_y="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#use_by=(use_by)","text":"View source","title":"#use_by="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#use_by?","text":"View source","title":"#use_by?"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#use_from=(use_from)","text":"View source","title":"#use_from="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#use_from?","text":"View source","title":"#use_from?"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#use_to=(use_to)","text":"View source","title":"#use_to="},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale#use_to?","text":"View source","title":"#use_to?"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::Attrs::ATTRIBUTE_NAME","text":"","title":"ATTRIBUTE_NAME"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::Attrs::BY","text":"","title":"BY"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::Attrs::FROM","text":"","title":"FROM"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::Attrs::TO","text":"","title":"TO"},{"location":"Celestine/Modules/Animate/Transform/Scale.html#Celestine::Modules::Animate::Transform::Scale::Attrs::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html","text":"class Celestine::Modules::Animate::Transform::SkewX inherits Celestine::Drawable # Included modules Celestine::Modules::CommonAnimate Constants # TAG = \"animateTransform\" # TYPE = \"skewX\" # Methods # #by : Float64? # View source #by= ( by : Float64? ) # View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #from : Float64? # View source #from= ( from : Float64? ) # View source #to : Float64? # View source #to= ( to : Float64? ) # View source #use_by= ( use_by ) # View source #use_by? : Bool # View source #use_from= ( use_from ) # View source #use_from? : Bool # View source #use_to= ( use_to ) # View source #use_to? : Bool # View source module Celestine::Modules::Animate::Transform::SkewX::Attrs # Included modules Celestine::Modules::CommonAnimate::Attrs Constants # ATTRIBUTE_NAME = \"attributeName\" # BY = \"by\" # FROM = \"from\" # TO = \"to\" # TYPE = \"type\" #","title":"SkewX"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX","text":"","title":"SkewX"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::TAG","text":"","title":"TAG"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#by","text":"View source","title":"#by"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#by=(by)","text":"View source","title":"#by="},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#from","text":"View source","title":"#from"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#from=(from)","text":"View source","title":"#from="},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#to","text":"View source","title":"#to"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#to=(to)","text":"View source","title":"#to="},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#use_by=(use_by)","text":"View source","title":"#use_by="},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#use_by?","text":"View source","title":"#use_by?"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#use_from=(use_from)","text":"View source","title":"#use_from="},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#use_from?","text":"View source","title":"#use_from?"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#use_to=(use_to)","text":"View source","title":"#use_to="},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX#use_to?","text":"View source","title":"#use_to?"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::Attrs::ATTRIBUTE_NAME","text":"","title":"ATTRIBUTE_NAME"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::Attrs::BY","text":"","title":"BY"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::Attrs::FROM","text":"","title":"FROM"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::Attrs::TO","text":"","title":"TO"},{"location":"Celestine/Modules/Animate/Transform/SkewX.html#Celestine::Modules::Animate::Transform::SkewX::Attrs::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html","text":"class Celestine::Modules::Animate::Transform::SkewY inherits Celestine::Drawable # Included modules Celestine::Modules::CommonAnimate Constants # TAG = \"animateTransform\" # TYPE = \"skewY\" # Methods # #by : Float64? # View source #by= ( by : Float64? ) # View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #from : Float64? # View source #from= ( from : Float64? ) # View source #to : Float64? # View source #to= ( to : Float64? ) # View source #use_by= ( use_by ) # View source #use_by? : Bool # View source #use_from= ( use_from ) # View source #use_from? : Bool # View source #use_to= ( use_to ) # View source #use_to? : Bool # View source module Celestine::Modules::Animate::Transform::SkewY::Attrs # Included modules Celestine::Modules::CommonAnimate::Attrs Constants # ATTRIBUTE_NAME = \"attributeName\" # BY = \"by\" # FROM = \"from\" # TO = \"to\" # TYPE = \"type\" #","title":"SkewY"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY","text":"","title":"SkewY"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::TAG","text":"","title":"TAG"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#by","text":"View source","title":"#by"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#by=(by)","text":"View source","title":"#by="},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#from","text":"View source","title":"#from"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#from=(from)","text":"View source","title":"#from="},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#to","text":"View source","title":"#to"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#to=(to)","text":"View source","title":"#to="},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#use_by=(use_by)","text":"View source","title":"#use_by="},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#use_by?","text":"View source","title":"#use_by?"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#use_from=(use_from)","text":"View source","title":"#use_from="},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#use_from?","text":"View source","title":"#use_from?"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#use_to=(use_to)","text":"View source","title":"#use_to="},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY#use_to?","text":"View source","title":"#use_to?"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::Attrs::ATTRIBUTE_NAME","text":"","title":"ATTRIBUTE_NAME"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::Attrs::BY","text":"","title":"BY"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::Attrs::FROM","text":"","title":"FROM"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::Attrs::TO","text":"","title":"TO"},{"location":"Celestine/Modules/Animate/Transform/SkewY.html#Celestine::Modules::Animate::Transform::SkewY::Attrs::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/Translate.html","text":"class Celestine::Modules::Animate::Transform::Translate inherits Celestine::Drawable # Included modules Celestine::Modules::CommonAnimate Constants # TAG = \"animateTransform\" # TYPE = \"translate\" # Methods # #by_x : Float64? # View source #by_x= ( by_x : Float64? ) # View source #by_y : Float64? # View source #by_y= ( by_y : Float64? ) # View source #draw ( io : IO ) : Nil # Main draw method for a drawable. Takes in and interacts with an io. View source #from_x : Float64? # View source #from_x= ( from_x : Float64? ) # View source #from_y : Float64? # View source #from_y= ( from_y : Float64? ) # View source #to_x : Float64? # View source #to_x= ( to_x : Float64? ) # View source #to_y : Float64? # View source #to_y= ( to_y : Float64? ) # View source #use_by= ( use_by ) # View source #use_by? : Bool # View source #use_from= ( use_from ) # View source #use_from? : Bool # View source #use_to= ( use_to ) # View source #use_to? : Bool # View source module Celestine::Modules::Animate::Transform::Translate::Attrs # Included modules Celestine::Modules::CommonAnimate::Attrs Constants # ATTRIBUTE_NAME = \"attributeName\" # BY = \"by\" # FROM = \"from\" # TO = \"to\" # TYPE = \"type\" #","title":"Translate"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate","text":"","title":"Translate"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::TAG","text":"","title":"TAG"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::TYPE","text":"","title":"TYPE"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate-methods","text":"","title":"Methods"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#by_x","text":"View source","title":"#by_x"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#by_x=(by_x)","text":"View source","title":"#by_x="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#by_y","text":"View source","title":"#by_y"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#by_y=(by_y)","text":"View source","title":"#by_y="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#draw(io)","text":"Main draw method for a drawable. Takes in and interacts with an io. View source","title":"#draw"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#from_x","text":"View source","title":"#from_x"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#from_x=(from_x)","text":"View source","title":"#from_x="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#from_y","text":"View source","title":"#from_y"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#from_y=(from_y)","text":"View source","title":"#from_y="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#to_x","text":"View source","title":"#to_x"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#to_x=(to_x)","text":"View source","title":"#to_x="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#to_y","text":"View source","title":"#to_y"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#to_y=(to_y)","text":"View source","title":"#to_y="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#use_by=(use_by)","text":"View source","title":"#use_by="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#use_by?","text":"View source","title":"#use_by?"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#use_from=(use_from)","text":"View source","title":"#use_from="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#use_from?","text":"View source","title":"#use_from?"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#use_to=(use_to)","text":"View source","title":"#use_to="},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate#use_to?","text":"View source","title":"#use_to?"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::Attrs","text":"","title":"Attrs"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::Attrs-constants","text":"","title":"Constants"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::Attrs::ATTRIBUTE_NAME","text":"","title":"ATTRIBUTE_NAME"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::Attrs::BY","text":"","title":"BY"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::Attrs::FROM","text":"","title":"FROM"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::Attrs::TO","text":"","title":"TO"},{"location":"Celestine/Modules/Animate/Transform/Translate.html#Celestine::Modules::Animate::Transform::Translate::Attrs::TYPE","text":"","title":"TYPE"},{"location":"benchmarks/0.7.5alpha.html","text":"user system total real Add objects 1.157433 0.070242 1.227675 ( 1.194311) Nest objects 2.297965 0.213189 2.511154 ( 2.132022) user system total real Hypnos 1000 2.754121 0.041793 2.795914 ( 2.661912) Inward 1000 19.296159 0.441315 19.737474 ( 18.746370) Mineshift-S 1000 3.161129 0.153070 3.314199 ( 2.910355) Chromatic 1000 6.966219 0.564884 7.531103 ( 6.542142) Patchwork 1000 8.739341 0.385815 9.125156 ( 8.244479) Splash 1000 0.045612 0.003787 0.049399 ( 0.042559) PsychoFlower 1000 10.654597 0.708812 11.363409 ( 10.153129) Polarspins 1000 31.436410 1.105619 32.542029 ( 30.366046)","title":"0.7.5alpha"},{"location":"benchmarks/0.7.9alpha.html","text":"user system total real Add objects 1.205070 0.073007 1.278077 ( 1.248246) Nest objects 2.312152 0.286267 2.598419 ( 2.201623) user system total real Hypnos 1000 2.725748 0.086612 2.812360 ( 2.680857) Inward 1000 19.311029 0.517311 19.828340 ( 18.839482) Mineshift-S 1000 3.222305 0.126539 3.348844 ( 2.929114) Chromatic 1000 7.404551 0.347693 7.752244 ( 6.754902) Patchwork 1000 8.897333 0.392498 9.289831 ( 8.396370) Splash 1000 0.050486 0.000200 0.050686 ( 0.043763) PsychoFlower 1000 10.866722 0.431738 11.298460 ( 10.162874) Polarspins 1000 31.607045 1.564155 33.171200 ( 30.997526)","title":"0.7.9alpha"},{"location":"benchmarks/0.8.3alpha.html","text":"user system total real Add objects 1.152907 0.053512 1.206419 ( 1.170916) Nest objects 2.281034 0.205466 2.486500 ( 2.113883) user system total real Hypnos 1000 2.732880 0.066005 2.798885 ( 2.666669) Inward 1000 19.222969 0.431741 19.654710 ( 18.663008) Mineshift-S 1000 3.152079 0.146999 3.299078 ( 2.884900) Chromatic 1000 6.835311 0.354442 7.189753 ( 6.202939) Patchwork 1000 8.727944 0.316407 9.044351 ( 8.147788) Splash 1000 0.045146 0.003531 0.048677 ( 0.041213) PsychoFlower 1000 10.781879 0.621143 11.403022 ( 10.215786) Polarspins 1000 31.089787 1.676713 32.766500 ( 30.645333)","title":"0.8.3alpha"}]}